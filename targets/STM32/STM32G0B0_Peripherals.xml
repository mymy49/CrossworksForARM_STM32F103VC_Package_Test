<Processor name="STM32G0B0" description="STM32G0B0">
  <RegisterGroup name="ADC" start="0x40012400" description="Analog to Digital ConverteR">
    <Register start="+0x0" size="0" name="ADC_ISR" access="Read/Write" description="ADC interrupt and status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ADRDY" description="ADC ready This bit is set by hardware after the ADC has been enabled (ADEN=1) and when the ADC reaches a state where it is ready to accept conversion requests. It is cleared by software writing 1 to it.">
        <Enum name="B_0x0" start="0x0" description="ADC not yet ready to start conversion (or the flag event was already acknowledged and cleared by software)" />
        <Enum name="B_0x1" start="0x1" description="ADC is ready to start conversion" />
      </BitField>
      <BitField start="1" size="1" name="EOSMP" description="End of sampling flag This bit is set by hardware during the conversion, at the end of the sampling phase.It is cleared by software by programming it to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;.">
        <Enum name="B_0x0" start="0x0" description="Not at the end of the sampling phase (or the flag event was already acknowledged and cleared by software)" />
        <Enum name="B_0x1" start="0x1" description="End of sampling phase reached" />
      </BitField>
      <BitField start="2" size="1" name="EOC" description="End of conversion flag This bit is set by hardware at the end of each conversion of a channel when a new data result is available in the ADC_DR register. It is cleared by software writing 1 to it or by reading the ADC_DR register.">
        <Enum name="B_0x0" start="0x0" description="Channel conversion not complete (or the flag event was already acknowledged and cleared by software)" />
        <Enum name="B_0x1" start="0x1" description="Channel conversion complete" />
      </BitField>
      <BitField start="3" size="1" name="EOS" description="End of sequence flag This bit is set by hardware at the end of the conversion of a sequence of channels selected by the CHSEL bits. It is cleared by software writing 1 to it.">
        <Enum name="B_0x0" start="0x0" description="Conversion sequence not complete (or the flag event was already acknowledged and cleared by software)" />
        <Enum name="B_0x1" start="0x1" description="Conversion sequence complete" />
      </BitField>
      <BitField start="4" size="1" name="OVR" description="ADC overrun This bit is set by hardware when an overrun occurs, meaning that a new conversion has complete while the EOC flag was already set. It is cleared by software writing 1 to it.">
        <Enum name="B_0x0" start="0x0" description="No overrun occurred (or the flag event was already acknowledged and cleared by software)" />
        <Enum name="B_0x1" start="0x1" description="Overrun has occurred" />
      </BitField>
      <BitField start="7" size="1" name="AWD1" description="Analog watchdog 1 flag This bit is set by hardware when the converted voltage crosses the values programmed in ADC_TR1 and ADC_HR1 registers. It is cleared by software by programming it to 1.">
        <Enum name="B_0x0" start="0x0" description="No analog watchdog event occurred (or the flag event was already acknowledged and cleared by software)" />
        <Enum name="B_0x1" start="0x1" description="Analog watchdog event occurred" />
      </BitField>
      <BitField start="8" size="1" name="AWD2" description="Analog watchdog 2 flag This bit is set by hardware when the converted voltage crosses the values programmed in ADC_AWD2TR and ADC_AWD2TR registers. It is cleared by software programming it it.">
        <Enum name="B_0x0" start="0x0" description="No analog watchdog event occurred (or the flag event was already acknowledged and cleared by software)" />
        <Enum name="B_0x1" start="0x1" description="Analog watchdog event occurred" />
      </BitField>
      <BitField start="9" size="1" name="AWD3" description="Analog watchdog 3 flag This bit is set by hardware when the converted voltage crosses the values programmed in ADC_AWD3TR and ADC_AWD3TR registers. It is cleared by software by programming it to 1.">
        <Enum name="B_0x0" start="0x0" description="No analog watchdog event occurred (or the flag event was already acknowledged and cleared by software)" />
        <Enum name="B_0x1" start="0x1" description="Analog watchdog event occurred" />
      </BitField>
      <BitField start="11" size="1" name="EOCAL" description="End Of Calibration flag This bit is set by hardware when calibration is complete. It is cleared by software writing 1 to it.">
        <Enum name="B_0x0" start="0x0" description="Calibration is not complete" />
        <Enum name="B_0x1" start="0x1" description="Calibration is complete" />
      </BitField>
      <BitField start="13" size="1" name="CCRDY" description="Channel Configuration Ready flag This flag bit is set by hardware when the channel configuration is applied after programming to ADC_CHSELR register or changing CHSELRMOD or SCANDIR. It is cleared by software by programming it to it. Note: When the software configures the channels (by programming ADC_CHSELR or changing CHSELRMOD or SCANDIR), it must wait until the CCRDY flag rises before configuring again or starting conversions, otherwise the new configuration (or the START bit) is ignored. Once the flag is asserted, if the software needs to configure again the channels, it must clear the CCRDY flag before proceeding with a new configuration.">
        <Enum name="B_0x0" start="0x0" description="Channel configuration update not applied." />
        <Enum name="B_0x1" start="0x1" description="Channel configuration update is applied." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="ADC_IER" access="Read/Write" description="ADC interrupt enable register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ADRDYIE" description="ADC ready interrupt enable This bit is set and cleared by software to enable/disable the ADC Ready interrupt. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADRDY interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="ADRDY interrupt enabled. An interrupt is generated when the ADRDY bit is set." />
      </BitField>
      <BitField start="1" size="1" name="EOSMPIE" description="End of sampling flag interrupt enable This bit is set and cleared by software to enable/disable the end of the sampling phase interrupt. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="EOSMP interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="EOSMP interrupt enabled. An interrupt is generated when the EOSMP bit is set." />
      </BitField>
      <BitField start="2" size="1" name="EOCIE" description="End of conversion interrupt enable This bit is set and cleared by software to enable/disable the end of conversion interrupt. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="EOC interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="EOC interrupt enabled. An interrupt is generated when the EOC bit is set." />
      </BitField>
      <BitField start="3" size="1" name="EOSIE" description="End of conversion sequence interrupt enable This bit is set and cleared by software to enable/disable the end of sequence of conversions interrupt. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="EOS interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="EOS interrupt enabled. An interrupt is generated when the EOS bit is set." />
      </BitField>
      <BitField start="4" size="1" name="OVRIE" description="Overrun interrupt enable This bit is set and cleared by software to enable/disable the overrun interrupt. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Overrun interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Overrun interrupt enabled. An interrupt is generated when the OVR bit is set." />
      </BitField>
      <BitField start="7" size="1" name="AWD1IE" description="Analog watchdog 1 interrupt enable This bit is set and cleared by software to enable/disable the analog watchdog interrupt. Note: The Software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Analog watchdog interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Analog watchdog interrupt enabled" />
      </BitField>
      <BitField start="8" size="1" name="AWD2IE" description="Analog watchdog 2 interrupt enable This bit is set and cleared by software to enable/disable the analog watchdog interrupt. Note: The Software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Analog watchdog interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Analog watchdog interrupt enabled" />
      </BitField>
      <BitField start="9" size="1" name="AWD3IE" description="Analog watchdog 3 interrupt enable This bit is set and cleared by software to enable/disable the analog watchdog interrupt. Note: The Software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Analog watchdog interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Analog watchdog interrupt enabled" />
      </BitField>
      <BitField start="11" size="1" name="EOCALIE" description="End of calibration interrupt enable This bit is set and cleared by software to enable/disable the end of calibration interrupt. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="End of calibration interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="End of calibration interrupt enabled" />
      </BitField>
      <BitField start="13" size="1" name="CCRDYIE" description="Channel Configuration Ready Interrupt enable This bit is set and cleared by software to enable/disable the channel configuration ready interrupt. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Channel configuration ready interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Channel configuration ready interrupt enabled" />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="ADC_CR" access="Read/Write" description="ADC control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ADEN" description="ADC enable command This bit is set by software to enable the ADC. The ADC is effectively ready to operate once the ADRDY flag has been set. It is cleared by hardware when the ADC is disabled, after the execution of the ADDIS command. Note: The software is allowed to set ADEN only when all bits of ADC_CR registers are 0 (ADCAL=0, ADSTP=0, ADSTART=0, ADDIS=0 and ADEN=0)">
        <Enum name="B_0x0" start="0x0" description="ADC is disabled (OFF state)" />
        <Enum name="B_0x1" start="0x1" description="Write 1 to enable the ADC." />
      </BitField>
      <BitField start="1" size="1" name="ADDIS" description="ADC disable command This bit is set by software to disable the ADC (ADDIS command) and put it into power-down state (OFF state). It is cleared by hardware once the ADC is effectively disabled (ADEN is also cleared by hardware at this time). Note: Setting ADDIS to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; is only effective when ADEN=1 and ADSTART=0 (which ensures that no conversion is ongoing)">
        <Enum name="B_0x0" start="0x0" description="No ADDIS command ongoing" />
        <Enum name="B_0x1" start="0x1" description="Write 1 to disable the ADC. Read 1 means that an ADDIS command is in progress." />
      </BitField>
      <BitField start="2" size="1" name="ADSTART" description="ADC start conversion command This bit is set by software to start ADC conversion. Depending on the EXTEN [1:0] configuration bits, a conversion either starts immediately (software trigger configuration) or once a hardware trigger event occurs (hardware trigger configuration). It is cleared by hardware: In single conversion mode (CONT=0, DISCEN=0), when software trigger is selected (EXTEN=00): at the assertion of the end of Conversion Sequence (EOS) flag. In discontinuous conversion mode(CONT=0, DISCEN=1), when the software trigger is selected (EXTEN=00): at the assertion of the end of Conversion (EOC) flag. In all other cases: after the execution of the ADSTP command, at the same time as the ADSTP bit is cleared by hardware. Note: The software is allowed to set ADSTART only when ADEN=1 and ADDIS=0 (ADC is enabled and there is no pending request to disable the ADC). After writing to ADC_CHSELR register or changing CHSELRMOD or SCANDIRW, it is mandatory to wait until CCRDY flag is asserted before setting ADSTART, otherwise, the value written to ADSTART is ignored.">
        <Enum name="B_0x0" start="0x0" description="No ADC conversion is ongoing." />
        <Enum name="B_0x1" start="0x1" description="Write 1 to start the ADC. Read 1 means that the ADC is operating and may be converting." />
      </BitField>
      <BitField start="4" size="1" name="ADSTP" description="ADC stop conversion command This bit is set by software to stop and discard an ongoing conversion (ADSTP Command). It is cleared by hardware when the conversion is effectively discarded and the ADC is ready to accept a new start conversion command. Note: Setting ADSTP to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; is only effective when ADSTART=1 and ADDIS=0 (ADC is enabled and may be converting and there is no pending request to disable the ADC)">
        <Enum name="B_0x0" start="0x0" description="No ADC stop conversion command ongoing" />
        <Enum name="B_0x1" start="0x1" description="Write 1 to stop the ADC. Read 1 means that an ADSTP command is in progress." />
      </BitField>
      <BitField start="28" size="1" name="ADVREGEN" description="ADC Voltage Regulator Enable This bit is set by software, to enable the ADC internal voltage regulator. The voltage regulator output is available after tADCVREG_SETUP. It is cleared by software to disable the voltage regulator. It can be cleared only if ADEN is et to 0. Note: The software is allowed to program this bit field only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0).">
        <Enum name="B_0x0" start="0x0" description="ADC voltage regulator disabled" />
        <Enum name="B_0x1" start="0x1" description="ADC voltage regulator enabled" />
      </BitField>
      <BitField start="31" size="1" name="ADCAL" description="ADC calibration This bit is set by software to start the calibration of the ADC. It is cleared by hardware after calibration is complete. Note: The software is allowed to set ADCAL only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0). The software is allowed to update the calibration factor by writing ADC_CALFACT only when ADEN=1 and ADSTART=0 (ADC enabled and no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Calibration complete" />
        <Enum name="B_0x1" start="0x1" description="Write 1 to calibrate the ADC. Read at 1 means that a calibration is in progress." />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="ADC_CFGR1" access="Read/Write" description="ADC configuration register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="DMAEN" description="Direct memory access enable This bit is set and cleared by software to enable the generation of DMA requests. This allows the DMA controller to be used to manage automatically the converted data. For more details, refer to . Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="DMA disabled" />
        <Enum name="B_0x1" start="0x1" description="DMA enabled" />
      </BitField>
      <BitField start="1" size="1" name="DMACFG" description="Direct memory access configuration This bit is set and cleared by software to select between two DMA modes of operation and is effective only when DMAEN=1. For more details, refer to page351 Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="DMA one shot mode selected" />
        <Enum name="B_0x1" start="0x1" description="DMA circular mode selected" />
      </BitField>
      <BitField start="2" size="1" name="SCANDIR" description="Scan sequence direction This bit is set and cleared by software to select the direction in which the channels is scanned in the sequence. It is effective only if CHSELMOD bit is cleared to 0. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Upward scan (from CHSEL0 to CHSEL18)" />
        <Enum name="B_0x1" start="0x1" description="Backward scan (from CHSEL18 to CHSEL0)" />
      </BitField>
      <BitField start="3" size="2" name="RES" description="Data resolution These bits are written by software to select the resolution of the conversion. Note: The software is allowed to write these bits only when ADEN=0.">
        <Enum name="B_0x0" start="0x0" description="12 bits" />
        <Enum name="B_0x1" start="0x1" description="10 bits" />
        <Enum name="B_0x2" start="0x2" description="8 bits" />
        <Enum name="B_0x3" start="0x3" description="6 bits" />
      </BitField>
      <BitField start="5" size="1" name="ALIGN" description="Data alignment This bit is set and cleared by software to select right or left alignment. Refer to Data alignment and resolution (oversampling disabled: OVSE = 0) on page349 Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Right alignment" />
        <Enum name="B_0x1" start="0x1" description="Left alignment" />
      </BitField>
      <BitField start="6" size="3" name="EXTSEL" description="External trigger selection These bits select the external event used to trigger the start of conversion (refer to External triggers for details): Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="TRG0" />
        <Enum name="B_0x1" start="0x1" description="TRG1" />
        <Enum name="B_0x2" start="0x2" description="TRG2" />
        <Enum name="B_0x3" start="0x3" description="TRG3" />
        <Enum name="B_0x4" start="0x4" description="TRG4" />
        <Enum name="B_0x5" start="0x5" description="TRG5" />
        <Enum name="B_0x6" start="0x6" description="TRG6" />
        <Enum name="B_0x7" start="0x7" description="TRG7" />
      </BitField>
      <BitField start="10" size="2" name="EXTEN" description="External trigger enable and polarity selection These bits are set and cleared by software to select the external trigger polarity and enable the trigger. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Hardware trigger detection disabled (conversions can be started by software)" />
        <Enum name="B_0x1" start="0x1" description="Hardware trigger detection on the rising edge" />
        <Enum name="B_0x2" start="0x2" description="Hardware trigger detection on the falling edge" />
        <Enum name="B_0x3" start="0x3" description="Hardware trigger detection on both the rising and falling edges" />
      </BitField>
      <BitField start="12" size="1" name="OVRMOD" description="Overrun management mode This bit is set and cleared by software and configure the way data overruns are managed. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC_DR register is preserved with the old data when an overrun is detected." />
        <Enum name="B_0x1" start="0x1" description="ADC_DR register is overwritten with the last conversion result when an overrun is detected." />
      </BitField>
      <BitField start="13" size="1" name="CONT" description="Single / continuous conversion mode This bit is set and cleared by software. If it is set, conversion takes place continuously until it is cleared. Note: It is not possible to have both discontinuous mode and continuous mode enabled: it is forbidden to set both bits DISCEN=1 and CONT=1. The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Single conversion mode" />
        <Enum name="B_0x1" start="0x1" description="Continuous conversion mode" />
      </BitField>
      <BitField start="14" size="1" name="WAIT" description="Wait conversion mode This bit is set and cleared by software to enable/disable wait conversion mode.. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Wait conversion mode off" />
        <Enum name="B_0x1" start="0x1" description="Wait conversion mode on" />
      </BitField>
      <BitField start="15" size="1" name="AUTOFF" description="Auto-off mode This bit is set and cleared by software to enable/disable auto-off mode.. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Auto-off mode disabled" />
        <Enum name="B_0x1" start="0x1" description="Auto-off mode enabled" />
      </BitField>
      <BitField start="16" size="1" name="DISCEN" description="Discontinuous mode This bit is set and cleared by software to enable/disable discontinuous mode. Note: It is not possible to have both discontinuous mode and continuous mode enabled: it is forbidden to set both bits DISCEN=1 and CONT=1. The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Discontinuous mode disabled" />
        <Enum name="B_0x1" start="0x1" description="Discontinuous mode enabled" />
      </BitField>
      <BitField start="21" size="1" name="CHSELRMOD" description="Mode selection of the ADC_CHSELR register This bit is set and cleared by software to control the ADC_CHSELR feature: Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Each bit of the ADC_CHSELR register enables an input" />
        <Enum name="B_0x1" start="0x1" description="ADC_CHSELR register is able to sequence up to 8 channels" />
      </BitField>
      <BitField start="22" size="1" name="AWD1SGL" description="Enable the watchdog on a single channel or on all channels This bit is set and cleared by software to enable the analog watchdog on the channel identified by the AWDCH[4:0] bits or on all the channels Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Analog watchdog 1 enabled on all channels" />
        <Enum name="B_0x1" start="0x1" description="Analog watchdog 1 enabled on a single channel" />
      </BitField>
      <BitField start="23" size="1" name="AWD1EN" description="Analog watchdog enable This bit is set and cleared by software. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Analog watchdog 1 disabled" />
        <Enum name="B_0x1" start="0x1" description="Analog watchdog 1 enabled" />
      </BitField>
      <BitField start="26" size="5" name="AWD1CH" description="Analog watchdog channel selection These bits are set and cleared by software. They select the input channel to be guarded by the analog watchdog. ..... Others: Reserved Note: The channel selected by the AWDCH[4:0] bits must be also set into the CHSELR register. The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog input Channel 0 monitored by AWD" />
        <Enum name="B_0x1" start="0x1" description="ADC analog input Channel 1 monitored by AWD" />
        <Enum name="B_0x11" start="0x11" description="ADC analog input Channel 17 monitored by AWD" />
        <Enum name="B_0x12" start="0x12" description="ADC analog input Channel 18 monitored by AWD" />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="ADC_CFGR2" access="Read/Write" description="ADC configuration register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OVSE" description="Oversampler Enable This bit is set and cleared by software. Note: Software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Oversampler disabled" />
        <Enum name="B_0x1" start="0x1" description="Oversampler enabled" />
      </BitField>
      <BitField start="2" size="3" name="OVSR" description="Oversampling ratio This bit filed defines the number of oversampling ratio. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="2x" />
        <Enum name="B_0x1" start="0x1" description="4x" />
        <Enum name="B_0x2" start="0x2" description="8x" />
        <Enum name="B_0x3" start="0x3" description="16x" />
        <Enum name="B_0x4" start="0x4" description="32x" />
        <Enum name="B_0x5" start="0x5" description="64x" />
        <Enum name="B_0x6" start="0x6" description="128x" />
        <Enum name="B_0x7" start="0x7" description="256x" />
      </BitField>
      <BitField start="5" size="4" name="OVSS" description="Oversampling shift This bit is set and cleared by software. Others: Reserved Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="No shift" />
        <Enum name="B_0x1" start="0x1" description="Shift 1-bit" />
        <Enum name="B_0x2" start="0x2" description="Shift 2-bits" />
        <Enum name="B_0x3" start="0x3" description="Shift 3-bits" />
        <Enum name="B_0x4" start="0x4" description="Shift 4-bits" />
        <Enum name="B_0x5" start="0x5" description="Shift 5-bits" />
        <Enum name="B_0x6" start="0x6" description="Shift 6-bits" />
        <Enum name="B_0x7" start="0x7" description="Shift 7-bits" />
        <Enum name="B_0x8" start="0x8" description="Shift 8-bits" />
      </BitField>
      <BitField start="9" size="1" name="TOVS" description="Triggered Oversampling This bit is set and cleared by software. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="All oversampled conversions for a channel are done consecutively after a trigger" />
        <Enum name="B_0x1" start="0x1" description="Each oversampled conversion for a channel needs a trigger" />
      </BitField>
      <BitField start="29" size="1" name="LFTRIG" description="Low frequency trigger mode enable This bit is set and cleared by software. Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Low Frequency Trigger Mode disabled" />
        <Enum name="B_0x1" start="0x1" description="Low Frequency Trigger Mode enabled" />
      </BitField>
      <BitField start="30" size="2" name="CKMODE" description="ADC clock mode These bits are set and cleared by software to define how the analog ADC is clocked: In all synchronous clock modes, there is no jitter in the delay from a timer trigger to the start of a conversion. Note: The software is allowed to write these bits only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0).">
        <Enum name="B_0x0" start="0x0" description="ADCCLK (Asynchronous clock mode), generated at product level (refer to RCC section)" />
        <Enum name="B_0x1" start="0x1" description="PCLK/2 (Synchronous clock mode)" />
        <Enum name="B_0x2" start="0x2" description="PCLK/4 (Synchronous clock mode)" />
        <Enum name="B_0x3" start="0x3" description="PCLK (Synchronous clock mode). This configuration must be enabled only if PCLK has a 50% duty clock cycle (APB prescaler configured inside the RCC must be bypassed and the system clock must by 50% duty cycle)" />
      </BitField>
    </Register>
    <Register start="+0x14" size="0" name="ADC_SMPR" access="Read/Write" description="ADC sampling time register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="SMP1" description="Sampling time selection 1 These bits are written by software to select the sampling time that applies to all channels. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="1.5 ADC clock cycles" />
        <Enum name="B_0x1" start="0x1" description="3.5 ADC clock cycles" />
        <Enum name="B_0x2" start="0x2" description="7.5 ADC clock cycles" />
        <Enum name="B_0x3" start="0x3" description="12.5 ADC clock cycles" />
        <Enum name="B_0x4" start="0x4" description="19.5 ADC clock cycles" />
        <Enum name="B_0x5" start="0x5" description="39.5 ADC clock cycles" />
        <Enum name="B_0x6" start="0x6" description="79.5 ADC clock cycles" />
        <Enum name="B_0x7" start="0x7" description="160.5 ADC clock cycles" />
      </BitField>
      <BitField start="4" size="3" name="SMP2" description="Sampling time selection 2 These bits are written by software to select the sampling time that applies to all channels. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="1.5 ADC clock cycles" />
        <Enum name="B_0x1" start="0x1" description="3.5 ADC clock cycles" />
        <Enum name="B_0x2" start="0x2" description="7.5 ADC clock cycles" />
        <Enum name="B_0x3" start="0x3" description="12.5 ADC clock cycles" />
        <Enum name="B_0x4" start="0x4" description="19.5 ADC clock cycles" />
        <Enum name="B_0x5" start="0x5" description="39.5 ADC clock cycles" />
        <Enum name="B_0x6" start="0x6" description="79.5 ADC clock cycles" />
        <Enum name="B_0x7" start="0x7" description="160.5 ADC clock cycles" />
      </BitField>
      <BitField start="8" size="1" name="SMPSEL0" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="9" size="1" name="SMPSEL1" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="10" size="1" name="SMPSEL2" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="11" size="1" name="SMPSEL3" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="12" size="1" name="SMPSEL4" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="13" size="1" name="SMPSEL5" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="14" size="1" name="SMPSEL6" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="15" size="1" name="SMPSEL7" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="16" size="1" name="SMPSEL8" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="17" size="1" name="SMPSEL9" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="18" size="1" name="SMPSEL10" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="19" size="1" name="SMPSEL11" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="20" size="1" name="SMPSEL12" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="21" size="1" name="SMPSEL13" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="22" size="1" name="SMPSEL14" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="23" size="1" name="SMPSEL15" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="24" size="1" name="SMPSEL16" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="25" size="1" name="SMPSEL17" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
      <BitField start="26" size="1" name="SMPSEL18" description="Channel-x sampling time selection These bits are written by software to define which sampling time is used. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Sampling time of CHANNELx use the setting of SMP1[2:0] register." />
        <Enum name="B_0x1" start="0x1" description="Sampling time of CHANNELx use the setting of SMP2[2:0] register." />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="ADC_AWD1TR" access="Read/Write" description="ADC watchdog threshold register" reset_value="0x0FFF0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="12" name="LT1" description="Analog watchdog 1 lower threshold These bits are written by software to define the lower threshold for the analog watchdog. Refer to ADC_AWDxTR) on page355." />
      <BitField start="16" size="12" name="HT1" description="Analog watchdog 1 higher threshold These bits are written by software to define the higher threshold for the analog watchdog. Refer to ADC_AWDxTR) on page355." />
    </Register>
    <Register start="+0x24" size="0" name="ADC_AWD2TR" access="Read/Write" description="ADC watchdog threshold register" reset_value="0x0FFF0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="12" name="LT2" description="Analog watchdog 2 lower threshold These bits are written by software to define the lower threshold for the analog watchdog. Refer to ADC_AWDxTR) on page355." />
      <BitField start="16" size="12" name="HT2" description="Analog watchdog 2 higher threshold These bits are written by software to define the higher threshold for the analog watchdog. Refer to ADC_AWDxTR) on page355." />
    </Register>
    <Register start="+0x28" size="0" name="ADC_CHSELR_0" access="Read/Write" description="ADC channel selection register [alternate]" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CHSEL0" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="1" size="1" name="CHSEL1" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="2" size="1" name="CHSEL2" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="3" size="1" name="CHSEL3" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="4" size="1" name="CHSEL4" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="5" size="1" name="CHSEL5" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="6" size="1" name="CHSEL6" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="7" size="1" name="CHSEL7" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="8" size="1" name="CHSEL8" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="9" size="1" name="CHSEL9" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="10" size="1" name="CHSEL10" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="11" size="1" name="CHSEL11" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="12" size="1" name="CHSEL12" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="13" size="1" name="CHSEL13" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="14" size="1" name="CHSEL14" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="15" size="1" name="CHSEL15" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="16" size="1" name="CHSEL16" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="17" size="1" name="CHSEL17" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
      <BitField start="18" size="1" name="CHSEL18" description="Channel-x selection These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to for ADC inputs connected to external channels and internal sources. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing). If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored.">
        <Enum name="B_0x0" start="0x0" description="Input Channel-x is not selected for conversion" />
        <Enum name="B_0x1" start="0x1" description="Input Channel-x is selected for conversion" />
      </BitField>
    </Register>
    <Register start="+0x28" size="0" name="ADC_CHSELR_1" access="Read/Write" description="channel selection register CHSELRMOD = 1 in ADC_CFGR1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="SQ1" description="1st conversion of the sequence These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence. When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored. Refer to SQ8[3:0] for a definition of channel selection. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)." />
      <BitField start="4" size="4" name="SQ2" description="2nd conversion of the sequence These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence. When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored. Refer to SQ8[3:0] for a definition of channel selection. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)." />
      <BitField start="8" size="4" name="SQ3" description="3rd conversion of the sequence These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence. When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored. Refer to SQ8[3:0] for a definition of channel selection. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)." />
      <BitField start="12" size="4" name="SQ4" description="4th conversion of the sequence These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence. When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored. Refer to SQ8[3:0] for a definition of channel selection. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)." />
      <BitField start="16" size="4" name="SQ5" description="5th conversion of the sequence These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence. When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored. Refer to SQ8[3:0] for a definition of channel selection. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)." />
      <BitField start="20" size="4" name="SQ6" description="6th conversion of the sequence These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence. When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored. Refer to SQ8[3:0] for a definition of channel selection. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)." />
      <BitField start="24" size="4" name="SQ7" description="7th conversion of the sequence These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence. When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored. Refer to SQ8[3:0] for a definition of channel selection. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)." />
      <BitField start="28" size="4" name="SQ8" description="8th conversion of the sequence These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates the end of the sequence. When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored. ... Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="CH0" />
        <Enum name="B_0x1" start="0x1" description="CH1" />
        <Enum name="B_0xC" start="0xC" description="CH12" />
        <Enum name="B_0xD" start="0xD" description="CH13" />
        <Enum name="B_0xE" start="0xE" description="CH14" />
        <Enum name="B_0xF" start="0xF" description="No channel selected (End of sequence)" />
      </BitField>
    </Register>
    <Register start="+0x2C" size="0" name="ADC_AWD3TR" access="Read/Write" description="ADC watchdog threshold register" reset_value="0x0FFF0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="12" name="LT3" description="Analog watchdog 3lower threshold These bits are written by software to define the lower threshold for the analog watchdog. Refer to ADC_AWDxTR) on page355." />
      <BitField start="16" size="12" name="HT3" description="Analog watchdog 3 higher threshold These bits are written by software to define the higher threshold for the analog watchdog. Refer to ADC_AWDxTR) on page355." />
    </Register>
    <Register start="+0x40" size="0" name="ADC_DR" access="Read/Write" description="ADC data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="DATA" description="Converted data These bits are read-only. They contain the conversion result from the last converted channel. The data are left- or right-aligned as shown in OVSE = 0) on page349. Just after a calibration is complete, DATA[6:0] contains the calibration factor." />
    </Register>
    <Register start="+0xA0" size="0" name="ADC_AWD2CR" access="Read/Write" description="ADC Analog Watchdog 2 Configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="AWD2CH0" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="1" size="1" name="AWD2CH1" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="2" size="1" name="AWD2CH2" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="3" size="1" name="AWD2CH3" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="4" size="1" name="AWD2CH4" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="5" size="1" name="AWD2CH5" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="6" size="1" name="AWD2CH6" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="7" size="1" name="AWD2CH7" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="8" size="1" name="AWD2CH8" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="9" size="1" name="AWD2CH9" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="10" size="1" name="AWD2CH10" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="11" size="1" name="AWD2CH11" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="12" size="1" name="AWD2CH12" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="13" size="1" name="AWD2CH13" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="14" size="1" name="AWD2CH14" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="15" size="1" name="AWD2CH15" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="16" size="1" name="AWD2CH16" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="17" size="1" name="AWD2CH17" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
      <BitField start="18" size="1" name="AWD2CH18" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2). Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD2" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD2" />
      </BitField>
    </Register>
    <Register start="+0xA4" size="0" name="ADC_AWD3CR" access="Read/Write" description="ADC Analog Watchdog 3 Configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="AWD3CH0" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="1" size="1" name="AWD3CH1" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="2" size="1" name="AWD3CH2" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="3" size="1" name="AWD3CH3" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="4" size="1" name="AWD3CH4" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="5" size="1" name="AWD3CH5" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="6" size="1" name="AWD3CH6" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="7" size="1" name="AWD3CH7" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="8" size="1" name="AWD3CH8" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="9" size="1" name="AWD3CH9" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="10" size="1" name="AWD3CH10" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="11" size="1" name="AWD3CH11" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="12" size="1" name="AWD3CH12" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="13" size="1" name="AWD3CH13" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="14" size="1" name="AWD3CH14" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="15" size="1" name="AWD3CH15" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="16" size="1" name="AWD3CH16" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="17" size="1" name="AWD3CH17" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
      <BitField start="18" size="1" name="AWD3CH18" description="Analog watchdog channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3). Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="ADC analog channel-x is not monitored by AWD3" />
        <Enum name="B_0x1" start="0x1" description="ADC analog channel-x is monitored by AWD3" />
      </BitField>
    </Register>
    <Register start="+0xB4" size="0" name="ADC_CALFACT" access="Read/Write" description="ADC Calibration factor" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="7" name="CALFACT" description="Calibration factor These bits are written by hardware or by software. Once a calibration is complete,they are updated by hardware with the calibration factors. Software can write these bits with a new calibration factor. If the new calibration factor is different from the current one stored into the analog ADC, it is then applied once a new calibration is launched. Just after a calibration is complete, DATA[6:0] contains the calibration factor. Note: Software can write these bits only when ADEN=1 (ADC is enabled and no calibration is ongoing and no conversion is ongoing). Refer to SQ8[3:0] for a definition of channel selection." />
    </Register>
    <Register start="+0x308" size="0" name="ADC_CCR" access="Read/Write" description="ADC common configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="18" size="4" name="PRESC" description="ADC prescaler Set and cleared by software to select the frequency of the clock to the ADC. Other: Reserved Note: Software is allowed to write these bits only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0).">
        <Enum name="B_0x0" start="0x0" description="input ADC clock not divided" />
        <Enum name="B_0x1" start="0x1" description="input ADC clock divided by 2" />
        <Enum name="B_0x2" start="0x2" description="input ADC clock divided by 4" />
        <Enum name="B_0x3" start="0x3" description="input ADC clock divided by 6" />
        <Enum name="B_0x4" start="0x4" description="input ADC clock divided by 8" />
        <Enum name="B_0x5" start="0x5" description="input ADC clock divided by 10" />
        <Enum name="B_0x6" start="0x6" description="input ADC clock divided by 12" />
        <Enum name="B_0x7" start="0x7" description="input ADC clock divided by 16" />
        <Enum name="B_0x8" start="0x8" description="input ADC clock divided by 32" />
        <Enum name="B_0x9" start="0x9" description="input ADC clock divided by 64" />
        <Enum name="B_0xA" start="0xA" description="input ADC clock divided by 128" />
        <Enum name="B_0xB" start="0xB" description="input ADC clock divided by 256" />
      </BitField>
      <BitField start="22" size="1" name="VREFEN" description="VREFINT enable This bit is set and cleared by software to enable/disable the VREFINT. Note: Software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="VREFINT disabled" />
        <Enum name="B_0x1" start="0x1" description="VREFINT enabled" />
      </BitField>
      <BitField start="23" size="1" name="TSEN" description="Temperature sensor enable This bit is set and cleared by software to enable/disable the temperature sensor. Note: Software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).">
        <Enum name="B_0x0" start="0x0" description="Temperature sensor disabled" />
        <Enum name="B_0x1" start="0x1" description="Temperature sensor enabled" />
      </BitField>
      <BitField start="24" size="1" name="VBATEN" description="VBAT enable This bit is set and cleared by software to enable/disable the VBAT channel. Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)">
        <Enum name="B_0x0" start="0x0" description="VBAT channel disabled" />
        <Enum name="B_0x1" start="0x1" description="VBAT channel enabled" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="CRC" start="0x40023000" description="Cyclic redundancy check calculation unit">
    <Register start="+0x0" size="0" name="CRC_DR" access="Read/Write" description="Data register" reset_value="0xFFFFFFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="DR" description="Data register bits" />
    </Register>
    <Register start="+0x4" size="0" name="CRC_IDR" access="Read/Write" description="Independent data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="IDR" description="General-purpose 32-bit data register bits" />
    </Register>
    <Register start="+0x8" size="0" name="CRC_CR" access="Read/Write" description="Control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="RESET" description="RESET bit" />
      <BitField start="3" size="2" name="POLYSIZE" description="Polynomial size These bits control the size of the polynomial.">
        <Enum name="B_0x0" start="0x0" description="32 bit polynomial" />
        <Enum name="B_0x1" start="0x1" description="16 bit polynomial" />
        <Enum name="B_0x2" start="0x2" description="8 bit polynomial" />
        <Enum name="B_0x3" start="0x3" description="7 bit polynomial" />
      </BitField>
      <BitField start="5" size="2" name="REV_IN" description="Reverse input data These bits control the reversal of the bit order of the input data">
        <Enum name="B_0x0" start="0x0" description="Bit order not affected" />
        <Enum name="B_0x1" start="0x1" description="Bit reversal done by byte" />
        <Enum name="B_0x2" start="0x2" description="Bit reversal done by half-word" />
        <Enum name="B_0x3" start="0x3" description="Bit reversal done by word" />
      </BitField>
      <BitField start="7" size="1" name="REV_OUT" description="Reverse output data This bit controls the reversal of the bit order of the output data.">
        <Enum name="B_0x0" start="0x0" description="Bit order not affected" />
        <Enum name="B_0x1" start="0x1" description="Bit-reversed output format" />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="CRC_INIT" access="Read/Write" description="Initial CRC value" reset_value="0xFFFFFFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="CRC_INIT" description="Programmable initial CRC value" />
    </Register>
    <Register start="+0x14" size="0" name="CRC_POL" access="Read/Write" description="polynomial" reset_value="0x04C11DB7" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="POL" description="Programmable polynomial" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="DBG" start="0x40015800" description="Debug support">
    <Register start="+0x0" size="0" name="IDCODE" access="ReadOnly" description="MCU Device ID Code Register" reset_value="0x0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="12" name="DEV_ID" description="Device Identifier" />
      <BitField start="16" size="16" name="REV_ID" description="Revision Identifier" />
    </Register>
    <Register start="+0x4" size="0" name="DBG_CR" access="Read/Write" description="DBG configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="1" size="1" name="DBG_STOP" description="Debug Stop mode Debug options in Stop mode. Upon Stop mode exit, the software must re-establish the desired clock configuration.">
        <Enum name="B_0x0" start="0x0" description="All clocks disabled, including FCLK and HCLK. Upon Stop mode exit, the CPU is clocked by the HSI internal RC oscillator." />
        <Enum name="B_0x1" start="0x1" description="FCLK and HCLK running, derived from the internal RC oscillator remaining active. If Systick is enabled, it may generate periodic interrupt and wake up events." />
      </BitField>
      <BitField start="2" size="1" name="DBG_STANDBY" description="Debug Standby and Shutdown modes Debug options in Standby or Shutdown mode.">
        <Enum name="B_0x0" start="0x0" description="Digital part powered. From software point of view, exiting Standby and Shutdown modes is identical as fetching reset vector (except for status bits indicating that the MCU exits Standby)" />
        <Enum name="B_0x1" start="0x1" description="Digital part powered and FCLK and HCLK running, derived from the internal RC oscillator remaining active. The MCU generates a system reset so that exiting Standby and Shutdown has the same effect as starting from reset." />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="DBG_APB_FZ1" access="Read/Write" description="DBG APB freeze register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="DBG_TIM2_STOP" description="Clocking of TIM2 counter when the core is halted This bit enables/disables the clock to the counter of TIM2 when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="1" size="1" name="DBG_TIM3_STOP" description="Clocking of TIM3 counter when the core is halted This bit enables/disables the clock to the counter of TIM3 when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="4" size="1" name="DBG_TIM6_STOP" description="Clocking of TIM6 counter when the core is halted This bit enables/disables the clock to the counter of TIM6 when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="5" size="1" name="DBG_TIM7_STOP" description="Clocking of TIM7 counter when the core is halted. This bit enables/disables the clock to the counter of ITIM7 when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="10" size="1" name="DBG_RTC_STOP" description="Clocking of RTC counter when the core is halted This bit enables/disables the clock to the counter of RTC when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="11" size="1" name="DBG_WWDG_STOP" description="Clocking of WWDG counter when the core is halted This bit enables/disables the clock to the counter of WWDG when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="12" size="1" name="DBG_IWDG_STOP" description="Clocking of IWDG counter when the core is halted This bit enables/disables the clock to the counter of IWDG when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="21" size="1" name="DBG_I2C1_SMBUS_TIMEOUT" description="SMBUS timeout when core is halted">
        <Enum name="B_0x0" start="0x0" description="Same behavior as in normal mode" />
        <Enum name="B_0x1" start="0x1" description="The SMBUS timeout is frozen" />
      </BitField>
      <BitField start="30" size="1" name="DBG_LPTIM2_STOP" description="Clocking of LPTIMER2 counter when the core is halted This bit enables/disables the clock to the counter of LPTIMER2 when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="31" size="1" name="DBG_LPTIM1_STOP" description="Clocking of LPTIMER1 counter when the core is halted This bit enables/disables the clock to the counter of LPTIMER1 when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DBG_APB_FZ2" access="Read/Write" description="DBG APB freeze register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="11" size="1" name="DBG_TIM1_STOP" description="Clocking of TIM1 counter when the core is halted This bit enables/disables the clock to the counter of TIM1 when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="15" size="1" name="DBG_TIM14_STOP" description="Clocking of TIM14 counter when the core is halted This bit enables/disables the clock to the counter of TIM14 when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="16" size="1" name="DBG_TIM15_STOP" description="Clocking of TIM15 counter when the core is halted This bit enables/disables the clock to the counter of TIM15 when the core is halted: Only available on STM32G071xx and STM32G081xx, reserved on STM32G031xx and STM32G041xx.">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="17" size="1" name="DBG_TIM16_STOP" description="Clocking of TIM16 counter when the core is halted This bit enables/disables the clock to the counter of TIM16 when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
      <BitField start="18" size="1" name="DBG_TIM17_STOP" description="Clocking of TIM17 counter when the core is halted This bit enables/disables the clock to the counter of TIM17 when the core is halted:">
        <Enum name="B_0x0" start="0x0" description="Enable" />
        <Enum name="B_0x1" start="0x1" description="Disable" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="DMA1" start="0x40020000" description="DMA controller">
    <Register start="+0x0" size="0" name="DMA_ISR" access="Read/Write" description="DMA interrupt status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="GIF1" description="global interrupt flag for channel 1">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="1" size="1" name="TCIF1" description="transfer complete (TC) flag for channel 1">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="2" size="1" name="HTIF1" description="half transfer (HT) flag for channel 1">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="3" size="1" name="TEIF1" description="transfer error (TE) flag for channel 1">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="4" size="1" name="GIF2" description="global interrupt flag for channel 2">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="5" size="1" name="TCIF2" description="transfer complete (TC) flag for channel 2">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="6" size="1" name="HTIF2" description="half transfer (HT) flag for channel 2">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="7" size="1" name="TEIF2" description="transfer error (TE) flag for channel 2">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="8" size="1" name="GIF3" description="global interrupt flag for channel 3">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="9" size="1" name="TCIF3" description="transfer complete (TC) flag for channel 3">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="10" size="1" name="HTIF3" description="half transfer (HT) flag for channel 3">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="11" size="1" name="TEIF3" description="transfer error (TE) flag for channel 3">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="12" size="1" name="GIF4" description="global interrupt flag for channel 4">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="13" size="1" name="TCIF4" description="transfer complete (TC) flag for channel 4">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="14" size="1" name="HTIF4" description="half transfer (HT) flag for channel 4">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="15" size="1" name="TEIF4" description="transfer error (TE) flag for channel 4">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="16" size="1" name="GIF5" description="global interrupt flag for channel 5">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="17" size="1" name="TCIF5" description="transfer complete (TC) flag for channel 5">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="18" size="1" name="HTIF5" description="half transfer (HT) flag for channel 5">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="19" size="1" name="TEIF5" description="transfer error (TE) flag for channel 5">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="20" size="1" name="GIF6" description="global interrupt flag for channel 6">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="21" size="1" name="TCIF6" description="transfer complete (TC) flag for channel 6">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="22" size="1" name="HTIF6" description="half transfer (HT) flag for channel 6">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="23" size="1" name="TEIF6" description="transfer error (TE) flag for channel 6">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="24" size="1" name="GIF7" description="global interrupt flag for channel 7">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="25" size="1" name="TCIF7" description="transfer complete (TC) flag for channel 7">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="26" size="1" name="HTIF7" description="half transfer (HT) flag for channel 7">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="27" size="1" name="TEIF7" description="transfer error (TE) flag for channel 7">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="DMA_IFCR" access="Read/Write" description="DMA interrupt flag clear register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CGIF1" description="global interrupt flag clear for channel 1" />
      <BitField start="1" size="1" name="CTCIF1" description="transfer complete flag clear for channel 1" />
      <BitField start="2" size="1" name="CHTIF1" description="half transfer flag clear for channel 1" />
      <BitField start="3" size="1" name="CTEIF1" description="transfer error flag clear for channel 1" />
      <BitField start="4" size="1" name="CGIF2" description="global interrupt flag clear for channel 2" />
      <BitField start="5" size="1" name="CTCIF2" description="transfer complete flag clear for channel 2" />
      <BitField start="6" size="1" name="CHTIF2" description="half transfer flag clear for channel 2" />
      <BitField start="7" size="1" name="CTEIF2" description="transfer error flag clear for channel 2" />
      <BitField start="8" size="1" name="CGIF3" description="global interrupt flag clear for channel 3" />
      <BitField start="9" size="1" name="CTCIF3" description="transfer complete flag clear for channel 3" />
      <BitField start="10" size="1" name="CHTIF3" description="half transfer flag clear for channel 3" />
      <BitField start="11" size="1" name="CTEIF3" description="transfer error flag clear for channel 3" />
      <BitField start="12" size="1" name="CGIF4" description="global interrupt flag clear for channel 4" />
      <BitField start="13" size="1" name="CTCIF4" description="transfer complete flag clear for channel 4" />
      <BitField start="14" size="1" name="CHTIF4" description="half transfer flag clear for channel 4" />
      <BitField start="15" size="1" name="CTEIF4" description="transfer error flag clear for channel 4" />
      <BitField start="16" size="1" name="CGIF5" description="global interrupt flag clear for channel 5" />
      <BitField start="17" size="1" name="CTCIF5" description="transfer complete flag clear for channel 5" />
      <BitField start="18" size="1" name="CHTIF5" description="half transfer flag clear for channel 5" />
      <BitField start="19" size="1" name="CTEIF5" description="transfer error flag clear for channel 5" />
      <BitField start="20" size="1" name="CGIF6" description="global interrupt flag clear for channel 6" />
      <BitField start="21" size="1" name="CTCIF6" description="transfer complete flag clear for channel 6" />
      <BitField start="22" size="1" name="CHTIF6" description="half transfer flag clear for channel 6" />
      <BitField start="23" size="1" name="CTEIF6" description="transfer error flag clear for channel 6" />
      <BitField start="24" size="1" name="CGIF7" description="global interrupt flag clear for channel 7" />
      <BitField start="25" size="1" name="CTCIF7" description="transfer complete flag clear for channel 7" />
      <BitField start="26" size="1" name="CHTIF7" description="half transfer flag clear for channel 7" />
      <BitField start="27" size="1" name="CTEIF7" description="transfer error flag clear for channel 7" />
    </Register>
    <Register start="+0x8" size="0" name="DMA_CCR1" access="Read/Write" description="DMA channel 1 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DMA_CNDTR1" access="Read/Write" description="DMA channel x number of data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x10" size="0" name="DMA_CPAR1" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x14" size="0" name="DMA_CMAR1" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x1C" size="0" name="DMA_CCR2" access="Read/Write" description="DMA channel 2 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="DMA_CNDTR2" access="Read/Write" description="DMA channel x number of data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x24" size="0" name="DMA_CPAR2" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x28" size="0" name="DMA_CMAR2" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x30" size="0" name="DMA_CCR3" access="Read/Write" description="DMA channel 3 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x34" size="0" name="DMA_CNDTR3" access="Read/Write" description="DMA channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x38" size="0" name="DMA_CPAR3" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x3C" size="0" name="DMA_CMAR3" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x44" size="0" name="DMA_CCR4" access="Read/Write" description="DMA channel 4 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x48" size="0" name="DMA_CNDTR4" access="Read/Write" description="DMA channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x4C" size="0" name="DMA_CPAR4" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x50" size="0" name="DMA_CMAR4" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x58" size="0" name="DMA_CCR5" access="Read/Write" description="DMA channel 5 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x5C" size="0" name="DMA_CNDTR5" access="Read/Write" description="DMA channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x60" size="0" name="DMA_CPAR5" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x64" size="0" name="DMA_CMAR5" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x6C" size="0" name="DMA_CCR6" access="Read/Write" description="DMA channel 6 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x70" size="0" name="DMA_CNDTR6" access="Read/Write" description="DMA channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x74" size="0" name="DMA_CPAR6" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x78" size="0" name="DMA_CMAR6" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x80" size="0" name="DMA_CCR7" access="Read/Write" description="DMA channel 7 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x84" size="0" name="DMA_CNDTR7" access="Read/Write" description="DMA channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x88" size="0" name="DMA_CPAR7" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x8C" size="0" name="DMA_CMAR7" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="DMA2" start="0x40020400" description="DMA controller">
    <Register start="+0x0" size="0" name="DMA_ISR" access="Read/Write" description="DMA interrupt status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="GIF1" description="global interrupt flag for channel 1">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="1" size="1" name="TCIF1" description="transfer complete (TC) flag for channel 1">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="2" size="1" name="HTIF1" description="half transfer (HT) flag for channel 1">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="3" size="1" name="TEIF1" description="transfer error (TE) flag for channel 1">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="4" size="1" name="GIF2" description="global interrupt flag for channel 2">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="5" size="1" name="TCIF2" description="transfer complete (TC) flag for channel 2">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="6" size="1" name="HTIF2" description="half transfer (HT) flag for channel 2">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="7" size="1" name="TEIF2" description="transfer error (TE) flag for channel 2">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="8" size="1" name="GIF3" description="global interrupt flag for channel 3">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="9" size="1" name="TCIF3" description="transfer complete (TC) flag for channel 3">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="10" size="1" name="HTIF3" description="half transfer (HT) flag for channel 3">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="11" size="1" name="TEIF3" description="transfer error (TE) flag for channel 3">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="12" size="1" name="GIF4" description="global interrupt flag for channel 4">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="13" size="1" name="TCIF4" description="transfer complete (TC) flag for channel 4">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="14" size="1" name="HTIF4" description="half transfer (HT) flag for channel 4">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="15" size="1" name="TEIF4" description="transfer error (TE) flag for channel 4">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="16" size="1" name="GIF5" description="global interrupt flag for channel 5">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="17" size="1" name="TCIF5" description="transfer complete (TC) flag for channel 5">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="18" size="1" name="HTIF5" description="half transfer (HT) flag for channel 5">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="19" size="1" name="TEIF5" description="transfer error (TE) flag for channel 5">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="20" size="1" name="GIF6" description="global interrupt flag for channel 6">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="21" size="1" name="TCIF6" description="transfer complete (TC) flag for channel 6">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="22" size="1" name="HTIF6" description="half transfer (HT) flag for channel 6">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="23" size="1" name="TEIF6" description="transfer error (TE) flag for channel 6">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
      <BitField start="24" size="1" name="GIF7" description="global interrupt flag for channel 7">
        <Enum name="B_0x0" start="0x0" description="no TE, HT or TC event" />
        <Enum name="B_0x1" start="0x1" description="a TE, HT or TC event occurred" />
      </BitField>
      <BitField start="25" size="1" name="TCIF7" description="transfer complete (TC) flag for channel 7">
        <Enum name="B_0x0" start="0x0" description="no TC event" />
        <Enum name="B_0x1" start="0x1" description="a TC event occurred" />
      </BitField>
      <BitField start="26" size="1" name="HTIF7" description="half transfer (HT) flag for channel 7">
        <Enum name="B_0x0" start="0x0" description="no HT event" />
        <Enum name="B_0x1" start="0x1" description="a HT event occurred" />
      </BitField>
      <BitField start="27" size="1" name="TEIF7" description="transfer error (TE) flag for channel 7">
        <Enum name="B_0x0" start="0x0" description="no TE event" />
        <Enum name="B_0x1" start="0x1" description="a TE event occurred" />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="DMA_IFCR" access="Read/Write" description="DMA interrupt flag clear register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CGIF1" description="global interrupt flag clear for channel 1" />
      <BitField start="1" size="1" name="CTCIF1" description="transfer complete flag clear for channel 1" />
      <BitField start="2" size="1" name="CHTIF1" description="half transfer flag clear for channel 1" />
      <BitField start="3" size="1" name="CTEIF1" description="transfer error flag clear for channel 1" />
      <BitField start="4" size="1" name="CGIF2" description="global interrupt flag clear for channel 2" />
      <BitField start="5" size="1" name="CTCIF2" description="transfer complete flag clear for channel 2" />
      <BitField start="6" size="1" name="CHTIF2" description="half transfer flag clear for channel 2" />
      <BitField start="7" size="1" name="CTEIF2" description="transfer error flag clear for channel 2" />
      <BitField start="8" size="1" name="CGIF3" description="global interrupt flag clear for channel 3" />
      <BitField start="9" size="1" name="CTCIF3" description="transfer complete flag clear for channel 3" />
      <BitField start="10" size="1" name="CHTIF3" description="half transfer flag clear for channel 3" />
      <BitField start="11" size="1" name="CTEIF3" description="transfer error flag clear for channel 3" />
      <BitField start="12" size="1" name="CGIF4" description="global interrupt flag clear for channel 4" />
      <BitField start="13" size="1" name="CTCIF4" description="transfer complete flag clear for channel 4" />
      <BitField start="14" size="1" name="CHTIF4" description="half transfer flag clear for channel 4" />
      <BitField start="15" size="1" name="CTEIF4" description="transfer error flag clear for channel 4" />
      <BitField start="16" size="1" name="CGIF5" description="global interrupt flag clear for channel 5" />
      <BitField start="17" size="1" name="CTCIF5" description="transfer complete flag clear for channel 5" />
      <BitField start="18" size="1" name="CHTIF5" description="half transfer flag clear for channel 5" />
      <BitField start="19" size="1" name="CTEIF5" description="transfer error flag clear for channel 5" />
      <BitField start="20" size="1" name="CGIF6" description="global interrupt flag clear for channel 6" />
      <BitField start="21" size="1" name="CTCIF6" description="transfer complete flag clear for channel 6" />
      <BitField start="22" size="1" name="CHTIF6" description="half transfer flag clear for channel 6" />
      <BitField start="23" size="1" name="CTEIF6" description="transfer error flag clear for channel 6" />
      <BitField start="24" size="1" name="CGIF7" description="global interrupt flag clear for channel 7" />
      <BitField start="25" size="1" name="CTCIF7" description="transfer complete flag clear for channel 7" />
      <BitField start="26" size="1" name="CHTIF7" description="half transfer flag clear for channel 7" />
      <BitField start="27" size="1" name="CTEIF7" description="transfer error flag clear for channel 7" />
    </Register>
    <Register start="+0x8" size="0" name="DMA_CCR1" access="Read/Write" description="DMA channel 1 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DMA_CNDTR1" access="Read/Write" description="DMA channel x number of data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x10" size="0" name="DMA_CPAR1" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x14" size="0" name="DMA_CMAR1" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x1C" size="0" name="DMA_CCR2" access="Read/Write" description="DMA channel 2 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="DMA_CNDTR2" access="Read/Write" description="DMA channel x number of data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x24" size="0" name="DMA_CPAR2" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x28" size="0" name="DMA_CMAR2" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x30" size="0" name="DMA_CCR3" access="Read/Write" description="DMA channel 3 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x34" size="0" name="DMA_CNDTR3" access="Read/Write" description="DMA channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x38" size="0" name="DMA_CPAR3" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x3C" size="0" name="DMA_CMAR3" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x44" size="0" name="DMA_CCR4" access="Read/Write" description="DMA channel 4 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x48" size="0" name="DMA_CNDTR4" access="Read/Write" description="DMA channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x4C" size="0" name="DMA_CPAR4" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x50" size="0" name="DMA_CMAR4" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x58" size="0" name="DMA_CCR5" access="Read/Write" description="DMA channel 5 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x5C" size="0" name="DMA_CNDTR5" access="Read/Write" description="DMA channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x60" size="0" name="DMA_CPAR5" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x64" size="0" name="DMA_CMAR5" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x6C" size="0" name="DMA_CCR6" access="Read/Write" description="DMA channel 6 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x70" size="0" name="DMA_CNDTR6" access="Read/Write" description="DMA channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x74" size="0" name="DMA_CPAR6" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x78" size="0" name="DMA_CMAR6" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x80" size="0" name="DMA_CCR7" access="Read/Write" description="DMA channel 7 configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EN" description="channel enable When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register). Note: this bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="1" size="1" name="TCIE" description="transfer complete interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="2" size="1" name="HTIE" description="half transfer interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="3" size="1" name="TEIE" description="transfer error interrupt enable Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="data transfer direction This bit must be set only in memory-to-peripheral and peripheral-to-memory modes. Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode. Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="read from peripheral" />
        <Enum name="B_0x1" start="0x1" description="read from memory" />
      </BitField>
      <BitField start="5" size="1" name="CIRC" description="circular mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="6" size="1" name="PINC" description="peripheral increment mode Defines the increment mode for each DMA transfer to the identified peripheral. n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="7" size="1" name="MINC" description="memory increment mode Defines the increment mode for each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
      <BitField start="8" size="2" name="PSIZE" description="peripheral size Defines the data size of each DMA transfer to the identified peripheral. In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="10" size="2" name="MSIZE" description="memory size Defines the data size of each DMA transfer to the identified memory. In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0. In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0. Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="8 bits" />
        <Enum name="B_0x1" start="0x1" description="16 bits" />
        <Enum name="B_0x2" start="0x2" description="32 bits" />
      </BitField>
      <BitField start="12" size="2" name="PL" description="priority level Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="low" />
        <Enum name="B_0x1" start="0x1" description="medium" />
        <Enum name="B_0x2" start="0x2" description="high" />
        <Enum name="B_0x3" start="0x3" description="very high" />
      </BitField>
      <BitField start="14" size="1" name="MEM2MEM" description="memory-to-memory mode Note: this bit is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1).">
        <Enum name="B_0x0" start="0x0" description="disabled" />
        <Enum name="B_0x1" start="0x1" description="enabled" />
      </BitField>
    </Register>
    <Register start="+0x84" size="0" name="DMA_CNDTR7" access="Read/Write" description="DMA channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="NDT" description="number of data to transfer (0 to 216-1) This field is updated by hardware when the channel is enabled: It is decremented after each single DMA 'read followed by write&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; transfer, indicating the remaining amount of data items to transfer. It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register). It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1). If this field is zero, no transfer can be served whatever the channel status (enabled or not). Note: this field is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x88" size="0" name="DMA_CPAR7" access="Read/Write" description="DMA channel x peripheral address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="PA" description="peripheral address It contains the base address of the peripheral data register from/to which the data will be read/written. When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address. When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
    <Register start="+0x8C" size="0" name="DMA_CMAR7" access="Read/Write" description="DMA channel x memory address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="MA" description="peripheral address It contains the base address of the memory from/to which the data will be read/written. When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address. When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address. In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0. In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0. Note: this register is set and cleared by software. It must not be written when the channel is enabled (EN = 1). It is not read-only when the channel is enabled (EN=1)." />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="DMAMUX" start="0x40020800" description="DMAMUX">
    <Register start="+0x0" size="0" name="DMAMUX_C0CR" access="Read/Write" description="DMAMUX request line multiplexer channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="6" name="DMAREQ_ID" description="DMA request identification Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources." />
      <BitField start="8" size="1" name="SOIE" description="Synchronization overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt enabled" />
      </BitField>
      <BitField start="9" size="1" name="EGE" description="Event generation enable">
        <Enum name="B_0x0" start="0x0" description="event generation disabled" />
        <Enum name="B_0x1" start="0x1" description="event generation enabled" />
      </BitField>
      <BitField start="16" size="1" name="SE" description="Synchronization enable">
        <Enum name="B_0x0" start="0x0" description="synchronization disabled" />
        <Enum name="B_0x1" start="0x1" description="synchronization enabled" />
      </BitField>
      <BitField start="17" size="2" name="SPOL" description="Synchronization polarity Defines the edge polarity of the selected synchronization input:">
        <Enum name="B_0x0" start="0x0" description="no event, i.e. no synchronization nor detection." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="NBREQ" description="Number of DMA requests minus 1 to forward Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated. This field shall only be written when both SE and EGE bits are low." />
      <BitField start="24" size="5" name="SYNC_ID" description="Synchronization identification Selects the synchronization input (see inputs to resources STM32G0)." />
    </Register>
    <Register start="+0x4" size="0" name="DMAMUX_C1CR" access="Read/Write" description="DMAMUX request line multiplexer channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="6" name="DMAREQ_ID" description="DMA request identification Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources." />
      <BitField start="8" size="1" name="SOIE" description="Synchronization overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt enabled" />
      </BitField>
      <BitField start="9" size="1" name="EGE" description="Event generation enable">
        <Enum name="B_0x0" start="0x0" description="event generation disabled" />
        <Enum name="B_0x1" start="0x1" description="event generation enabled" />
      </BitField>
      <BitField start="16" size="1" name="SE" description="Synchronization enable">
        <Enum name="B_0x0" start="0x0" description="synchronization disabled" />
        <Enum name="B_0x1" start="0x1" description="synchronization enabled" />
      </BitField>
      <BitField start="17" size="2" name="SPOL" description="Synchronization polarity Defines the edge polarity of the selected synchronization input:">
        <Enum name="B_0x0" start="0x0" description="no event, i.e. no synchronization nor detection." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="NBREQ" description="Number of DMA requests minus 1 to forward Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated. This field shall only be written when both SE and EGE bits are low." />
      <BitField start="24" size="5" name="SYNC_ID" description="Synchronization identification Selects the synchronization input (see inputs to resources STM32G0)." />
    </Register>
    <Register start="+0x8" size="0" name="DMAMUX_C2CR" access="Read/Write" description="DMAMUX request line multiplexer channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="6" name="DMAREQ_ID" description="DMA request identification Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources." />
      <BitField start="8" size="1" name="SOIE" description="Synchronization overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt enabled" />
      </BitField>
      <BitField start="9" size="1" name="EGE" description="Event generation enable">
        <Enum name="B_0x0" start="0x0" description="event generation disabled" />
        <Enum name="B_0x1" start="0x1" description="event generation enabled" />
      </BitField>
      <BitField start="16" size="1" name="SE" description="Synchronization enable">
        <Enum name="B_0x0" start="0x0" description="synchronization disabled" />
        <Enum name="B_0x1" start="0x1" description="synchronization enabled" />
      </BitField>
      <BitField start="17" size="2" name="SPOL" description="Synchronization polarity Defines the edge polarity of the selected synchronization input:">
        <Enum name="B_0x0" start="0x0" description="no event, i.e. no synchronization nor detection." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="NBREQ" description="Number of DMA requests minus 1 to forward Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated. This field shall only be written when both SE and EGE bits are low." />
      <BitField start="24" size="5" name="SYNC_ID" description="Synchronization identification Selects the synchronization input (see inputs to resources STM32G0)." />
    </Register>
    <Register start="+0xC" size="0" name="DMAMUX_C3CR" access="Read/Write" description="DMAMUX request line multiplexer channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="6" name="DMAREQ_ID" description="DMA request identification Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources." />
      <BitField start="8" size="1" name="SOIE" description="Synchronization overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt enabled" />
      </BitField>
      <BitField start="9" size="1" name="EGE" description="Event generation enable">
        <Enum name="B_0x0" start="0x0" description="event generation disabled" />
        <Enum name="B_0x1" start="0x1" description="event generation enabled" />
      </BitField>
      <BitField start="16" size="1" name="SE" description="Synchronization enable">
        <Enum name="B_0x0" start="0x0" description="synchronization disabled" />
        <Enum name="B_0x1" start="0x1" description="synchronization enabled" />
      </BitField>
      <BitField start="17" size="2" name="SPOL" description="Synchronization polarity Defines the edge polarity of the selected synchronization input:">
        <Enum name="B_0x0" start="0x0" description="no event, i.e. no synchronization nor detection." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="NBREQ" description="Number of DMA requests minus 1 to forward Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated. This field shall only be written when both SE and EGE bits are low." />
      <BitField start="24" size="5" name="SYNC_ID" description="Synchronization identification Selects the synchronization input (see inputs to resources STM32G0)." />
    </Register>
    <Register start="+0x10" size="0" name="DMAMUX_C4CR" access="Read/Write" description="DMAMUX request line multiplexer channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="6" name="DMAREQ_ID" description="DMA request identification Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources." />
      <BitField start="8" size="1" name="SOIE" description="Synchronization overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt enabled" />
      </BitField>
      <BitField start="9" size="1" name="EGE" description="Event generation enable">
        <Enum name="B_0x0" start="0x0" description="event generation disabled" />
        <Enum name="B_0x1" start="0x1" description="event generation enabled" />
      </BitField>
      <BitField start="16" size="1" name="SE" description="Synchronization enable">
        <Enum name="B_0x0" start="0x0" description="synchronization disabled" />
        <Enum name="B_0x1" start="0x1" description="synchronization enabled" />
      </BitField>
      <BitField start="17" size="2" name="SPOL" description="Synchronization polarity Defines the edge polarity of the selected synchronization input:">
        <Enum name="B_0x0" start="0x0" description="no event, i.e. no synchronization nor detection." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="NBREQ" description="Number of DMA requests minus 1 to forward Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated. This field shall only be written when both SE and EGE bits are low." />
      <BitField start="24" size="5" name="SYNC_ID" description="Synchronization identification Selects the synchronization input (see inputs to resources STM32G0)." />
    </Register>
    <Register start="+0x14" size="0" name="DMAMUX_C5CR" access="Read/Write" description="DMAMUX request line multiplexer channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="6" name="DMAREQ_ID" description="DMA request identification Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources." />
      <BitField start="8" size="1" name="SOIE" description="Synchronization overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt enabled" />
      </BitField>
      <BitField start="9" size="1" name="EGE" description="Event generation enable">
        <Enum name="B_0x0" start="0x0" description="event generation disabled" />
        <Enum name="B_0x1" start="0x1" description="event generation enabled" />
      </BitField>
      <BitField start="16" size="1" name="SE" description="Synchronization enable">
        <Enum name="B_0x0" start="0x0" description="synchronization disabled" />
        <Enum name="B_0x1" start="0x1" description="synchronization enabled" />
      </BitField>
      <BitField start="17" size="2" name="SPOL" description="Synchronization polarity Defines the edge polarity of the selected synchronization input:">
        <Enum name="B_0x0" start="0x0" description="no event, i.e. no synchronization nor detection." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="NBREQ" description="Number of DMA requests minus 1 to forward Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated. This field shall only be written when both SE and EGE bits are low." />
      <BitField start="24" size="5" name="SYNC_ID" description="Synchronization identification Selects the synchronization input (see inputs to resources STM32G0)." />
    </Register>
    <Register start="+0x18" size="0" name="DMAMUX_C6CR" access="Read/Write" description="DMAMUX request line multiplexer channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="6" name="DMAREQ_ID" description="DMA request identification Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources." />
      <BitField start="8" size="1" name="SOIE" description="Synchronization overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt enabled" />
      </BitField>
      <BitField start="9" size="1" name="EGE" description="Event generation enable">
        <Enum name="B_0x0" start="0x0" description="event generation disabled" />
        <Enum name="B_0x1" start="0x1" description="event generation enabled" />
      </BitField>
      <BitField start="16" size="1" name="SE" description="Synchronization enable">
        <Enum name="B_0x0" start="0x0" description="synchronization disabled" />
        <Enum name="B_0x1" start="0x1" description="synchronization enabled" />
      </BitField>
      <BitField start="17" size="2" name="SPOL" description="Synchronization polarity Defines the edge polarity of the selected synchronization input:">
        <Enum name="B_0x0" start="0x0" description="no event, i.e. no synchronization nor detection." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="NBREQ" description="Number of DMA requests minus 1 to forward Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated. This field shall only be written when both SE and EGE bits are low." />
      <BitField start="24" size="5" name="SYNC_ID" description="Synchronization identification Selects the synchronization input (see inputs to resources STM32G0)." />
    </Register>
    <Register start="+0x80" size="0" name="DMAMUX_CSR" access="ReadOnly" description="DMAMUX request line multiplexer interrupt channel status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SOF0" description="Synchronization overrun event flag The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ. The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register." />
      <BitField start="1" size="1" name="SOF1" description="Synchronization overrun event flag The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ. The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register." />
      <BitField start="2" size="1" name="SOF2" description="Synchronization overrun event flag The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ. The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register." />
      <BitField start="3" size="1" name="SOF3" description="Synchronization overrun event flag The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ. The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register." />
      <BitField start="4" size="1" name="SOF4" description="Synchronization overrun event flag The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ. The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register." />
      <BitField start="5" size="1" name="SOF5" description="Synchronization overrun event flag The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ. The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register." />
      <BitField start="6" size="1" name="SOF6" description="Synchronization overrun event flag The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ. The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register." />
    </Register>
    <Register start="+0x84" size="0" name="DMAMUX_CFR" access="WriteOnly" description="DMAMUX request line multiplexer interrupt clear flag register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CSOF0" description="Clear synchronization overrun event flag Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register." />
      <BitField start="1" size="1" name="CSOF1" description="Clear synchronization overrun event flag Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register." />
      <BitField start="2" size="1" name="CSOF2" description="Clear synchronization overrun event flag Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register." />
      <BitField start="3" size="1" name="CSOF3" description="Clear synchronization overrun event flag Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register." />
      <BitField start="4" size="1" name="CSOF4" description="Clear synchronization overrun event flag Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register." />
      <BitField start="5" size="1" name="CSOF5" description="Clear synchronization overrun event flag Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register." />
      <BitField start="6" size="1" name="CSOF6" description="Clear synchronization overrun event flag Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register." />
    </Register>
    <Register start="+0x100" size="0" name="DMAMUX_RG0CR" access="Read/Write" description="DMAMUX request generator channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="5" name="SIG_ID" description="Signal identification Selects the DMA request trigger input used for the channel x of the DMA request generator" />
      <BitField start="8" size="1" name="OIE" description="Trigger overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt on a trigger overrun event occurrence is disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt on a trigger overrun event occurrence is enabled" />
      </BitField>
      <BitField start="16" size="1" name="GE" description="DMA request generator channel x enable">
        <Enum name="B_0x0" start="0x0" description="DMA request generator channel x disabled" />
        <Enum name="B_0x1" start="0x1" description="DMA request generator channel x enabled" />
      </BitField>
      <BitField start="17" size="2" name="GPOL" description="DMA request generator trigger polarity Defines the edge polarity of the selected trigger input">
        <Enum name="B_0x0" start="0x0" description="no event. I.e. none trigger detection nor generation." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="GNBREQ" description="Number of DMA requests to be generated (minus 1) Defines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1. Note: This field shall only be written when GE bit is disabled." />
    </Register>
    <Register start="+0x104" size="0" name="DMAMUX_RG1CR" access="Read/Write" description="DMAMUX request generator channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="5" name="SIG_ID" description="Signal identification Selects the DMA request trigger input used for the channel x of the DMA request generator" />
      <BitField start="8" size="1" name="OIE" description="Trigger overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt on a trigger overrun event occurrence is disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt on a trigger overrun event occurrence is enabled" />
      </BitField>
      <BitField start="16" size="1" name="GE" description="DMA request generator channel x enable">
        <Enum name="B_0x0" start="0x0" description="DMA request generator channel x disabled" />
        <Enum name="B_0x1" start="0x1" description="DMA request generator channel x enabled" />
      </BitField>
      <BitField start="17" size="2" name="GPOL" description="DMA request generator trigger polarity Defines the edge polarity of the selected trigger input">
        <Enum name="B_0x0" start="0x0" description="no event. I.e. none trigger detection nor generation." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="GNBREQ" description="Number of DMA requests to be generated (minus 1) Defines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1. Note: This field shall only be written when GE bit is disabled." />
    </Register>
    <Register start="+0x108" size="0" name="DMAMUX_RG2CR" access="Read/Write" description="DMAMUX request generator channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="5" name="SIG_ID" description="Signal identification Selects the DMA request trigger input used for the channel x of the DMA request generator" />
      <BitField start="8" size="1" name="OIE" description="Trigger overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt on a trigger overrun event occurrence is disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt on a trigger overrun event occurrence is enabled" />
      </BitField>
      <BitField start="16" size="1" name="GE" description="DMA request generator channel x enable">
        <Enum name="B_0x0" start="0x0" description="DMA request generator channel x disabled" />
        <Enum name="B_0x1" start="0x1" description="DMA request generator channel x enabled" />
      </BitField>
      <BitField start="17" size="2" name="GPOL" description="DMA request generator trigger polarity Defines the edge polarity of the selected trigger input">
        <Enum name="B_0x0" start="0x0" description="no event. I.e. none trigger detection nor generation." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="GNBREQ" description="Number of DMA requests to be generated (minus 1) Defines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1. Note: This field shall only be written when GE bit is disabled." />
    </Register>
    <Register start="+0x10C" size="0" name="DMAMUX_RG3CR" access="Read/Write" description="DMAMUX request generator channel x configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="5" name="SIG_ID" description="Signal identification Selects the DMA request trigger input used for the channel x of the DMA request generator" />
      <BitField start="8" size="1" name="OIE" description="Trigger overrun interrupt enable">
        <Enum name="B_0x0" start="0x0" description="interrupt on a trigger overrun event occurrence is disabled" />
        <Enum name="B_0x1" start="0x1" description="interrupt on a trigger overrun event occurrence is enabled" />
      </BitField>
      <BitField start="16" size="1" name="GE" description="DMA request generator channel x enable">
        <Enum name="B_0x0" start="0x0" description="DMA request generator channel x disabled" />
        <Enum name="B_0x1" start="0x1" description="DMA request generator channel x enabled" />
      </BitField>
      <BitField start="17" size="2" name="GPOL" description="DMA request generator trigger polarity Defines the edge polarity of the selected trigger input">
        <Enum name="B_0x0" start="0x0" description="no event. I.e. none trigger detection nor generation." />
        <Enum name="B_0x1" start="0x1" description="rising edge" />
        <Enum name="B_0x2" start="0x2" description="falling edge" />
        <Enum name="B_0x3" start="0x3" description="rising and falling edge" />
      </BitField>
      <BitField start="19" size="5" name="GNBREQ" description="Number of DMA requests to be generated (minus 1) Defines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1. Note: This field shall only be written when GE bit is disabled." />
    </Register>
    <Register start="+0x140" size="0" name="DMAMUX_RGSR" access="ReadOnly" description="DMAMUX request generator interrupt status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OF0" description="Trigger overrun event flag The flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register). The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register." />
      <BitField start="1" size="1" name="OF1" description="Trigger overrun event flag The flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register). The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register." />
      <BitField start="2" size="1" name="OF2" description="Trigger overrun event flag The flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register). The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register." />
      <BitField start="3" size="1" name="OF3" description="Trigger overrun event flag The flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register). The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register." />
    </Register>
    <Register start="+0x144" size="0" name="DMAMUX_RGCFR" access="WriteOnly" description="DMAMUX request generator interrupt clear flag register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="COF0" description="Clear trigger overrun event flag Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register." />
      <BitField start="1" size="1" name="COF1" description="Clear trigger overrun event flag Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register." />
      <BitField start="2" size="1" name="COF2" description="Clear trigger overrun event flag Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register." />
      <BitField start="3" size="1" name="COF3" description="Clear trigger overrun event flag Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register." />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="EXTI" start="0x40021800" description="External interrupt/event controller">
    <Register start="+0x0" size="0" name="RTSR1" access="Read/Write" description="EXTI rising trigger selection register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="RT0" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="1" size="1" name="RT1" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="2" size="1" name="RT2" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="3" size="1" name="RT3" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="4" size="1" name="RT4" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="5" size="1" name="RT5" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="6" size="1" name="RT6" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="7" size="1" name="RT7" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="8" size="1" name="RT8" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="9" size="1" name="RT9" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="10" size="1" name="RT10" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="11" size="1" name="RT11" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="12" size="1" name="RT12" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="13" size="1" name="RT13" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="14" size="1" name="RT14" description="Rising trigger event configuration bit of Configurable Event line" />
      <BitField start="15" size="1" name="RT15" description="Rising trigger event configuration bit of Configurable Event line" />
    </Register>
    <Register start="+0x4" size="0" name="FTSR1" access="Read/Write" description="EXTI falling trigger selection register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="FT0" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="1" size="1" name="FT1" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="2" size="1" name="FT2" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="3" size="1" name="FT3" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="4" size="1" name="FT4" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="5" size="1" name="FT5" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="6" size="1" name="FT6" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="7" size="1" name="FT7" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="8" size="1" name="FT8" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="9" size="1" name="FT9" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="10" size="1" name="FT10" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="11" size="1" name="FT11" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="12" size="1" name="FT12" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="13" size="1" name="FT13" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="14" size="1" name="FT14" description="Falling trigger event configuration bit of configurable line" />
      <BitField start="15" size="1" name="FT15" description="Falling trigger event configuration bit of configurable line" />
    </Register>
    <Register start="+0x8" size="0" name="SWIER1" access="Read/Write" description="EXTI software interrupt event register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SWI0" description="Software rising edge event trigger on line" />
      <BitField start="1" size="1" name="SWI1" description="Software rising edge event trigger on line" />
      <BitField start="2" size="1" name="SWI2" description="Software rising edge event trigger on line" />
      <BitField start="3" size="1" name="SWI3" description="Software rising edge event trigger on line" />
      <BitField start="4" size="1" name="SWI4" description="Software rising edge event trigger on line" />
      <BitField start="5" size="1" name="SWI5" description="Software rising edge event trigger on line" />
      <BitField start="6" size="1" name="SWI6" description="Software rising edge event trigger on line" />
      <BitField start="7" size="1" name="SWI7" description="Software rising edge event trigger on line" />
      <BitField start="8" size="1" name="SWI8" description="Software rising edge event trigger on line" />
      <BitField start="9" size="1" name="SWI9" description="Software rising edge event trigger on line" />
      <BitField start="10" size="1" name="SWI10" description="Software rising edge event trigger on line" />
      <BitField start="11" size="1" name="SWI11" description="Software rising edge event trigger on line" />
      <BitField start="12" size="1" name="SWI12" description="Software rising edge event trigger on line" />
      <BitField start="13" size="1" name="SWI13" description="Software rising edge event trigger on line" />
      <BitField start="14" size="1" name="SWI14" description="Software rising edge event trigger on line" />
      <BitField start="15" size="1" name="SWI15" description="Software rising edge event trigger on line" />
    </Register>
    <Register start="+0xC" size="0" name="RPR1" access="Read/Write" description="EXTI rising edge pending register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="RPIF0" description="Rising edge event pending for configurable line" />
      <BitField start="1" size="1" name="RPIF1" description="Rising edge event pending for configurable line" />
      <BitField start="2" size="1" name="RPIF2" description="Rising edge event pending for configurable line" />
      <BitField start="3" size="1" name="RPIF3" description="Rising edge event pending for configurable line" />
      <BitField start="4" size="1" name="RPIF4" description="Rising edge event pending for configurable line" />
      <BitField start="5" size="1" name="RPIF5" description="configurable event inputs x rising edge Pending bit" />
      <BitField start="6" size="1" name="RPIF6" description="Rising edge event pending for configurable line" />
      <BitField start="7" size="1" name="RPIF7" description="Rising edge event pending for configurable line" />
      <BitField start="8" size="1" name="RPIF8" description="Rising edge event pending for configurable line" />
      <BitField start="9" size="1" name="RPIF9" description="Rising edge event pending for configurable line" />
      <BitField start="10" size="1" name="RPIF10" description="Rising edge event pending for configurable line" />
      <BitField start="11" size="1" name="RPIF11" description="Rising edge event pending for configurable line" />
      <BitField start="12" size="1" name="RPIF12" description="Rising edge event pending for configurable line" />
      <BitField start="13" size="1" name="RPIF13" description="Rising edge event pending for configurable line" />
      <BitField start="14" size="1" name="RPIF14" description="Rising edge event pending for configurable line" />
      <BitField start="15" size="1" name="RPIF15" description="Rising edge event pending for configurable line" />
    </Register>
    <Register start="+0x10" size="0" name="FPR1" access="Read/Write" description="EXTI falling edge pending register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="FPIF0" description="Falling edge event pending for configurable line" />
      <BitField start="1" size="1" name="FPIF1" description="Falling edge event pending for configurable line" />
      <BitField start="2" size="1" name="FPIF2" description="Falling edge event pending for configurable line" />
      <BitField start="3" size="1" name="FPIF3" description="Falling edge event pending for configurable line" />
      <BitField start="4" size="1" name="FPIF4" description="Falling edge event pending for configurable line" />
      <BitField start="5" size="1" name="FPIF5" description="Falling edge event pending for configurable line" />
      <BitField start="6" size="1" name="FPIF6" description="Falling edge event pending for configurable line" />
      <BitField start="7" size="1" name="FPIF7" description="Falling edge event pending for configurable line" />
      <BitField start="8" size="1" name="FPIF8" description="Falling edge event pending for configurable line" />
      <BitField start="9" size="1" name="FPIF9" description="Falling edge event pending for configurable line" />
      <BitField start="10" size="1" name="FPIF10" description="Falling edge event pending for configurable line" />
      <BitField start="11" size="1" name="FPIF11" description="Falling edge event pending for configurable line" />
      <BitField start="12" size="1" name="FPIF12" description="Falling edge event pending for configurable line" />
      <BitField start="13" size="1" name="FPIF13" description="Falling edge event pending for configurable line" />
      <BitField start="14" size="1" name="FPIF14" description="Falling edge event pending for configurable line" />
      <BitField start="15" size="1" name="FPIF15" description="Falling edge event pending for configurable line" />
    </Register>
    <Register start="+0x60" size="0" name="EXTICR1" access="Read/Write" description="EXTI external interrupt selection register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="EXTI0[7:0]" description="GPIO port selection" />
      <BitField start="8" size="8" name="EXTI1[7:0]" description="GPIO port selection" />
      <BitField start="16" size="8" name="EXTI2[7:0]" description="GPIO port selection" />
      <BitField start="24" size="8" name="EXTI3[7:0]" description="GPIO port selection" />
    </Register>
    <Register start="+0x64" size="0" name="EXTICR2" access="Read/Write" description="EXTI external interrupt selection register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="EXTI4[7:0]" description="GPIO port selection" />
      <BitField start="8" size="8" name="EXTI5[7:0]" description="GPIO port selection" />
      <BitField start="16" size="8" name="EXTI6[7:0]" description="GPIO port selection" />
      <BitField start="24" size="8" name="EXTI7[7:0]" description="GPIO port selection" />
    </Register>
    <Register start="+0x68" size="0" name="EXTICR3" access="Read/Write" description="EXTI external interrupt selection register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="EXTI8[7:0]" description="GPIO port selection" />
      <BitField start="8" size="8" name="EXTI9[7:0]" description="GPIO port selection" />
      <BitField start="16" size="8" name="EXTI10[7:0]" description="GPIO port selection" />
      <BitField start="24" size="8" name="EXTI11[7:0]" description="GPIO port selection" />
    </Register>
    <Register start="+0x6C" size="0" name="EXTICR4" access="Read/Write" description="EXTI external interrupt selection register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="EXTI12[7:0]" description="GPIO port selection" />
      <BitField start="8" size="8" name="EXTI13[7:0]" description="GPIO port selection" />
      <BitField start="16" size="8" name="EXTI14[7:0]" description="GPIO port selection" />
      <BitField start="24" size="8" name="EXTI15[7:0]" description="GPIO port selection" />
    </Register>
    <Register start="+0x80" size="0" name="IMR1" access="Read/Write" description="EXTI CPU wakeup with interrupt mask register" reset_value="0xFFF80000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="IM0" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="1" size="1" name="IM1" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="2" size="1" name="IM2" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="3" size="1" name="IM3" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="4" size="1" name="IM4" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="5" size="1" name="IM5" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="6" size="1" name="IM6" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="7" size="1" name="IM7" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="8" size="1" name="IM8" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="9" size="1" name="IM9" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="10" size="1" name="IM10" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="11" size="1" name="IM11" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="12" size="1" name="IM12" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="13" size="1" name="IM13" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="14" size="1" name="IM14" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="15" size="1" name="IM15" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="19" size="1" name="IM19" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="21" size="1" name="IM21" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="22" size="1" name="IM22" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="23" size="1" name="IM23" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="24" size="1" name="IM24" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="25" size="1" name="IM25" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="26" size="1" name="IM26" description="CPU wakeup with interrupt mask on event input" />
      <BitField start="31" size="1" name="IM31" description="CPU wakeup with interrupt mask on event input" />
    </Register>
    <Register start="+0x84" size="0" name="EMR1" access="Read/Write" description="EXTI CPU wakeup with event mask register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EM0" description="CPU wakeup with event mask on event input" />
      <BitField start="1" size="1" name="EM1" description="CPU wakeup with event mask on event input" />
      <BitField start="2" size="1" name="EM2" description="CPU wakeup with event mask on event input" />
      <BitField start="3" size="1" name="EM3" description="CPU wakeup with event mask on event input" />
      <BitField start="4" size="1" name="EM4" description="CPU wakeup with event mask on event input" />
      <BitField start="5" size="1" name="EM5" description="CPU wakeup with event mask on event input" />
      <BitField start="6" size="1" name="EM6" description="CPU wakeup with event mask on event input" />
      <BitField start="7" size="1" name="EM7" description="CPU wakeup with event mask on event input" />
      <BitField start="8" size="1" name="EM8" description="CPU wakeup with event mask on event input" />
      <BitField start="9" size="1" name="EM9" description="CPU wakeup with event mask on event input" />
      <BitField start="10" size="1" name="EM10" description="CPU wakeup with event mask on event input" />
      <BitField start="11" size="1" name="EM11" description="CPU wakeup with event mask on event input" />
      <BitField start="12" size="1" name="EM12" description="CPU wakeup with event mask on event input" />
      <BitField start="13" size="1" name="EM13" description="CPU wakeup with event mask on event input" />
      <BitField start="14" size="1" name="EM14" description="CPU wakeup with event mask on event input" />
      <BitField start="15" size="1" name="EM15" description="CPU wakeup with event mask on event input" />
      <BitField start="19" size="1" name="EM19" description="CPU wakeup with event mask on event input" />
      <BitField start="21" size="1" name="EM21" description="CPU wakeup with event mask on event input" />
      <BitField start="23" size="1" name="EM23" description="CPU wakeup with event mask on event input" />
      <BitField start="25" size="1" name="EM25" description="CPU wakeup with event mask on event input" />
      <BitField start="26" size="1" name="EM26" description="CPU wakeup with event mask on event input" />
      <BitField start="31" size="1" name="EM31" description="CPU wakeup with event mask on event input" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="FLASH" start="0x40022000" description="Flash">
    <Register start="+0x0" size="0" name="ACR" access="Read/Write" description="Access control register" reset_value="0x00000600" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="LATENCY" description="Latency" />
      <BitField start="8" size="1" name="PRFTEN" description="Prefetch enable" />
      <BitField start="9" size="1" name="ICEN" description="Instruction cache enable" />
      <BitField start="11" size="1" name="ICRST" description="Instruction cache reset" />
      <BitField start="16" size="1" name="EMPTY" description="Flash User area empty" />
    </Register>
    <Register start="+0x8" size="0" name="KEYR" access="WriteOnly" description="Flash key register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="KEYR" description="KEYR" />
    </Register>
    <Register start="+0xC" size="0" name="OPTKEYR" access="WriteOnly" description="Option byte key register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="OPTKEYR" description="Option byte key" />
    </Register>
    <Register start="+0x10" size="0" name="SR" access="Read/Write" description="Status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EOP" description="End of operation" />
      <BitField start="1" size="1" name="OPERR" description="Operation error" />
      <BitField start="3" size="1" name="PROGERR" description="Programming error" />
      <BitField start="4" size="1" name="WRPERR" description="Write protected error" />
      <BitField start="5" size="1" name="PGAERR" description="Programming alignment error" />
      <BitField start="6" size="1" name="SIZERR" description="Size error" />
      <BitField start="7" size="1" name="PGSERR" description="Programming sequence error" />
      <BitField start="8" size="1" name="MISERR" description="Fast programming data miss error" />
      <BitField start="9" size="1" name="FASTERR" description="Fast programming error" />
      <BitField start="15" size="1" name="OPTVERR" description="Option and Engineering bits loading validity error" />
      <BitField start="16" size="1" name="BSY1" description="BSY1" />
      <BitField start="17" size="1" name="BSY2" description="BSY2" />
      <BitField start="18" size="1" name="CFGBSY" description="Programming or erase configuration busy." />
    </Register>
    <Register start="+0x14" size="0" name="CR" access="Read/Write" description="Flash control register" reset_value="0xC0000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PG" description="Programming" />
      <BitField start="1" size="1" name="PER" description="Page erase" />
      <BitField start="2" size="1" name="MER1" description="Mass erase" />
      <BitField start="3" size="10" name="PNB" description="Page number" />
      <BitField start="13" size="1" name="BKER" description="BKER" />
      <BitField start="15" size="1" name="MER2" description="MER2" />
      <BitField start="16" size="1" name="STRT" description="Start" />
      <BitField start="17" size="1" name="OPTSTRT" description="Options modification start" />
      <BitField start="18" size="1" name="FSTPG" description="Fast programming" />
      <BitField start="24" size="1" name="EOPIE" description="End of operation interrupt enable" />
      <BitField start="25" size="1" name="ERRIE" description="Error interrupt enable" />
      <BitField start="27" size="1" name="OBL_LAUNCH" description="Force the option byte loading" />
      <BitField start="30" size="1" name="OPTLOCK" description="Options Lock" />
      <BitField start="31" size="1" name="LOCK" description="FLASH_CR Lock" />
    </Register>
    <Register start="+0x18" size="0" name="ECCR" access="Read/Write" description="Flash ECC register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="14" name="ADDR_ECC" description="ECC fail address" />
      <BitField start="20" size="1" name="SYSF_ECC" description="ECC fail for Corrected ECC Error or Double ECC Error in info block" />
      <BitField start="24" size="1" name="ECCIE" description="ECC correction interrupt enable" />
      <BitField start="30" size="1" name="ECCC" description="ECC correction" />
      <BitField start="31" size="1" name="ECCD" description="ECC detection" />
    </Register>
    <Register start="+0x20" size="0" name="OPTR" access="Read/Write" description="Flash option register" reset_value="0xF0000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="RDP" description="Read protection level" />
      <BitField start="13" size="1" name="nRST_STOP" description="nRST_STOP" />
      <BitField start="14" size="1" name="nRST_STDBY" description="nRST_STDBY" />
      <BitField start="16" size="1" name="IDWG_SW" description="Independent watchdog selection" />
      <BitField start="17" size="1" name="IWDG_STOP" description="Independent watchdog counter freeze in Stop mode" />
      <BitField start="18" size="1" name="IWDG_STDBY" description="Independent watchdog counter freeze in Standby mode" />
      <BitField start="19" size="1" name="WWDG_SW" description="Window watchdog selection" />
      <BitField start="20" size="1" name="nSWAP_BANK" description="nSWAP_BANK" />
      <BitField start="21" size="1" name="DUAL_BANK" description="DUAL_BANK" />
      <BitField start="22" size="1" name="RAM_PARITY_CHECK" description="SRAM parity check control" />
      <BitField start="24" size="1" name="nBOOT_SEL" description="nBOOT_SEL" />
      <BitField start="25" size="1" name="nBOOT1" description="Boot configuration" />
      <BitField start="26" size="1" name="nBOOT0" description="nBOOT0 option bit" />
    </Register>
    <Register start="+0x2C" size="0" name="WRP1AR" access="ReadOnly" description="Flash WRP area A address register" reset_value="0xF0000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="7" name="WRP1A_STRT" description="WRP area A start offset" />
      <BitField start="16" size="7" name="WRP1A_END" description="WRP area A end offset" />
    </Register>
    <Register start="+0x30" size="0" name="WRP1BR" access="ReadOnly" description="Flash WRP area B address register" reset_value="0xF0000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="7" name="WRP1B_STRT" description="WRP area B start offset" />
      <BitField start="16" size="7" name="WRP1B_END" description="WRP area B end offset" />
    </Register>
    <Register start="+0x4C" size="0" name="WRP2AR" access="Read/Write" description="FLASH WRP2 area A address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="7" name="WRP2A_STRT" description="WRP2A_STRT" />
      <BitField start="16" size="7" name="WRP2A_END" description="WRP2A_END" />
    </Register>
    <Register start="+0x50" size="0" name="WRP2BR" access="Read/Write" description="FLASH WRP2 area B address register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="7" name="WRP2B_STRT" description="WRP2B_STRT" />
      <BitField start="16" size="7" name="WRP2B_END" description="WRP2B_END" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="GPIOA" start="0x50000000" description="General-purpose I/Os">
    <Register start="+0x0" size="0" name="MODER" access="Read/Write" description="GPIO port mode register" reset_value="0xEBFFFFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="MODER0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="MODER1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="MODER2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="MODER3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="MODER4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="MODER5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="MODER6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="MODER7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="MODER8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="MODER9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="MODER10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="MODER11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="MODER12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="MODER13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="MODER14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="MODER15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x4" size="0" name="OTYPER" access="Read/Write" description="GPIO port output type register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OT0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="1" size="1" name="OT1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="1" name="OT2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="3" size="1" name="OT3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="1" name="OT4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="5" size="1" name="OT5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="1" name="OT6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="7" size="1" name="OT7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="1" name="OT8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="9" size="1" name="OT9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="1" name="OT10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="11" size="1" name="OT11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="1" name="OT12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="13" size="1" name="OT13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="1" name="OT14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="15" size="1" name="OT15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x8" size="0" name="OSPEEDR" access="Read/Write" description="GPIO port output speed register" reset_value="0x0C000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="OSPEEDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="OSPEEDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="OSPEEDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="OSPEEDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="OSPEEDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="OSPEEDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="OSPEEDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="OSPEEDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="OSPEEDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="OSPEEDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="OSPEEDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="OSPEEDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="OSPEEDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="OSPEEDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="OSPEEDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="OSPEEDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0xC" size="0" name="PUPDR" access="Read/Write" description="GPIO port pull-up/pull-down register" reset_value="0x24000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="PUPDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="PUPDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="PUPDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="PUPDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="PUPDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="PUPDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="PUPDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="PUPDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="PUPDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="PUPDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="PUPDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="PUPDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="PUPDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="PUPDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="PUPDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="PUPDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x10" size="0" name="IDR" access="ReadOnly" description="GPIO port input data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="IDR0" description="Port input data (y = 0..15)" />
      <BitField start="1" size="1" name="IDR1" description="Port input data (y = 0..15)" />
      <BitField start="2" size="1" name="IDR2" description="Port input data (y = 0..15)" />
      <BitField start="3" size="1" name="IDR3" description="Port input data (y = 0..15)" />
      <BitField start="4" size="1" name="IDR4" description="Port input data (y = 0..15)" />
      <BitField start="5" size="1" name="IDR5" description="Port input data (y = 0..15)" />
      <BitField start="6" size="1" name="IDR6" description="Port input data (y = 0..15)" />
      <BitField start="7" size="1" name="IDR7" description="Port input data (y = 0..15)" />
      <BitField start="8" size="1" name="IDR8" description="Port input data (y = 0..15)" />
      <BitField start="9" size="1" name="IDR9" description="Port input data (y = 0..15)" />
      <BitField start="10" size="1" name="IDR10" description="Port input data (y = 0..15)" />
      <BitField start="11" size="1" name="IDR11" description="Port input data (y = 0..15)" />
      <BitField start="12" size="1" name="IDR12" description="Port input data (y = 0..15)" />
      <BitField start="13" size="1" name="IDR13" description="Port input data (y = 0..15)" />
      <BitField start="14" size="1" name="IDR14" description="Port input data (y = 0..15)" />
      <BitField start="15" size="1" name="IDR15" description="Port input data (y = 0..15)" />
    </Register>
    <Register start="+0x14" size="0" name="ODR" access="Read/Write" description="GPIO port output data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ODR0" description="Port output data (y = 0..15)" />
      <BitField start="1" size="1" name="ODR1" description="Port output data (y = 0..15)" />
      <BitField start="2" size="1" name="ODR2" description="Port output data (y = 0..15)" />
      <BitField start="3" size="1" name="ODR3" description="Port output data (y = 0..15)" />
      <BitField start="4" size="1" name="ODR4" description="Port output data (y = 0..15)" />
      <BitField start="5" size="1" name="ODR5" description="Port output data (y = 0..15)" />
      <BitField start="6" size="1" name="ODR6" description="Port output data (y = 0..15)" />
      <BitField start="7" size="1" name="ODR7" description="Port output data (y = 0..15)" />
      <BitField start="8" size="1" name="ODR8" description="Port output data (y = 0..15)" />
      <BitField start="9" size="1" name="ODR9" description="Port output data (y = 0..15)" />
      <BitField start="10" size="1" name="ODR10" description="Port output data (y = 0..15)" />
      <BitField start="11" size="1" name="ODR11" description="Port output data (y = 0..15)" />
      <BitField start="12" size="1" name="ODR12" description="Port output data (y = 0..15)" />
      <BitField start="13" size="1" name="ODR13" description="Port output data (y = 0..15)" />
      <BitField start="14" size="1" name="ODR14" description="Port output data (y = 0..15)" />
      <BitField start="15" size="1" name="ODR15" description="Port output data (y = 0..15)" />
    </Register>
    <Register start="+0x18" size="0" name="BSRR" access="WriteOnly" description="GPIO port bit set/reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BS0" description="Port x set bit y (y= 0..15)" />
      <BitField start="1" size="1" name="BS1" description="Port x set bit y (y= 0..15)" />
      <BitField start="2" size="1" name="BS2" description="Port x set bit y (y= 0..15)" />
      <BitField start="3" size="1" name="BS3" description="Port x set bit y (y= 0..15)" />
      <BitField start="4" size="1" name="BS4" description="Port x set bit y (y= 0..15)" />
      <BitField start="5" size="1" name="BS5" description="Port x set bit y (y= 0..15)" />
      <BitField start="6" size="1" name="BS6" description="Port x set bit y (y= 0..15)" />
      <BitField start="7" size="1" name="BS7" description="Port x set bit y (y= 0..15)" />
      <BitField start="8" size="1" name="BS8" description="Port x set bit y (y= 0..15)" />
      <BitField start="9" size="1" name="BS9" description="Port x set bit y (y= 0..15)" />
      <BitField start="10" size="1" name="BS10" description="Port x set bit y (y= 0..15)" />
      <BitField start="11" size="1" name="BS11" description="Port x set bit y (y= 0..15)" />
      <BitField start="12" size="1" name="BS12" description="Port x set bit y (y= 0..15)" />
      <BitField start="13" size="1" name="BS13" description="Port x set bit y (y= 0..15)" />
      <BitField start="14" size="1" name="BS14" description="Port x set bit y (y= 0..15)" />
      <BitField start="15" size="1" name="BS15" description="Port x set bit y (y= 0..15)" />
      <BitField start="16" size="1" name="BR0" description="Port x set bit y (y= 0..15)" />
      <BitField start="17" size="1" name="BR1" description="Port x reset bit y (y = 0..15)" />
      <BitField start="18" size="1" name="BR2" description="Port x reset bit y (y = 0..15)" />
      <BitField start="19" size="1" name="BR3" description="Port x reset bit y (y = 0..15)" />
      <BitField start="20" size="1" name="BR4" description="Port x reset bit y (y = 0..15)" />
      <BitField start="21" size="1" name="BR5" description="Port x reset bit y (y = 0..15)" />
      <BitField start="22" size="1" name="BR6" description="Port x reset bit y (y = 0..15)" />
      <BitField start="23" size="1" name="BR7" description="Port x reset bit y (y = 0..15)" />
      <BitField start="24" size="1" name="BR8" description="Port x reset bit y (y = 0..15)" />
      <BitField start="25" size="1" name="BR9" description="Port x reset bit y (y = 0..15)" />
      <BitField start="26" size="1" name="BR10" description="Port x reset bit y (y = 0..15)" />
      <BitField start="27" size="1" name="BR11" description="Port x reset bit y (y = 0..15)" />
      <BitField start="28" size="1" name="BR12" description="Port x reset bit y (y = 0..15)" />
      <BitField start="29" size="1" name="BR13" description="Port x reset bit y (y = 0..15)" />
      <BitField start="30" size="1" name="BR14" description="Port x reset bit y (y = 0..15)" />
      <BitField start="31" size="1" name="BR15" description="Port x reset bit y (y = 0..15)" />
    </Register>
    <Register start="+0x1C" size="0" name="LCKR" access="Read/Write" description="GPIO port configuration lock register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LCK0" description="Port x lock bit y (y= 0..15)" />
      <BitField start="1" size="1" name="LCK1" description="Port x lock bit y (y= 0..15)" />
      <BitField start="2" size="1" name="LCK2" description="Port x lock bit y (y= 0..15)" />
      <BitField start="3" size="1" name="LCK3" description="Port x lock bit y (y= 0..15)" />
      <BitField start="4" size="1" name="LCK4" description="Port x lock bit y (y= 0..15)" />
      <BitField start="5" size="1" name="LCK5" description="Port x lock bit y (y= 0..15)" />
      <BitField start="6" size="1" name="LCK6" description="Port x lock bit y (y= 0..15)" />
      <BitField start="7" size="1" name="LCK7" description="Port x lock bit y (y= 0..15)" />
      <BitField start="8" size="1" name="LCK8" description="Port x lock bit y (y= 0..15)" />
      <BitField start="9" size="1" name="LCK9" description="Port x lock bit y (y= 0..15)" />
      <BitField start="10" size="1" name="LCK10" description="Port x lock bit y (y= 0..15)" />
      <BitField start="11" size="1" name="LCK11" description="Port x lock bit y (y= 0..15)" />
      <BitField start="12" size="1" name="LCK12" description="Port x lock bit y (y= 0..15)" />
      <BitField start="13" size="1" name="LCK13" description="Port x lock bit y (y= 0..15)" />
      <BitField start="14" size="1" name="LCK14" description="Port x lock bit y (y= 0..15)" />
      <BitField start="15" size="1" name="LCK15" description="Port x lock bit y (y= 0..15)" />
      <BitField start="16" size="1" name="LCKK" description="Port x lock bit y (y= 0..15)" />
    </Register>
    <Register start="+0x20" size="0" name="AFRL" access="Read/Write" description="GPIO alternate function low register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL0" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="4" size="4" name="AFSEL1" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="8" size="4" name="AFSEL2" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="12" size="4" name="AFSEL3" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="16" size="4" name="AFSEL4" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="20" size="4" name="AFSEL5" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="24" size="4" name="AFSEL6" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="28" size="4" name="AFSEL7" description="Alternate function selection for port x bit y (y = 0..7)" />
    </Register>
    <Register start="+0x24" size="0" name="AFRH" access="Read/Write" description="GPIO alternate function high register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL8" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="4" size="4" name="AFSEL9" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="8" size="4" name="AFSEL10" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="12" size="4" name="AFSEL11" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="16" size="4" name="AFSEL12" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="20" size="4" name="AFSEL13" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="24" size="4" name="AFSEL14" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="28" size="4" name="AFSEL15" description="Alternate function selection for port x bit y (y = 8..15)" />
    </Register>
    <Register start="+0x28" size="0" name="BRR" access="WriteOnly" description="port bit reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BR0" description="Port Reset bit" />
      <BitField start="1" size="1" name="BR1" description="Port Reset bit" />
      <BitField start="2" size="1" name="BR2" description="Port Reset bit" />
      <BitField start="3" size="1" name="BR3" description="Port Reset bit" />
      <BitField start="4" size="1" name="BR4" description="Port Reset bit" />
      <BitField start="5" size="1" name="BR5" description="Port Reset bit" />
      <BitField start="6" size="1" name="BR6" description="Port Reset bit" />
      <BitField start="7" size="1" name="BR7" description="Port Reset bit" />
      <BitField start="8" size="1" name="BR8" description="Port Reset bit" />
      <BitField start="9" size="1" name="BR9" description="Port Reset bit" />
      <BitField start="10" size="1" name="BR10" description="Port Reset bit" />
      <BitField start="11" size="1" name="BR11" description="Port Reset bit" />
      <BitField start="12" size="1" name="BR12" description="Port Reset bit" />
      <BitField start="13" size="1" name="BR13" description="Port Reset bit" />
      <BitField start="14" size="1" name="BR14" description="Port Reset bit" />
      <BitField start="15" size="1" name="BR15" description="Port Reset bit" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="GPIOB" start="0x50000400" description="General-purpose I/Os">
    <Register start="+0x0" size="0" name="MODER" access="Read/Write" description="GPIO port mode register" reset_value="0xFFFFFFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="MODER0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="MODER1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="MODER2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="MODER3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="MODER4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="MODER5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="MODER6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="MODER7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="MODER8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="MODER9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="MODER10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="MODER11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="MODER12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="MODER13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="MODER14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="MODER15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x4" size="0" name="OTYPER" access="Read/Write" description="GPIO port output type register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OT0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="1" size="1" name="OT1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="1" name="OT2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="3" size="1" name="OT3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="1" name="OT4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="5" size="1" name="OT5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="1" name="OT6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="7" size="1" name="OT7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="1" name="OT8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="9" size="1" name="OT9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="1" name="OT10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="11" size="1" name="OT11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="1" name="OT12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="13" size="1" name="OT13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="1" name="OT14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="15" size="1" name="OT15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x8" size="0" name="OSPEEDR" access="Read/Write" description="GPIO port output speed register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="OSPEEDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="OSPEEDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="OSPEEDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="OSPEEDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="OSPEEDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="OSPEEDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="OSPEEDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="OSPEEDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="OSPEEDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="OSPEEDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="OSPEEDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="OSPEEDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="OSPEEDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="OSPEEDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="OSPEEDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="OSPEEDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0xC" size="0" name="PUPDR" access="Read/Write" description="GPIO port pull-up/pull-down register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="PUPDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="PUPDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="PUPDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="PUPDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="PUPDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="PUPDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="PUPDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="PUPDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="PUPDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="PUPDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="PUPDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="PUPDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="PUPDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="PUPDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="PUPDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="PUPDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x10" size="0" name="IDR" access="ReadOnly" description="GPIO port input data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="IDR0" description="Port input data (y = 0..15)" />
      <BitField start="1" size="1" name="IDR1" description="Port input data (y = 0..15)" />
      <BitField start="2" size="1" name="IDR2" description="Port input data (y = 0..15)" />
      <BitField start="3" size="1" name="IDR3" description="Port input data (y = 0..15)" />
      <BitField start="4" size="1" name="IDR4" description="Port input data (y = 0..15)" />
      <BitField start="5" size="1" name="IDR5" description="Port input data (y = 0..15)" />
      <BitField start="6" size="1" name="IDR6" description="Port input data (y = 0..15)" />
      <BitField start="7" size="1" name="IDR7" description="Port input data (y = 0..15)" />
      <BitField start="8" size="1" name="IDR8" description="Port input data (y = 0..15)" />
      <BitField start="9" size="1" name="IDR9" description="Port input data (y = 0..15)" />
      <BitField start="10" size="1" name="IDR10" description="Port input data (y = 0..15)" />
      <BitField start="11" size="1" name="IDR11" description="Port input data (y = 0..15)" />
      <BitField start="12" size="1" name="IDR12" description="Port input data (y = 0..15)" />
      <BitField start="13" size="1" name="IDR13" description="Port input data (y = 0..15)" />
      <BitField start="14" size="1" name="IDR14" description="Port input data (y = 0..15)" />
      <BitField start="15" size="1" name="IDR15" description="Port input data (y = 0..15)" />
    </Register>
    <Register start="+0x14" size="0" name="ODR" access="Read/Write" description="GPIO port output data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ODR0" description="Port output data (y = 0..15)" />
      <BitField start="1" size="1" name="ODR1" description="Port output data (y = 0..15)" />
      <BitField start="2" size="1" name="ODR2" description="Port output data (y = 0..15)" />
      <BitField start="3" size="1" name="ODR3" description="Port output data (y = 0..15)" />
      <BitField start="4" size="1" name="ODR4" description="Port output data (y = 0..15)" />
      <BitField start="5" size="1" name="ODR5" description="Port output data (y = 0..15)" />
      <BitField start="6" size="1" name="ODR6" description="Port output data (y = 0..15)" />
      <BitField start="7" size="1" name="ODR7" description="Port output data (y = 0..15)" />
      <BitField start="8" size="1" name="ODR8" description="Port output data (y = 0..15)" />
      <BitField start="9" size="1" name="ODR9" description="Port output data (y = 0..15)" />
      <BitField start="10" size="1" name="ODR10" description="Port output data (y = 0..15)" />
      <BitField start="11" size="1" name="ODR11" description="Port output data (y = 0..15)" />
      <BitField start="12" size="1" name="ODR12" description="Port output data (y = 0..15)" />
      <BitField start="13" size="1" name="ODR13" description="Port output data (y = 0..15)" />
      <BitField start="14" size="1" name="ODR14" description="Port output data (y = 0..15)" />
      <BitField start="15" size="1" name="ODR15" description="Port output data (y = 0..15)" />
    </Register>
    <Register start="+0x18" size="0" name="BSRR" access="WriteOnly" description="GPIO port bit set/reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BS0" description="Port x set bit y (y= 0..15)" />
      <BitField start="1" size="1" name="BS1" description="Port x set bit y (y= 0..15)" />
      <BitField start="2" size="1" name="BS2" description="Port x set bit y (y= 0..15)" />
      <BitField start="3" size="1" name="BS3" description="Port x set bit y (y= 0..15)" />
      <BitField start="4" size="1" name="BS4" description="Port x set bit y (y= 0..15)" />
      <BitField start="5" size="1" name="BS5" description="Port x set bit y (y= 0..15)" />
      <BitField start="6" size="1" name="BS6" description="Port x set bit y (y= 0..15)" />
      <BitField start="7" size="1" name="BS7" description="Port x set bit y (y= 0..15)" />
      <BitField start="8" size="1" name="BS8" description="Port x set bit y (y= 0..15)" />
      <BitField start="9" size="1" name="BS9" description="Port x set bit y (y= 0..15)" />
      <BitField start="10" size="1" name="BS10" description="Port x set bit y (y= 0..15)" />
      <BitField start="11" size="1" name="BS11" description="Port x set bit y (y= 0..15)" />
      <BitField start="12" size="1" name="BS12" description="Port x set bit y (y= 0..15)" />
      <BitField start="13" size="1" name="BS13" description="Port x set bit y (y= 0..15)" />
      <BitField start="14" size="1" name="BS14" description="Port x set bit y (y= 0..15)" />
      <BitField start="15" size="1" name="BS15" description="Port x set bit y (y= 0..15)" />
      <BitField start="16" size="1" name="BR0" description="Port x set bit y (y= 0..15)" />
      <BitField start="17" size="1" name="BR1" description="Port x reset bit y (y = 0..15)" />
      <BitField start="18" size="1" name="BR2" description="Port x reset bit y (y = 0..15)" />
      <BitField start="19" size="1" name="BR3" description="Port x reset bit y (y = 0..15)" />
      <BitField start="20" size="1" name="BR4" description="Port x reset bit y (y = 0..15)" />
      <BitField start="21" size="1" name="BR5" description="Port x reset bit y (y = 0..15)" />
      <BitField start="22" size="1" name="BR6" description="Port x reset bit y (y = 0..15)" />
      <BitField start="23" size="1" name="BR7" description="Port x reset bit y (y = 0..15)" />
      <BitField start="24" size="1" name="BR8" description="Port x reset bit y (y = 0..15)" />
      <BitField start="25" size="1" name="BR9" description="Port x reset bit y (y = 0..15)" />
      <BitField start="26" size="1" name="BR10" description="Port x reset bit y (y = 0..15)" />
      <BitField start="27" size="1" name="BR11" description="Port x reset bit y (y = 0..15)" />
      <BitField start="28" size="1" name="BR12" description="Port x reset bit y (y = 0..15)" />
      <BitField start="29" size="1" name="BR13" description="Port x reset bit y (y = 0..15)" />
      <BitField start="30" size="1" name="BR14" description="Port x reset bit y (y = 0..15)" />
      <BitField start="31" size="1" name="BR15" description="Port x reset bit y (y = 0..15)" />
    </Register>
    <Register start="+0x1C" size="0" name="LCKR" access="Read/Write" description="GPIO port configuration lock register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LCK0" description="Port x lock bit y (y= 0..15)" />
      <BitField start="1" size="1" name="LCK1" description="Port x lock bit y (y= 0..15)" />
      <BitField start="2" size="1" name="LCK2" description="Port x lock bit y (y= 0..15)" />
      <BitField start="3" size="1" name="LCK3" description="Port x lock bit y (y= 0..15)" />
      <BitField start="4" size="1" name="LCK4" description="Port x lock bit y (y= 0..15)" />
      <BitField start="5" size="1" name="LCK5" description="Port x lock bit y (y= 0..15)" />
      <BitField start="6" size="1" name="LCK6" description="Port x lock bit y (y= 0..15)" />
      <BitField start="7" size="1" name="LCK7" description="Port x lock bit y (y= 0..15)" />
      <BitField start="8" size="1" name="LCK8" description="Port x lock bit y (y= 0..15)" />
      <BitField start="9" size="1" name="LCK9" description="Port x lock bit y (y= 0..15)" />
      <BitField start="10" size="1" name="LCK10" description="Port x lock bit y (y= 0..15)" />
      <BitField start="11" size="1" name="LCK11" description="Port x lock bit y (y= 0..15)" />
      <BitField start="12" size="1" name="LCK12" description="Port x lock bit y (y= 0..15)" />
      <BitField start="13" size="1" name="LCK13" description="Port x lock bit y (y= 0..15)" />
      <BitField start="14" size="1" name="LCK14" description="Port x lock bit y (y= 0..15)" />
      <BitField start="15" size="1" name="LCK15" description="Port x lock bit y (y= 0..15)" />
      <BitField start="16" size="1" name="LCKK" description="Port x lock bit y (y= 0..15)" />
    </Register>
    <Register start="+0x20" size="0" name="AFRL" access="Read/Write" description="GPIO alternate function low register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL0" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="4" size="4" name="AFSEL1" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="8" size="4" name="AFSEL2" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="12" size="4" name="AFSEL3" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="16" size="4" name="AFSEL4" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="20" size="4" name="AFSEL5" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="24" size="4" name="AFSEL6" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="28" size="4" name="AFSEL7" description="Alternate function selection for port x bit y (y = 0..7)" />
    </Register>
    <Register start="+0x24" size="0" name="AFRH" access="Read/Write" description="GPIO alternate function high register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL8" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="4" size="4" name="AFSEL9" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="8" size="4" name="AFSEL10" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="12" size="4" name="AFSEL11" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="16" size="4" name="AFSEL12" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="20" size="4" name="AFSEL13" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="24" size="4" name="AFSEL14" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="28" size="4" name="AFSEL15" description="Alternate function selection for port x bit y (y = 8..15)" />
    </Register>
    <Register start="+0x28" size="0" name="BRR" access="WriteOnly" description="port bit reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BR0" description="Port Reset bit" />
      <BitField start="1" size="1" name="BR1" description="Port Reset bit" />
      <BitField start="2" size="1" name="BR2" description="Port Reset bit" />
      <BitField start="3" size="1" name="BR3" description="Port Reset bit" />
      <BitField start="4" size="1" name="BR4" description="Port Reset bit" />
      <BitField start="5" size="1" name="BR5" description="Port Reset bit" />
      <BitField start="6" size="1" name="BR6" description="Port Reset bit" />
      <BitField start="7" size="1" name="BR7" description="Port Reset bit" />
      <BitField start="8" size="1" name="BR8" description="Port Reset bit" />
      <BitField start="9" size="1" name="BR9" description="Port Reset bit" />
      <BitField start="10" size="1" name="BR10" description="Port Reset bit" />
      <BitField start="11" size="1" name="BR11" description="Port Reset bit" />
      <BitField start="12" size="1" name="BR12" description="Port Reset bit" />
      <BitField start="13" size="1" name="BR13" description="Port Reset bit" />
      <BitField start="14" size="1" name="BR14" description="Port Reset bit" />
      <BitField start="15" size="1" name="BR15" description="Port Reset bit" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="GPIOC" start="0x50000800" description="General-purpose I/Os">
    <Register start="+0x0" size="0" name="MODER" access="Read/Write" description="GPIO port mode register" reset_value="0xFFFFFFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="MODER0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="MODER1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="MODER2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="MODER3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="MODER4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="MODER5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="MODER6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="MODER7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="MODER8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="MODER9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="MODER10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="MODER11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="MODER12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="MODER13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="MODER14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="MODER15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x4" size="0" name="OTYPER" access="Read/Write" description="GPIO port output type register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OT0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="1" size="1" name="OT1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="1" name="OT2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="3" size="1" name="OT3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="1" name="OT4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="5" size="1" name="OT5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="1" name="OT6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="7" size="1" name="OT7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="1" name="OT8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="9" size="1" name="OT9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="1" name="OT10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="11" size="1" name="OT11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="1" name="OT12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="13" size="1" name="OT13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="1" name="OT14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="15" size="1" name="OT15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x8" size="0" name="OSPEEDR" access="Read/Write" description="GPIO port output speed register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="OSPEEDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="OSPEEDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="OSPEEDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="OSPEEDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="OSPEEDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="OSPEEDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="OSPEEDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="OSPEEDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="OSPEEDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="OSPEEDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="OSPEEDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="OSPEEDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="OSPEEDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="OSPEEDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="OSPEEDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="OSPEEDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0xC" size="0" name="PUPDR" access="Read/Write" description="GPIO port pull-up/pull-down register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="PUPDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="PUPDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="PUPDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="PUPDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="PUPDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="PUPDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="PUPDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="PUPDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="PUPDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="PUPDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="PUPDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="PUPDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="PUPDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="PUPDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="PUPDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="PUPDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x10" size="0" name="IDR" access="ReadOnly" description="GPIO port input data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="IDR0" description="Port input data (y = 0..15)" />
      <BitField start="1" size="1" name="IDR1" description="Port input data (y = 0..15)" />
      <BitField start="2" size="1" name="IDR2" description="Port input data (y = 0..15)" />
      <BitField start="3" size="1" name="IDR3" description="Port input data (y = 0..15)" />
      <BitField start="4" size="1" name="IDR4" description="Port input data (y = 0..15)" />
      <BitField start="5" size="1" name="IDR5" description="Port input data (y = 0..15)" />
      <BitField start="6" size="1" name="IDR6" description="Port input data (y = 0..15)" />
      <BitField start="7" size="1" name="IDR7" description="Port input data (y = 0..15)" />
      <BitField start="8" size="1" name="IDR8" description="Port input data (y = 0..15)" />
      <BitField start="9" size="1" name="IDR9" description="Port input data (y = 0..15)" />
      <BitField start="10" size="1" name="IDR10" description="Port input data (y = 0..15)" />
      <BitField start="11" size="1" name="IDR11" description="Port input data (y = 0..15)" />
      <BitField start="12" size="1" name="IDR12" description="Port input data (y = 0..15)" />
      <BitField start="13" size="1" name="IDR13" description="Port input data (y = 0..15)" />
      <BitField start="14" size="1" name="IDR14" description="Port input data (y = 0..15)" />
      <BitField start="15" size="1" name="IDR15" description="Port input data (y = 0..15)" />
    </Register>
    <Register start="+0x14" size="0" name="ODR" access="Read/Write" description="GPIO port output data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ODR0" description="Port output data (y = 0..15)" />
      <BitField start="1" size="1" name="ODR1" description="Port output data (y = 0..15)" />
      <BitField start="2" size="1" name="ODR2" description="Port output data (y = 0..15)" />
      <BitField start="3" size="1" name="ODR3" description="Port output data (y = 0..15)" />
      <BitField start="4" size="1" name="ODR4" description="Port output data (y = 0..15)" />
      <BitField start="5" size="1" name="ODR5" description="Port output data (y = 0..15)" />
      <BitField start="6" size="1" name="ODR6" description="Port output data (y = 0..15)" />
      <BitField start="7" size="1" name="ODR7" description="Port output data (y = 0..15)" />
      <BitField start="8" size="1" name="ODR8" description="Port output data (y = 0..15)" />
      <BitField start="9" size="1" name="ODR9" description="Port output data (y = 0..15)" />
      <BitField start="10" size="1" name="ODR10" description="Port output data (y = 0..15)" />
      <BitField start="11" size="1" name="ODR11" description="Port output data (y = 0..15)" />
      <BitField start="12" size="1" name="ODR12" description="Port output data (y = 0..15)" />
      <BitField start="13" size="1" name="ODR13" description="Port output data (y = 0..15)" />
      <BitField start="14" size="1" name="ODR14" description="Port output data (y = 0..15)" />
      <BitField start="15" size="1" name="ODR15" description="Port output data (y = 0..15)" />
    </Register>
    <Register start="+0x18" size="0" name="BSRR" access="WriteOnly" description="GPIO port bit set/reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BS0" description="Port x set bit y (y= 0..15)" />
      <BitField start="1" size="1" name="BS1" description="Port x set bit y (y= 0..15)" />
      <BitField start="2" size="1" name="BS2" description="Port x set bit y (y= 0..15)" />
      <BitField start="3" size="1" name="BS3" description="Port x set bit y (y= 0..15)" />
      <BitField start="4" size="1" name="BS4" description="Port x set bit y (y= 0..15)" />
      <BitField start="5" size="1" name="BS5" description="Port x set bit y (y= 0..15)" />
      <BitField start="6" size="1" name="BS6" description="Port x set bit y (y= 0..15)" />
      <BitField start="7" size="1" name="BS7" description="Port x set bit y (y= 0..15)" />
      <BitField start="8" size="1" name="BS8" description="Port x set bit y (y= 0..15)" />
      <BitField start="9" size="1" name="BS9" description="Port x set bit y (y= 0..15)" />
      <BitField start="10" size="1" name="BS10" description="Port x set bit y (y= 0..15)" />
      <BitField start="11" size="1" name="BS11" description="Port x set bit y (y= 0..15)" />
      <BitField start="12" size="1" name="BS12" description="Port x set bit y (y= 0..15)" />
      <BitField start="13" size="1" name="BS13" description="Port x set bit y (y= 0..15)" />
      <BitField start="14" size="1" name="BS14" description="Port x set bit y (y= 0..15)" />
      <BitField start="15" size="1" name="BS15" description="Port x set bit y (y= 0..15)" />
      <BitField start="16" size="1" name="BR0" description="Port x set bit y (y= 0..15)" />
      <BitField start="17" size="1" name="BR1" description="Port x reset bit y (y = 0..15)" />
      <BitField start="18" size="1" name="BR2" description="Port x reset bit y (y = 0..15)" />
      <BitField start="19" size="1" name="BR3" description="Port x reset bit y (y = 0..15)" />
      <BitField start="20" size="1" name="BR4" description="Port x reset bit y (y = 0..15)" />
      <BitField start="21" size="1" name="BR5" description="Port x reset bit y (y = 0..15)" />
      <BitField start="22" size="1" name="BR6" description="Port x reset bit y (y = 0..15)" />
      <BitField start="23" size="1" name="BR7" description="Port x reset bit y (y = 0..15)" />
      <BitField start="24" size="1" name="BR8" description="Port x reset bit y (y = 0..15)" />
      <BitField start="25" size="1" name="BR9" description="Port x reset bit y (y = 0..15)" />
      <BitField start="26" size="1" name="BR10" description="Port x reset bit y (y = 0..15)" />
      <BitField start="27" size="1" name="BR11" description="Port x reset bit y (y = 0..15)" />
      <BitField start="28" size="1" name="BR12" description="Port x reset bit y (y = 0..15)" />
      <BitField start="29" size="1" name="BR13" description="Port x reset bit y (y = 0..15)" />
      <BitField start="30" size="1" name="BR14" description="Port x reset bit y (y = 0..15)" />
      <BitField start="31" size="1" name="BR15" description="Port x reset bit y (y = 0..15)" />
    </Register>
    <Register start="+0x1C" size="0" name="LCKR" access="Read/Write" description="GPIO port configuration lock register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LCK0" description="Port x lock bit y (y= 0..15)" />
      <BitField start="1" size="1" name="LCK1" description="Port x lock bit y (y= 0..15)" />
      <BitField start="2" size="1" name="LCK2" description="Port x lock bit y (y= 0..15)" />
      <BitField start="3" size="1" name="LCK3" description="Port x lock bit y (y= 0..15)" />
      <BitField start="4" size="1" name="LCK4" description="Port x lock bit y (y= 0..15)" />
      <BitField start="5" size="1" name="LCK5" description="Port x lock bit y (y= 0..15)" />
      <BitField start="6" size="1" name="LCK6" description="Port x lock bit y (y= 0..15)" />
      <BitField start="7" size="1" name="LCK7" description="Port x lock bit y (y= 0..15)" />
      <BitField start="8" size="1" name="LCK8" description="Port x lock bit y (y= 0..15)" />
      <BitField start="9" size="1" name="LCK9" description="Port x lock bit y (y= 0..15)" />
      <BitField start="10" size="1" name="LCK10" description="Port x lock bit y (y= 0..15)" />
      <BitField start="11" size="1" name="LCK11" description="Port x lock bit y (y= 0..15)" />
      <BitField start="12" size="1" name="LCK12" description="Port x lock bit y (y= 0..15)" />
      <BitField start="13" size="1" name="LCK13" description="Port x lock bit y (y= 0..15)" />
      <BitField start="14" size="1" name="LCK14" description="Port x lock bit y (y= 0..15)" />
      <BitField start="15" size="1" name="LCK15" description="Port x lock bit y (y= 0..15)" />
      <BitField start="16" size="1" name="LCKK" description="Port x lock bit y (y= 0..15)" />
    </Register>
    <Register start="+0x20" size="0" name="AFRL" access="Read/Write" description="GPIO alternate function low register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL0" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="4" size="4" name="AFSEL1" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="8" size="4" name="AFSEL2" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="12" size="4" name="AFSEL3" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="16" size="4" name="AFSEL4" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="20" size="4" name="AFSEL5" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="24" size="4" name="AFSEL6" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="28" size="4" name="AFSEL7" description="Alternate function selection for port x bit y (y = 0..7)" />
    </Register>
    <Register start="+0x24" size="0" name="AFRH" access="Read/Write" description="GPIO alternate function high register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL8" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="4" size="4" name="AFSEL9" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="8" size="4" name="AFSEL10" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="12" size="4" name="AFSEL11" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="16" size="4" name="AFSEL12" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="20" size="4" name="AFSEL13" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="24" size="4" name="AFSEL14" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="28" size="4" name="AFSEL15" description="Alternate function selection for port x bit y (y = 8..15)" />
    </Register>
    <Register start="+0x28" size="0" name="BRR" access="WriteOnly" description="port bit reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BR0" description="Port Reset bit" />
      <BitField start="1" size="1" name="BR1" description="Port Reset bit" />
      <BitField start="2" size="1" name="BR2" description="Port Reset bit" />
      <BitField start="3" size="1" name="BR3" description="Port Reset bit" />
      <BitField start="4" size="1" name="BR4" description="Port Reset bit" />
      <BitField start="5" size="1" name="BR5" description="Port Reset bit" />
      <BitField start="6" size="1" name="BR6" description="Port Reset bit" />
      <BitField start="7" size="1" name="BR7" description="Port Reset bit" />
      <BitField start="8" size="1" name="BR8" description="Port Reset bit" />
      <BitField start="9" size="1" name="BR9" description="Port Reset bit" />
      <BitField start="10" size="1" name="BR10" description="Port Reset bit" />
      <BitField start="11" size="1" name="BR11" description="Port Reset bit" />
      <BitField start="12" size="1" name="BR12" description="Port Reset bit" />
      <BitField start="13" size="1" name="BR13" description="Port Reset bit" />
      <BitField start="14" size="1" name="BR14" description="Port Reset bit" />
      <BitField start="15" size="1" name="BR15" description="Port Reset bit" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="GPIOD" start="0x50000C00" description="General-purpose I/Os">
    <Register start="+0x0" size="0" name="MODER" access="Read/Write" description="GPIO port mode register" reset_value="0xFFFFFFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="MODER0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="MODER1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="MODER2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="MODER3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="MODER4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="MODER5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="MODER6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="MODER7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="MODER8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="MODER9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="MODER10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="MODER11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="MODER12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="MODER13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="MODER14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="MODER15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x4" size="0" name="OTYPER" access="Read/Write" description="GPIO port output type register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OT0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="1" size="1" name="OT1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="1" name="OT2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="3" size="1" name="OT3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="1" name="OT4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="5" size="1" name="OT5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="1" name="OT6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="7" size="1" name="OT7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="1" name="OT8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="9" size="1" name="OT9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="1" name="OT10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="11" size="1" name="OT11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="1" name="OT12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="13" size="1" name="OT13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="1" name="OT14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="15" size="1" name="OT15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x8" size="0" name="OSPEEDR" access="Read/Write" description="GPIO port output speed register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="OSPEEDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="OSPEEDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="OSPEEDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="OSPEEDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="OSPEEDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="OSPEEDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="OSPEEDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="OSPEEDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="OSPEEDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="OSPEEDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="OSPEEDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="OSPEEDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="OSPEEDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="OSPEEDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="OSPEEDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="OSPEEDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0xC" size="0" name="PUPDR" access="Read/Write" description="GPIO port pull-up/pull-down register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="PUPDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="PUPDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="PUPDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="PUPDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="PUPDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="PUPDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="PUPDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="PUPDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="PUPDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="PUPDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="PUPDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="PUPDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="PUPDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="PUPDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="PUPDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="PUPDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x10" size="0" name="IDR" access="ReadOnly" description="GPIO port input data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="IDR0" description="Port input data (y = 0..15)" />
      <BitField start="1" size="1" name="IDR1" description="Port input data (y = 0..15)" />
      <BitField start="2" size="1" name="IDR2" description="Port input data (y = 0..15)" />
      <BitField start="3" size="1" name="IDR3" description="Port input data (y = 0..15)" />
      <BitField start="4" size="1" name="IDR4" description="Port input data (y = 0..15)" />
      <BitField start="5" size="1" name="IDR5" description="Port input data (y = 0..15)" />
      <BitField start="6" size="1" name="IDR6" description="Port input data (y = 0..15)" />
      <BitField start="7" size="1" name="IDR7" description="Port input data (y = 0..15)" />
      <BitField start="8" size="1" name="IDR8" description="Port input data (y = 0..15)" />
      <BitField start="9" size="1" name="IDR9" description="Port input data (y = 0..15)" />
      <BitField start="10" size="1" name="IDR10" description="Port input data (y = 0..15)" />
      <BitField start="11" size="1" name="IDR11" description="Port input data (y = 0..15)" />
      <BitField start="12" size="1" name="IDR12" description="Port input data (y = 0..15)" />
      <BitField start="13" size="1" name="IDR13" description="Port input data (y = 0..15)" />
      <BitField start="14" size="1" name="IDR14" description="Port input data (y = 0..15)" />
      <BitField start="15" size="1" name="IDR15" description="Port input data (y = 0..15)" />
    </Register>
    <Register start="+0x14" size="0" name="ODR" access="Read/Write" description="GPIO port output data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ODR0" description="Port output data (y = 0..15)" />
      <BitField start="1" size="1" name="ODR1" description="Port output data (y = 0..15)" />
      <BitField start="2" size="1" name="ODR2" description="Port output data (y = 0..15)" />
      <BitField start="3" size="1" name="ODR3" description="Port output data (y = 0..15)" />
      <BitField start="4" size="1" name="ODR4" description="Port output data (y = 0..15)" />
      <BitField start="5" size="1" name="ODR5" description="Port output data (y = 0..15)" />
      <BitField start="6" size="1" name="ODR6" description="Port output data (y = 0..15)" />
      <BitField start="7" size="1" name="ODR7" description="Port output data (y = 0..15)" />
      <BitField start="8" size="1" name="ODR8" description="Port output data (y = 0..15)" />
      <BitField start="9" size="1" name="ODR9" description="Port output data (y = 0..15)" />
      <BitField start="10" size="1" name="ODR10" description="Port output data (y = 0..15)" />
      <BitField start="11" size="1" name="ODR11" description="Port output data (y = 0..15)" />
      <BitField start="12" size="1" name="ODR12" description="Port output data (y = 0..15)" />
      <BitField start="13" size="1" name="ODR13" description="Port output data (y = 0..15)" />
      <BitField start="14" size="1" name="ODR14" description="Port output data (y = 0..15)" />
      <BitField start="15" size="1" name="ODR15" description="Port output data (y = 0..15)" />
    </Register>
    <Register start="+0x18" size="0" name="BSRR" access="WriteOnly" description="GPIO port bit set/reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BS0" description="Port x set bit y (y= 0..15)" />
      <BitField start="1" size="1" name="BS1" description="Port x set bit y (y= 0..15)" />
      <BitField start="2" size="1" name="BS2" description="Port x set bit y (y= 0..15)" />
      <BitField start="3" size="1" name="BS3" description="Port x set bit y (y= 0..15)" />
      <BitField start="4" size="1" name="BS4" description="Port x set bit y (y= 0..15)" />
      <BitField start="5" size="1" name="BS5" description="Port x set bit y (y= 0..15)" />
      <BitField start="6" size="1" name="BS6" description="Port x set bit y (y= 0..15)" />
      <BitField start="7" size="1" name="BS7" description="Port x set bit y (y= 0..15)" />
      <BitField start="8" size="1" name="BS8" description="Port x set bit y (y= 0..15)" />
      <BitField start="9" size="1" name="BS9" description="Port x set bit y (y= 0..15)" />
      <BitField start="10" size="1" name="BS10" description="Port x set bit y (y= 0..15)" />
      <BitField start="11" size="1" name="BS11" description="Port x set bit y (y= 0..15)" />
      <BitField start="12" size="1" name="BS12" description="Port x set bit y (y= 0..15)" />
      <BitField start="13" size="1" name="BS13" description="Port x set bit y (y= 0..15)" />
      <BitField start="14" size="1" name="BS14" description="Port x set bit y (y= 0..15)" />
      <BitField start="15" size="1" name="BS15" description="Port x set bit y (y= 0..15)" />
      <BitField start="16" size="1" name="BR0" description="Port x set bit y (y= 0..15)" />
      <BitField start="17" size="1" name="BR1" description="Port x reset bit y (y = 0..15)" />
      <BitField start="18" size="1" name="BR2" description="Port x reset bit y (y = 0..15)" />
      <BitField start="19" size="1" name="BR3" description="Port x reset bit y (y = 0..15)" />
      <BitField start="20" size="1" name="BR4" description="Port x reset bit y (y = 0..15)" />
      <BitField start="21" size="1" name="BR5" description="Port x reset bit y (y = 0..15)" />
      <BitField start="22" size="1" name="BR6" description="Port x reset bit y (y = 0..15)" />
      <BitField start="23" size="1" name="BR7" description="Port x reset bit y (y = 0..15)" />
      <BitField start="24" size="1" name="BR8" description="Port x reset bit y (y = 0..15)" />
      <BitField start="25" size="1" name="BR9" description="Port x reset bit y (y = 0..15)" />
      <BitField start="26" size="1" name="BR10" description="Port x reset bit y (y = 0..15)" />
      <BitField start="27" size="1" name="BR11" description="Port x reset bit y (y = 0..15)" />
      <BitField start="28" size="1" name="BR12" description="Port x reset bit y (y = 0..15)" />
      <BitField start="29" size="1" name="BR13" description="Port x reset bit y (y = 0..15)" />
      <BitField start="30" size="1" name="BR14" description="Port x reset bit y (y = 0..15)" />
      <BitField start="31" size="1" name="BR15" description="Port x reset bit y (y = 0..15)" />
    </Register>
    <Register start="+0x1C" size="0" name="LCKR" access="Read/Write" description="GPIO port configuration lock register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LCK0" description="Port x lock bit y (y= 0..15)" />
      <BitField start="1" size="1" name="LCK1" description="Port x lock bit y (y= 0..15)" />
      <BitField start="2" size="1" name="LCK2" description="Port x lock bit y (y= 0..15)" />
      <BitField start="3" size="1" name="LCK3" description="Port x lock bit y (y= 0..15)" />
      <BitField start="4" size="1" name="LCK4" description="Port x lock bit y (y= 0..15)" />
      <BitField start="5" size="1" name="LCK5" description="Port x lock bit y (y= 0..15)" />
      <BitField start="6" size="1" name="LCK6" description="Port x lock bit y (y= 0..15)" />
      <BitField start="7" size="1" name="LCK7" description="Port x lock bit y (y= 0..15)" />
      <BitField start="8" size="1" name="LCK8" description="Port x lock bit y (y= 0..15)" />
      <BitField start="9" size="1" name="LCK9" description="Port x lock bit y (y= 0..15)" />
      <BitField start="10" size="1" name="LCK10" description="Port x lock bit y (y= 0..15)" />
      <BitField start="11" size="1" name="LCK11" description="Port x lock bit y (y= 0..15)" />
      <BitField start="12" size="1" name="LCK12" description="Port x lock bit y (y= 0..15)" />
      <BitField start="13" size="1" name="LCK13" description="Port x lock bit y (y= 0..15)" />
      <BitField start="14" size="1" name="LCK14" description="Port x lock bit y (y= 0..15)" />
      <BitField start="15" size="1" name="LCK15" description="Port x lock bit y (y= 0..15)" />
      <BitField start="16" size="1" name="LCKK" description="Port x lock bit y (y= 0..15)" />
    </Register>
    <Register start="+0x20" size="0" name="AFRL" access="Read/Write" description="GPIO alternate function low register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL0" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="4" size="4" name="AFSEL1" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="8" size="4" name="AFSEL2" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="12" size="4" name="AFSEL3" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="16" size="4" name="AFSEL4" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="20" size="4" name="AFSEL5" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="24" size="4" name="AFSEL6" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="28" size="4" name="AFSEL7" description="Alternate function selection for port x bit y (y = 0..7)" />
    </Register>
    <Register start="+0x24" size="0" name="AFRH" access="Read/Write" description="GPIO alternate function high register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL8" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="4" size="4" name="AFSEL9" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="8" size="4" name="AFSEL10" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="12" size="4" name="AFSEL11" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="16" size="4" name="AFSEL12" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="20" size="4" name="AFSEL13" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="24" size="4" name="AFSEL14" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="28" size="4" name="AFSEL15" description="Alternate function selection for port x bit y (y = 8..15)" />
    </Register>
    <Register start="+0x28" size="0" name="BRR" access="WriteOnly" description="port bit reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BR0" description="Port Reset bit" />
      <BitField start="1" size="1" name="BR1" description="Port Reset bit" />
      <BitField start="2" size="1" name="BR2" description="Port Reset bit" />
      <BitField start="3" size="1" name="BR3" description="Port Reset bit" />
      <BitField start="4" size="1" name="BR4" description="Port Reset bit" />
      <BitField start="5" size="1" name="BR5" description="Port Reset bit" />
      <BitField start="6" size="1" name="BR6" description="Port Reset bit" />
      <BitField start="7" size="1" name="BR7" description="Port Reset bit" />
      <BitField start="8" size="1" name="BR8" description="Port Reset bit" />
      <BitField start="9" size="1" name="BR9" description="Port Reset bit" />
      <BitField start="10" size="1" name="BR10" description="Port Reset bit" />
      <BitField start="11" size="1" name="BR11" description="Port Reset bit" />
      <BitField start="12" size="1" name="BR12" description="Port Reset bit" />
      <BitField start="13" size="1" name="BR13" description="Port Reset bit" />
      <BitField start="14" size="1" name="BR14" description="Port Reset bit" />
      <BitField start="15" size="1" name="BR15" description="Port Reset bit" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="GPIOE" start="0x50001000" description="General-purpose I/Os">
    <Register start="+0x0" size="0" name="MODER" access="Read/Write" description="GPIO port mode register" reset_value="0xFFFFFFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="MODER0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="MODER1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="MODER2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="MODER3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="MODER4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="MODER5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="MODER6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="MODER7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="MODER8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="MODER9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="MODER10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="MODER11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="MODER12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="MODER13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="MODER14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="MODER15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x4" size="0" name="OTYPER" access="Read/Write" description="GPIO port output type register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OT0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="1" size="1" name="OT1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="1" name="OT2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="3" size="1" name="OT3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="1" name="OT4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="5" size="1" name="OT5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="1" name="OT6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="7" size="1" name="OT7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="1" name="OT8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="9" size="1" name="OT9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="1" name="OT10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="11" size="1" name="OT11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="1" name="OT12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="13" size="1" name="OT13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="1" name="OT14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="15" size="1" name="OT15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x8" size="0" name="OSPEEDR" access="Read/Write" description="GPIO port output speed register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="OSPEEDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="OSPEEDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="OSPEEDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="OSPEEDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="OSPEEDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="OSPEEDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="OSPEEDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="OSPEEDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="OSPEEDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="OSPEEDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="OSPEEDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="OSPEEDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="OSPEEDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="OSPEEDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="OSPEEDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="OSPEEDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0xC" size="0" name="PUPDR" access="Read/Write" description="GPIO port pull-up/pull-down register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="PUPDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="PUPDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="PUPDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="PUPDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="PUPDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="PUPDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="PUPDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="PUPDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="PUPDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="PUPDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="PUPDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="PUPDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="PUPDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="PUPDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="PUPDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="PUPDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x10" size="0" name="IDR" access="ReadOnly" description="GPIO port input data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="IDR0" description="Port input data (y = 0..15)" />
      <BitField start="1" size="1" name="IDR1" description="Port input data (y = 0..15)" />
      <BitField start="2" size="1" name="IDR2" description="Port input data (y = 0..15)" />
      <BitField start="3" size="1" name="IDR3" description="Port input data (y = 0..15)" />
      <BitField start="4" size="1" name="IDR4" description="Port input data (y = 0..15)" />
      <BitField start="5" size="1" name="IDR5" description="Port input data (y = 0..15)" />
      <BitField start="6" size="1" name="IDR6" description="Port input data (y = 0..15)" />
      <BitField start="7" size="1" name="IDR7" description="Port input data (y = 0..15)" />
      <BitField start="8" size="1" name="IDR8" description="Port input data (y = 0..15)" />
      <BitField start="9" size="1" name="IDR9" description="Port input data (y = 0..15)" />
      <BitField start="10" size="1" name="IDR10" description="Port input data (y = 0..15)" />
      <BitField start="11" size="1" name="IDR11" description="Port input data (y = 0..15)" />
      <BitField start="12" size="1" name="IDR12" description="Port input data (y = 0..15)" />
      <BitField start="13" size="1" name="IDR13" description="Port input data (y = 0..15)" />
      <BitField start="14" size="1" name="IDR14" description="Port input data (y = 0..15)" />
      <BitField start="15" size="1" name="IDR15" description="Port input data (y = 0..15)" />
    </Register>
    <Register start="+0x14" size="0" name="ODR" access="Read/Write" description="GPIO port output data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ODR0" description="Port output data (y = 0..15)" />
      <BitField start="1" size="1" name="ODR1" description="Port output data (y = 0..15)" />
      <BitField start="2" size="1" name="ODR2" description="Port output data (y = 0..15)" />
      <BitField start="3" size="1" name="ODR3" description="Port output data (y = 0..15)" />
      <BitField start="4" size="1" name="ODR4" description="Port output data (y = 0..15)" />
      <BitField start="5" size="1" name="ODR5" description="Port output data (y = 0..15)" />
      <BitField start="6" size="1" name="ODR6" description="Port output data (y = 0..15)" />
      <BitField start="7" size="1" name="ODR7" description="Port output data (y = 0..15)" />
      <BitField start="8" size="1" name="ODR8" description="Port output data (y = 0..15)" />
      <BitField start="9" size="1" name="ODR9" description="Port output data (y = 0..15)" />
      <BitField start="10" size="1" name="ODR10" description="Port output data (y = 0..15)" />
      <BitField start="11" size="1" name="ODR11" description="Port output data (y = 0..15)" />
      <BitField start="12" size="1" name="ODR12" description="Port output data (y = 0..15)" />
      <BitField start="13" size="1" name="ODR13" description="Port output data (y = 0..15)" />
      <BitField start="14" size="1" name="ODR14" description="Port output data (y = 0..15)" />
      <BitField start="15" size="1" name="ODR15" description="Port output data (y = 0..15)" />
    </Register>
    <Register start="+0x18" size="0" name="BSRR" access="WriteOnly" description="GPIO port bit set/reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BS0" description="Port x set bit y (y= 0..15)" />
      <BitField start="1" size="1" name="BS1" description="Port x set bit y (y= 0..15)" />
      <BitField start="2" size="1" name="BS2" description="Port x set bit y (y= 0..15)" />
      <BitField start="3" size="1" name="BS3" description="Port x set bit y (y= 0..15)" />
      <BitField start="4" size="1" name="BS4" description="Port x set bit y (y= 0..15)" />
      <BitField start="5" size="1" name="BS5" description="Port x set bit y (y= 0..15)" />
      <BitField start="6" size="1" name="BS6" description="Port x set bit y (y= 0..15)" />
      <BitField start="7" size="1" name="BS7" description="Port x set bit y (y= 0..15)" />
      <BitField start="8" size="1" name="BS8" description="Port x set bit y (y= 0..15)" />
      <BitField start="9" size="1" name="BS9" description="Port x set bit y (y= 0..15)" />
      <BitField start="10" size="1" name="BS10" description="Port x set bit y (y= 0..15)" />
      <BitField start="11" size="1" name="BS11" description="Port x set bit y (y= 0..15)" />
      <BitField start="12" size="1" name="BS12" description="Port x set bit y (y= 0..15)" />
      <BitField start="13" size="1" name="BS13" description="Port x set bit y (y= 0..15)" />
      <BitField start="14" size="1" name="BS14" description="Port x set bit y (y= 0..15)" />
      <BitField start="15" size="1" name="BS15" description="Port x set bit y (y= 0..15)" />
      <BitField start="16" size="1" name="BR0" description="Port x set bit y (y= 0..15)" />
      <BitField start="17" size="1" name="BR1" description="Port x reset bit y (y = 0..15)" />
      <BitField start="18" size="1" name="BR2" description="Port x reset bit y (y = 0..15)" />
      <BitField start="19" size="1" name="BR3" description="Port x reset bit y (y = 0..15)" />
      <BitField start="20" size="1" name="BR4" description="Port x reset bit y (y = 0..15)" />
      <BitField start="21" size="1" name="BR5" description="Port x reset bit y (y = 0..15)" />
      <BitField start="22" size="1" name="BR6" description="Port x reset bit y (y = 0..15)" />
      <BitField start="23" size="1" name="BR7" description="Port x reset bit y (y = 0..15)" />
      <BitField start="24" size="1" name="BR8" description="Port x reset bit y (y = 0..15)" />
      <BitField start="25" size="1" name="BR9" description="Port x reset bit y (y = 0..15)" />
      <BitField start="26" size="1" name="BR10" description="Port x reset bit y (y = 0..15)" />
      <BitField start="27" size="1" name="BR11" description="Port x reset bit y (y = 0..15)" />
      <BitField start="28" size="1" name="BR12" description="Port x reset bit y (y = 0..15)" />
      <BitField start="29" size="1" name="BR13" description="Port x reset bit y (y = 0..15)" />
      <BitField start="30" size="1" name="BR14" description="Port x reset bit y (y = 0..15)" />
      <BitField start="31" size="1" name="BR15" description="Port x reset bit y (y = 0..15)" />
    </Register>
    <Register start="+0x1C" size="0" name="LCKR" access="Read/Write" description="GPIO port configuration lock register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LCK0" description="Port x lock bit y (y= 0..15)" />
      <BitField start="1" size="1" name="LCK1" description="Port x lock bit y (y= 0..15)" />
      <BitField start="2" size="1" name="LCK2" description="Port x lock bit y (y= 0..15)" />
      <BitField start="3" size="1" name="LCK3" description="Port x lock bit y (y= 0..15)" />
      <BitField start="4" size="1" name="LCK4" description="Port x lock bit y (y= 0..15)" />
      <BitField start="5" size="1" name="LCK5" description="Port x lock bit y (y= 0..15)" />
      <BitField start="6" size="1" name="LCK6" description="Port x lock bit y (y= 0..15)" />
      <BitField start="7" size="1" name="LCK7" description="Port x lock bit y (y= 0..15)" />
      <BitField start="8" size="1" name="LCK8" description="Port x lock bit y (y= 0..15)" />
      <BitField start="9" size="1" name="LCK9" description="Port x lock bit y (y= 0..15)" />
      <BitField start="10" size="1" name="LCK10" description="Port x lock bit y (y= 0..15)" />
      <BitField start="11" size="1" name="LCK11" description="Port x lock bit y (y= 0..15)" />
      <BitField start="12" size="1" name="LCK12" description="Port x lock bit y (y= 0..15)" />
      <BitField start="13" size="1" name="LCK13" description="Port x lock bit y (y= 0..15)" />
      <BitField start="14" size="1" name="LCK14" description="Port x lock bit y (y= 0..15)" />
      <BitField start="15" size="1" name="LCK15" description="Port x lock bit y (y= 0..15)" />
      <BitField start="16" size="1" name="LCKK" description="Port x lock bit y (y= 0..15)" />
    </Register>
    <Register start="+0x20" size="0" name="AFRL" access="Read/Write" description="GPIO alternate function low register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL0" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="4" size="4" name="AFSEL1" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="8" size="4" name="AFSEL2" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="12" size="4" name="AFSEL3" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="16" size="4" name="AFSEL4" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="20" size="4" name="AFSEL5" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="24" size="4" name="AFSEL6" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="28" size="4" name="AFSEL7" description="Alternate function selection for port x bit y (y = 0..7)" />
    </Register>
    <Register start="+0x24" size="0" name="AFRH" access="Read/Write" description="GPIO alternate function high register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL8" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="4" size="4" name="AFSEL9" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="8" size="4" name="AFSEL10" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="12" size="4" name="AFSEL11" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="16" size="4" name="AFSEL12" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="20" size="4" name="AFSEL13" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="24" size="4" name="AFSEL14" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="28" size="4" name="AFSEL15" description="Alternate function selection for port x bit y (y = 8..15)" />
    </Register>
    <Register start="+0x28" size="0" name="BRR" access="WriteOnly" description="port bit reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BR0" description="Port Reset bit" />
      <BitField start="1" size="1" name="BR1" description="Port Reset bit" />
      <BitField start="2" size="1" name="BR2" description="Port Reset bit" />
      <BitField start="3" size="1" name="BR3" description="Port Reset bit" />
      <BitField start="4" size="1" name="BR4" description="Port Reset bit" />
      <BitField start="5" size="1" name="BR5" description="Port Reset bit" />
      <BitField start="6" size="1" name="BR6" description="Port Reset bit" />
      <BitField start="7" size="1" name="BR7" description="Port Reset bit" />
      <BitField start="8" size="1" name="BR8" description="Port Reset bit" />
      <BitField start="9" size="1" name="BR9" description="Port Reset bit" />
      <BitField start="10" size="1" name="BR10" description="Port Reset bit" />
      <BitField start="11" size="1" name="BR11" description="Port Reset bit" />
      <BitField start="12" size="1" name="BR12" description="Port Reset bit" />
      <BitField start="13" size="1" name="BR13" description="Port Reset bit" />
      <BitField start="14" size="1" name="BR14" description="Port Reset bit" />
      <BitField start="15" size="1" name="BR15" description="Port Reset bit" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="GPIOF" start="0x50001400" description="General-purpose I/Os">
    <Register start="+0x0" size="0" name="MODER" access="Read/Write" description="GPIO port mode register" reset_value="0xFFFFFFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="MODER0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="MODER1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="MODER2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="MODER3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="MODER4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="MODER5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="MODER6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="MODER7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="MODER8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="MODER9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="MODER10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="MODER11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="MODER12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="MODER13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="MODER14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="MODER15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x4" size="0" name="OTYPER" access="Read/Write" description="GPIO port output type register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OT0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="1" size="1" name="OT1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="1" name="OT2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="3" size="1" name="OT3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="1" name="OT4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="5" size="1" name="OT5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="1" name="OT6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="7" size="1" name="OT7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="1" name="OT8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="9" size="1" name="OT9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="1" name="OT10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="11" size="1" name="OT11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="1" name="OT12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="13" size="1" name="OT13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="1" name="OT14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="15" size="1" name="OT15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x8" size="0" name="OSPEEDR" access="Read/Write" description="GPIO port output speed register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="OSPEEDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="OSPEEDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="OSPEEDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="OSPEEDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="OSPEEDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="OSPEEDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="OSPEEDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="OSPEEDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="OSPEEDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="OSPEEDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="OSPEEDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="OSPEEDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="OSPEEDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="OSPEEDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="OSPEEDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="OSPEEDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0xC" size="0" name="PUPDR" access="Read/Write" description="GPIO port pull-up/pull-down register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="PUPDR0" description="Port x configuration bits (y = 0..15)" />
      <BitField start="2" size="2" name="PUPDR1" description="Port x configuration bits (y = 0..15)" />
      <BitField start="4" size="2" name="PUPDR2" description="Port x configuration bits (y = 0..15)" />
      <BitField start="6" size="2" name="PUPDR3" description="Port x configuration bits (y = 0..15)" />
      <BitField start="8" size="2" name="PUPDR4" description="Port x configuration bits (y = 0..15)" />
      <BitField start="10" size="2" name="PUPDR5" description="Port x configuration bits (y = 0..15)" />
      <BitField start="12" size="2" name="PUPDR6" description="Port x configuration bits (y = 0..15)" />
      <BitField start="14" size="2" name="PUPDR7" description="Port x configuration bits (y = 0..15)" />
      <BitField start="16" size="2" name="PUPDR8" description="Port x configuration bits (y = 0..15)" />
      <BitField start="18" size="2" name="PUPDR9" description="Port x configuration bits (y = 0..15)" />
      <BitField start="20" size="2" name="PUPDR10" description="Port x configuration bits (y = 0..15)" />
      <BitField start="22" size="2" name="PUPDR11" description="Port x configuration bits (y = 0..15)" />
      <BitField start="24" size="2" name="PUPDR12" description="Port x configuration bits (y = 0..15)" />
      <BitField start="26" size="2" name="PUPDR13" description="Port x configuration bits (y = 0..15)" />
      <BitField start="28" size="2" name="PUPDR14" description="Port x configuration bits (y = 0..15)" />
      <BitField start="30" size="2" name="PUPDR15" description="Port x configuration bits (y = 0..15)" />
    </Register>
    <Register start="+0x10" size="0" name="IDR" access="ReadOnly" description="GPIO port input data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="IDR0" description="Port input data (y = 0..15)" />
      <BitField start="1" size="1" name="IDR1" description="Port input data (y = 0..15)" />
      <BitField start="2" size="1" name="IDR2" description="Port input data (y = 0..15)" />
      <BitField start="3" size="1" name="IDR3" description="Port input data (y = 0..15)" />
      <BitField start="4" size="1" name="IDR4" description="Port input data (y = 0..15)" />
      <BitField start="5" size="1" name="IDR5" description="Port input data (y = 0..15)" />
      <BitField start="6" size="1" name="IDR6" description="Port input data (y = 0..15)" />
      <BitField start="7" size="1" name="IDR7" description="Port input data (y = 0..15)" />
      <BitField start="8" size="1" name="IDR8" description="Port input data (y = 0..15)" />
      <BitField start="9" size="1" name="IDR9" description="Port input data (y = 0..15)" />
      <BitField start="10" size="1" name="IDR10" description="Port input data (y = 0..15)" />
      <BitField start="11" size="1" name="IDR11" description="Port input data (y = 0..15)" />
      <BitField start="12" size="1" name="IDR12" description="Port input data (y = 0..15)" />
      <BitField start="13" size="1" name="IDR13" description="Port input data (y = 0..15)" />
      <BitField start="14" size="1" name="IDR14" description="Port input data (y = 0..15)" />
      <BitField start="15" size="1" name="IDR15" description="Port input data (y = 0..15)" />
    </Register>
    <Register start="+0x14" size="0" name="ODR" access="Read/Write" description="GPIO port output data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ODR0" description="Port output data (y = 0..15)" />
      <BitField start="1" size="1" name="ODR1" description="Port output data (y = 0..15)" />
      <BitField start="2" size="1" name="ODR2" description="Port output data (y = 0..15)" />
      <BitField start="3" size="1" name="ODR3" description="Port output data (y = 0..15)" />
      <BitField start="4" size="1" name="ODR4" description="Port output data (y = 0..15)" />
      <BitField start="5" size="1" name="ODR5" description="Port output data (y = 0..15)" />
      <BitField start="6" size="1" name="ODR6" description="Port output data (y = 0..15)" />
      <BitField start="7" size="1" name="ODR7" description="Port output data (y = 0..15)" />
      <BitField start="8" size="1" name="ODR8" description="Port output data (y = 0..15)" />
      <BitField start="9" size="1" name="ODR9" description="Port output data (y = 0..15)" />
      <BitField start="10" size="1" name="ODR10" description="Port output data (y = 0..15)" />
      <BitField start="11" size="1" name="ODR11" description="Port output data (y = 0..15)" />
      <BitField start="12" size="1" name="ODR12" description="Port output data (y = 0..15)" />
      <BitField start="13" size="1" name="ODR13" description="Port output data (y = 0..15)" />
      <BitField start="14" size="1" name="ODR14" description="Port output data (y = 0..15)" />
      <BitField start="15" size="1" name="ODR15" description="Port output data (y = 0..15)" />
    </Register>
    <Register start="+0x18" size="0" name="BSRR" access="WriteOnly" description="GPIO port bit set/reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BS0" description="Port x set bit y (y= 0..15)" />
      <BitField start="1" size="1" name="BS1" description="Port x set bit y (y= 0..15)" />
      <BitField start="2" size="1" name="BS2" description="Port x set bit y (y= 0..15)" />
      <BitField start="3" size="1" name="BS3" description="Port x set bit y (y= 0..15)" />
      <BitField start="4" size="1" name="BS4" description="Port x set bit y (y= 0..15)" />
      <BitField start="5" size="1" name="BS5" description="Port x set bit y (y= 0..15)" />
      <BitField start="6" size="1" name="BS6" description="Port x set bit y (y= 0..15)" />
      <BitField start="7" size="1" name="BS7" description="Port x set bit y (y= 0..15)" />
      <BitField start="8" size="1" name="BS8" description="Port x set bit y (y= 0..15)" />
      <BitField start="9" size="1" name="BS9" description="Port x set bit y (y= 0..15)" />
      <BitField start="10" size="1" name="BS10" description="Port x set bit y (y= 0..15)" />
      <BitField start="11" size="1" name="BS11" description="Port x set bit y (y= 0..15)" />
      <BitField start="12" size="1" name="BS12" description="Port x set bit y (y= 0..15)" />
      <BitField start="13" size="1" name="BS13" description="Port x set bit y (y= 0..15)" />
      <BitField start="14" size="1" name="BS14" description="Port x set bit y (y= 0..15)" />
      <BitField start="15" size="1" name="BS15" description="Port x set bit y (y= 0..15)" />
      <BitField start="16" size="1" name="BR0" description="Port x set bit y (y= 0..15)" />
      <BitField start="17" size="1" name="BR1" description="Port x reset bit y (y = 0..15)" />
      <BitField start="18" size="1" name="BR2" description="Port x reset bit y (y = 0..15)" />
      <BitField start="19" size="1" name="BR3" description="Port x reset bit y (y = 0..15)" />
      <BitField start="20" size="1" name="BR4" description="Port x reset bit y (y = 0..15)" />
      <BitField start="21" size="1" name="BR5" description="Port x reset bit y (y = 0..15)" />
      <BitField start="22" size="1" name="BR6" description="Port x reset bit y (y = 0..15)" />
      <BitField start="23" size="1" name="BR7" description="Port x reset bit y (y = 0..15)" />
      <BitField start="24" size="1" name="BR8" description="Port x reset bit y (y = 0..15)" />
      <BitField start="25" size="1" name="BR9" description="Port x reset bit y (y = 0..15)" />
      <BitField start="26" size="1" name="BR10" description="Port x reset bit y (y = 0..15)" />
      <BitField start="27" size="1" name="BR11" description="Port x reset bit y (y = 0..15)" />
      <BitField start="28" size="1" name="BR12" description="Port x reset bit y (y = 0..15)" />
      <BitField start="29" size="1" name="BR13" description="Port x reset bit y (y = 0..15)" />
      <BitField start="30" size="1" name="BR14" description="Port x reset bit y (y = 0..15)" />
      <BitField start="31" size="1" name="BR15" description="Port x reset bit y (y = 0..15)" />
    </Register>
    <Register start="+0x1C" size="0" name="LCKR" access="Read/Write" description="GPIO port configuration lock register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LCK0" description="Port x lock bit y (y= 0..15)" />
      <BitField start="1" size="1" name="LCK1" description="Port x lock bit y (y= 0..15)" />
      <BitField start="2" size="1" name="LCK2" description="Port x lock bit y (y= 0..15)" />
      <BitField start="3" size="1" name="LCK3" description="Port x lock bit y (y= 0..15)" />
      <BitField start="4" size="1" name="LCK4" description="Port x lock bit y (y= 0..15)" />
      <BitField start="5" size="1" name="LCK5" description="Port x lock bit y (y= 0..15)" />
      <BitField start="6" size="1" name="LCK6" description="Port x lock bit y (y= 0..15)" />
      <BitField start="7" size="1" name="LCK7" description="Port x lock bit y (y= 0..15)" />
      <BitField start="8" size="1" name="LCK8" description="Port x lock bit y (y= 0..15)" />
      <BitField start="9" size="1" name="LCK9" description="Port x lock bit y (y= 0..15)" />
      <BitField start="10" size="1" name="LCK10" description="Port x lock bit y (y= 0..15)" />
      <BitField start="11" size="1" name="LCK11" description="Port x lock bit y (y= 0..15)" />
      <BitField start="12" size="1" name="LCK12" description="Port x lock bit y (y= 0..15)" />
      <BitField start="13" size="1" name="LCK13" description="Port x lock bit y (y= 0..15)" />
      <BitField start="14" size="1" name="LCK14" description="Port x lock bit y (y= 0..15)" />
      <BitField start="15" size="1" name="LCK15" description="Port x lock bit y (y= 0..15)" />
      <BitField start="16" size="1" name="LCKK" description="Port x lock bit y (y= 0..15)" />
    </Register>
    <Register start="+0x20" size="0" name="AFRL" access="Read/Write" description="GPIO alternate function low register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL0" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="4" size="4" name="AFSEL1" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="8" size="4" name="AFSEL2" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="12" size="4" name="AFSEL3" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="16" size="4" name="AFSEL4" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="20" size="4" name="AFSEL5" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="24" size="4" name="AFSEL6" description="Alternate function selection for port x bit y (y = 0..7)" />
      <BitField start="28" size="4" name="AFSEL7" description="Alternate function selection for port x bit y (y = 0..7)" />
    </Register>
    <Register start="+0x24" size="0" name="AFRH" access="Read/Write" description="GPIO alternate function high register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="AFSEL8" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="4" size="4" name="AFSEL9" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="8" size="4" name="AFSEL10" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="12" size="4" name="AFSEL11" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="16" size="4" name="AFSEL12" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="20" size="4" name="AFSEL13" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="24" size="4" name="AFSEL14" description="Alternate function selection for port x bit y (y = 8..15)" />
      <BitField start="28" size="4" name="AFSEL15" description="Alternate function selection for port x bit y (y = 8..15)" />
    </Register>
    <Register start="+0x28" size="0" name="BRR" access="WriteOnly" description="port bit reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BR0" description="Port Reset bit" />
      <BitField start="1" size="1" name="BR1" description="Port Reset bit" />
      <BitField start="2" size="1" name="BR2" description="Port Reset bit" />
      <BitField start="3" size="1" name="BR3" description="Port Reset bit" />
      <BitField start="4" size="1" name="BR4" description="Port Reset bit" />
      <BitField start="5" size="1" name="BR5" description="Port Reset bit" />
      <BitField start="6" size="1" name="BR6" description="Port Reset bit" />
      <BitField start="7" size="1" name="BR7" description="Port Reset bit" />
      <BitField start="8" size="1" name="BR8" description="Port Reset bit" />
      <BitField start="9" size="1" name="BR9" description="Port Reset bit" />
      <BitField start="10" size="1" name="BR10" description="Port Reset bit" />
      <BitField start="11" size="1" name="BR11" description="Port Reset bit" />
      <BitField start="12" size="1" name="BR12" description="Port Reset bit" />
      <BitField start="13" size="1" name="BR13" description="Port Reset bit" />
      <BitField start="14" size="1" name="BR14" description="Port Reset bit" />
      <BitField start="15" size="1" name="BR15" description="Port Reset bit" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="I2C1" start="0x40005400" description="Inter-integrated circuit">
    <Register start="+0x0" size="0" name="I2C_CR1" access="Read/Write" description="Control register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Peripheral enable Note: When PE=0, the I2C SCL and SDA lines are released. Internal state machines and status bits are put back to their reset value. When cleared, PE must be kept low for at least 3 APB clock cycles.">
        <Enum name="B_0x0" start="0x0" description="Peripheral disable" />
        <Enum name="B_0x1" start="0x1" description="Peripheral enable" />
      </BitField>
      <BitField start="1" size="1" name="TXIE" description="TX Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Transmit (TXIS) interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmit (TXIS) interrupt enabled" />
      </BitField>
      <BitField start="2" size="1" name="RXIE" description="RX Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Receive (RXNE) interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Receive (RXNE) interrupt enabled" />
      </BitField>
      <BitField start="3" size="1" name="ADDRIE" description="Address match Interrupt enable (slave only)">
        <Enum name="B_0x0" start="0x0" description="Address match (ADDR) interrupts disabled" />
        <Enum name="B_0x1" start="0x1" description="Address match (ADDR) interrupts enabled" />
      </BitField>
      <BitField start="4" size="1" name="NACKIE" description="Not acknowledge received Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Not acknowledge (NACKF) received interrupts disabled" />
        <Enum name="B_0x1" start="0x1" description="Not acknowledge (NACKF) received interrupts enabled" />
      </BitField>
      <BitField start="5" size="1" name="STOPIE" description="Stop detection Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Stop detection (STOPF) interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Stop detection (STOPF) interrupt enabled" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transfer Complete interrupt enable Note: Any of these events generate an interrupt: Transfer Complete (TC) Transfer Complete Reload (TCR)">
        <Enum name="B_0x0" start="0x0" description="Transfer Complete interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Transfer Complete interrupt enabled" />
      </BitField>
      <BitField start="7" size="1" name="ERRIE" description="Error interrupts enable Note: Any of these errors generate an interrupt: Arbitration Loss (ARLO) Bus Error detection (BERR) Overrun/Underrun (OVR) Timeout detection (TIMEOUT) PEC error detection (PECERR) Alert pin event detection (ALERT)">
        <Enum name="B_0x0" start="0x0" description="Error detection interrupts disabled" />
        <Enum name="B_0x1" start="0x1" description="Error detection interrupts enabled" />
      </BitField>
      <BitField start="8" size="4" name="DNF" description="Digital noise filter These bits are used to configure the digital noise filter on SDA and SCL input. The digital filter, filters spikes with a length of up to DNF[3:0] * tI2CCLK ... Note: If the analog filter is also enabled, the digital filter is added to the analog filter. This filter can only be programmed when the I2C is disabled (PE = 0).">
        <Enum name="B_0x0" start="0x0" description="Digital filter disabled" />
        <Enum name="B_0x1" start="0x1" description="Digital filter enabled and filtering capability up to 1 tI2CCLK" />
        <Enum name="B_0xF" start="0xF" description="digital filter enabled and filtering capability up to15 tI2CCLK" />
      </BitField>
      <BitField start="12" size="1" name="ANFOFF" description="Analog noise filter OFF Note: This bit can only be programmed when the I2C is disabled (PE = 0).">
        <Enum name="B_0x0" start="0x0" description="Analog noise filter enabled" />
        <Enum name="B_0x1" start="0x1" description="Analog noise filter disabled" />
      </BitField>
      <BitField start="14" size="1" name="TXDMAEN" description="DMA transmission requests enable">
        <Enum name="B_0x0" start="0x0" description="DMA mode disabled for transmission" />
        <Enum name="B_0x1" start="0x1" description="DMA mode enabled for transmission" />
      </BitField>
      <BitField start="15" size="1" name="RXDMAEN" description="DMA reception requests enable">
        <Enum name="B_0x0" start="0x0" description="DMA mode disabled for reception" />
        <Enum name="B_0x1" start="0x1" description="DMA mode enabled for reception" />
      </BitField>
      <BitField start="16" size="1" name="SBC" description="Slave byte control This bit is used to enable hardware byte control in slave mode.">
        <Enum name="B_0x0" start="0x0" description="Slave byte control disabled" />
        <Enum name="B_0x1" start="0x1" description="Slave byte control enabled" />
      </BitField>
      <BitField start="17" size="1" name="NOSTRETCH" description="Clock stretching disable This bit is used to disable clock stretching in slave mode. It must be kept cleared in master mode. Note: This bit can only be programmed when the I2C is disabled (PE = 0).">
        <Enum name="B_0x0" start="0x0" description="Clock stretching enabled" />
        <Enum name="B_0x1" start="0x1" description="Clock stretching disabled" />
      </BitField>
      <BitField start="18" size="1" name="WUPEN" description="Wakeup from Stop mode enable Note: If the Wakeup from Stop mode feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to . Note: WUPEN can be set only when DNF = '0000&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;">
        <Enum name="B_0x0" start="0x0" description="Wakeup from Stop mode disable." />
        <Enum name="B_0x1" start="0x1" description="Wakeup from Stop mode enable." />
      </BitField>
      <BitField start="19" size="1" name="GCEN" description="General call enable">
        <Enum name="B_0x0" start="0x0" description="General call disabled. Address 0b00000000 is NACKed." />
        <Enum name="B_0x1" start="0x1" description="General call enabled. Address 0b00000000 is ACKed." />
      </BitField>
      <BitField start="20" size="1" name="SMBHEN" description="SMBus Host Address enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Host Address disabled. Address 0b0001000x is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Host Address enabled. Address 0b0001000x is ACKed." />
      </BitField>
      <BitField start="21" size="1" name="SMBDEN" description="SMBus Device Default Address enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Device Default Address disabled. Address 0b1100001x is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Device Default Address enabled. Address 0b1100001x is ACKed." />
      </BitField>
      <BitField start="22" size="1" name="ALERTEN" description="SMBus alert enable Note: When ALERTEN=0, the SMBA pin can be used as a standard GPIO. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The SMBus alert pin (SMBA) is not supported in host mode (SMBHEN=1). In device mode (SMBHEN=0), the SMBA pin is released and the Alert Response Address header is disabled (0001100x followed by NACK)." />
        <Enum name="B_0x1" start="0x1" description="The SMBus alert pin is supported in host mode (SMBHEN=1). In device mode (SMBHEN=0), the SMBA pin is driven low and the Alert Response Address header is enabled (0001100x followed by ACK)." />
      </BitField>
      <BitField start="23" size="1" name="PECEN" description="PEC enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="PEC calculation disabled" />
        <Enum name="B_0x1" start="0x1" description="PEC calculation enabled" />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="I2C_CR2" access="Read/Write" description="Control register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="10" name="SADD" description="Slave address (master mode) In 7-bit addressing mode (ADD10 = 0): SADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9], SADD[8] and SADD[0] are don't care. In 10-bit addressing mode (ADD10 = 1): SADD[9:0] should be written with the 10-bit slave address to be sent. Note: Changing these bits when the START bit is set is not allowed." />
      <BitField start="10" size="1" name="RD_WRN" description="Transfer direction (master mode) Note: Changing this bit when the START bit is set is not allowed.">
        <Enum name="B_0x0" start="0x0" description="Master requests a write transfer." />
        <Enum name="B_0x1" start="0x1" description="Master requests a read transfer." />
      </BitField>
      <BitField start="11" size="1" name="ADD10" description="10-bit addressing mode (master mode) Note: Changing this bit when the START bit is set is not allowed.">
        <Enum name="B_0x0" start="0x0" description="The master operates in 7-bit addressing mode," />
        <Enum name="B_0x1" start="0x1" description="The master operates in 10-bit addressing mode" />
      </BitField>
      <BitField start="12" size="1" name="HEAD10R" description="10-bit address header only read direction (master receiver mode) Note: Changing this bit when the START bit is set is not allowed.">
        <Enum name="B_0x0" start="0x0" description="The master sends the complete 10 bit slave address read sequence: Start + 2 bytes 10bit address in write direction + Restart + 1st 7 bits of the 10 bit address in read direction." />
        <Enum name="B_0x1" start="0x1" description="The master only sends the 1st 7 bits of the 10 bit address, followed by Read direction." />
      </BitField>
      <BitField start="13" size="1" name="START" description="Start generation This bit is set by software, and cleared by hardware after the Start followed by the address sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0. It can also be cleared by software by writing '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to the ADDRCF bit in the I2C_ICR register. If the I2C is already in master mode with AUTOEND = 0, setting this bit generates a Repeated Start condition when RELOAD=0, after the end of the NBYTES transfer. Otherwise setting this bit generates a START condition once the bus is free. Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect. The START bit can be set even if the bus is BUSY or I2C is in slave mode. This bit has no effect when RELOAD is set.">
        <Enum name="B_0x0" start="0x0" description="No Start generation." />
        <Enum name="B_0x1" start="0x1" description="Restart/Start generation:" />
      </BitField>
      <BitField start="14" size="1" name="STOP" description="Stop generation (master mode) The bit is set by software, cleared by hardware when a STOP condition is detected, or when PE = 0. In Master Mode: Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect.">
        <Enum name="B_0x0" start="0x0" description="No Stop generation." />
        <Enum name="B_0x1" start="0x1" description="Stop generation after current byte transfer." />
      </BitField>
      <BitField start="15" size="1" name="NACK" description="NACK generation (slave mode) The bit is set by software, cleared by hardware when the NACK is sent, or when a STOP condition or an Address matched is received, or when PE=0. Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect. This bit is used in slave mode only: in master receiver mode, NACK is automatically generated after last byte preceding STOP or RESTART condition, whatever the NACK bit value. When an overrun occurs in slave receiver NOSTRETCH mode, a NACK is automatically generated whatever the NACK bit value. When hardware PEC checking is enabled (PECBYTE=1), the PEC acknowledge value does not depend on the NACK value.">
        <Enum name="B_0x0" start="0x0" description="an ACK is sent after current received byte." />
        <Enum name="B_0x1" start="0x1" description="a NACK is sent after current received byte." />
      </BitField>
      <BitField start="16" size="8" name="NBYTES" description="Number of bytes The number of bytes to be transmitted/received is programmed there. This field is don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care in slave mode with SBC=0. Note: Changing these bits when the START bit is set is not allowed." />
      <BitField start="24" size="1" name="RELOAD" description="NBYTES reload mode This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="The transfer is completed after the NBYTES data transfer (STOP or RESTART follows)." />
        <Enum name="B_0x1" start="0x1" description="The transfer is not completed after the NBYTES data transfer (NBYTES is reloaded). TCR flag is set when NBYTES data are transferred, stretching SCL low." />
      </BitField>
      <BitField start="25" size="1" name="AUTOEND" description="Automatic end mode (master mode) This bit is set and cleared by software. Note: This bit has no effect in slave mode or when the RELOAD bit is set.">
        <Enum name="B_0x0" start="0x0" description="software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low." />
        <Enum name="B_0x1" start="0x1" description="Automatic end mode: a STOP condition is automatically sent when NBYTES data are transferred." />
      </BitField>
      <BitField start="26" size="1" name="PECBYTE" description="Packet error checking byte This bit is set by software, and cleared by hardware when the PEC is transferred, or when a STOP condition or an Address matched is received, also when PE=0. Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect. This bit has no effect when RELOAD is set. This bit has no effect is slave mode when SBC=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No PEC transfer." />
        <Enum name="B_0x1" start="0x1" description="PEC transmission/reception is requested" />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="I2C_OAR1" access="Read/Write" description="Own address register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="10" name="OA1" description="Interface own slave address 7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. The bits OA1[9], OA1[8] and OA1[0] are don't care. 10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address. Note: These bits can be written only when OA1EN=0." />
      <BitField start="10" size="1" name="OA1MODE" description="Own Address 1 10-bit mode Note: This bit can be written only when OA1EN=0.">
        <Enum name="B_0x0" start="0x0" description="Own address 1 is a 7-bit address." />
        <Enum name="B_0x1" start="0x1" description="Own address 1 is a 10-bit address." />
      </BitField>
      <BitField start="15" size="1" name="OA1EN" description="Own Address 1 enable">
        <Enum name="B_0x0" start="0x0" description="Own address 1 disabled. The received slave address OA1 is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Own address 1 enabled. The received slave address OA1 is ACKed." />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="I2C_OAR2" access="Read/Write" description="Own address register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="1" size="7" name="OA2" description="Interface address 7-bit addressing mode: 7-bit address Note: These bits can be written only when OA2EN=0." />
      <BitField start="8" size="3" name="OA2MSK" description="Own Address 2 masks Note: These bits can be written only when OA2EN=0. As soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx and 0b1111xxx) are not acknowledged even if the comparison matches.">
        <Enum name="B_0x0" start="0x0" description="No mask" />
        <Enum name="B_0x1" start="0x1" description="OA2[1] is masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:2] are compared." />
        <Enum name="B_0x2" start="0x2" description="OA2[2:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:3] are compared." />
        <Enum name="B_0x3" start="0x3" description="OA2[3:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:4] are compared." />
        <Enum name="B_0x4" start="0x4" description="OA2[4:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:5] are compared." />
        <Enum name="B_0x5" start="0x5" description="OA2[5:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:6] are compared." />
        <Enum name="B_0x6" start="0x6" description="OA2[6:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7] is compared." />
        <Enum name="B_0x7" start="0x7" description="OA2[7:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. No comparison is done, and all (except reserved) 7-bit received addresses are acknowledged." />
      </BitField>
      <BitField start="15" size="1" name="OA2EN" description="Own Address 2 enable">
        <Enum name="B_0x0" start="0x0" description="Own address 2 disabled. The received slave address OA2 is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Own address 2 enabled. The received slave address OA2 is ACKed." />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="I2C_TIMINGR" access="Read/Write" description="Timing register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="SCLL" description="SCL low period (master mode)" />
      <BitField start="8" size="8" name="SCLH" description="SCL high period (master mode)" />
      <BitField start="16" size="4" name="SDADEL" description="Data hold time" />
      <BitField start="20" size="4" name="SCLDEL" description="Data setup time" />
      <BitField start="28" size="4" name="PRESC" description="Timing prescaler" />
    </Register>
    <Register start="+0x14" size="0" name="I2C_TIMEOUTR" access="Read/Write" description="Status register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="12" name="TIMEOUTA" description="Bus Timeout A This field is used to configure: The SCL low timeout condition tTIMEOUT when TIDLE=0 tTIMEOUT= (TIMEOUTA+1) x 2048 x tI2CCLK The bus idle condition (both SCL and SDA high) when TIDLE=1 tIDLE= (TIMEOUTA+1) x 4 x tI2CCLK Note: These bits can be written only when TIMOUTEN=0." />
      <BitField start="12" size="1" name="TIDLE" description="Idle clock timeout detection Note: This bit can be written only when TIMOUTEN=0.">
        <Enum name="B_0x0" start="0x0" description="TIMEOUTA is used to detect SCL low timeout" />
        <Enum name="B_0x1" start="0x1" description="TIMEOUTA is used to detect both SCL and SDA high timeout (bus idle condition)" />
      </BitField>
      <BitField start="15" size="1" name="TIMOUTEN" description="Clock timeout enable">
        <Enum name="B_0x0" start="0x0" description="SCL timeout detection is disabled" />
        <Enum name="B_0x1" start="0x1" description="SCL timeout detection is enabled: when SCL is low for more than tTIMEOUT (TIDLE=0) or high for more than tIDLE (TIDLE=1), a timeout error is detected (TIMEOUT=1)." />
      </BitField>
      <BitField start="16" size="12" name="TIMEOUTB" description="Bus timeout B This field is used to configure the cumulative clock extension timeout: In master mode, the master cumulative clock low extend time (tLOW:MEXT) is detected In slave mode, the slave cumulative clock low extend time (tLOW:SEXT) is detected tLOW:EXT= (TIMEOUTB+1) x 2048 x tI2CCLK Note: These bits can be written only when TEXTEN=0." />
      <BitField start="31" size="1" name="TEXTEN" description="Extended clock timeout enable">
        <Enum name="B_0x0" start="0x0" description="Extended clock timeout detection is disabled" />
        <Enum name="B_0x1" start="0x1" description="Extended clock timeout detection is enabled. When a cumulative SCL stretch for more than tLOW:EXT is done by the I2C interface, a timeout error is detected (TIMEOUT=1)." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="I2C_ISR" access="Read/Write" description="Interrupt and Status register" reset_value="0x00000001" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TXE" description="Transmit data register empty (transmitters)" />
      <BitField start="1" size="1" name="TXIS" description="Transmit interrupt status (transmitters)" />
      <BitField start="2" size="1" name="RXNE" description="Receive data register not empty (receivers)" />
      <BitField start="3" size="1" name="ADDR" description="Address matched (slave mode)" />
      <BitField start="4" size="1" name="NACKF" description="Not acknowledge received flag" />
      <BitField start="5" size="1" name="STOPF" description="Stop detection flag" />
      <BitField start="6" size="1" name="TC" description="Transfer Complete (master mode)" />
      <BitField start="7" size="1" name="TCR" description="Transfer Complete Reload" />
      <BitField start="8" size="1" name="BERR" description="Bus error" />
      <BitField start="9" size="1" name="ARLO" description="Arbitration lost" />
      <BitField start="10" size="1" name="OVR" description="Overrun/Underrun (slave mode)" />
      <BitField start="11" size="1" name="PECERR" description="PEC Error in reception" />
      <BitField start="12" size="1" name="TIMEOUT" description="Timeout or t_low detection flag" />
      <BitField start="13" size="1" name="ALERT" description="SMBus alert" />
      <BitField start="15" size="1" name="BUSY" description="Bus busy" />
      <BitField start="16" size="1" name="DIR" description="Transfer direction (Slave mode) This flag is updated when an address match event occurs (ADDR=1).">
        <Enum name="B_0x0" start="0x0" description="Write transfer, slave enters receiver mode." />
        <Enum name="B_0x1" start="0x1" description="Read transfer, slave enters transmitter mode." />
      </BitField>
      <BitField start="17" size="7" name="ADDCODE" description="Address match code (Slave mode)" />
    </Register>
    <Register start="+0x1C" size="0" name="I2C_ICR" access="WriteOnly" description="Interrupt clear register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="3" size="1" name="ADDRCF" description="Address Matched flag clear" />
      <BitField start="4" size="1" name="NACKCF" description="Not Acknowledge flag clear" />
      <BitField start="5" size="1" name="STOPCF" description="Stop detection flag clear" />
      <BitField start="8" size="1" name="BERRCF" description="Bus error flag clear" />
      <BitField start="9" size="1" name="ARLOCF" description="Arbitration lost flag clear" />
      <BitField start="10" size="1" name="OVRCF" description="Overrun/Underrun flag clear" />
      <BitField start="11" size="1" name="PECCF" description="PEC Error flag clear" />
      <BitField start="12" size="1" name="TIMOUTCF" description="Timeout detection flag clear" />
      <BitField start="13" size="1" name="ALERTCF" description="Alert flag clear" />
    </Register>
    <Register start="+0x20" size="0" name="I2C_PECR" access="ReadOnly" description="PEC register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="PEC" description="Packet error checking register" />
    </Register>
    <Register start="+0x24" size="0" name="I2C_RXDR" access="ReadOnly" description="Receive data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="RXDATA" description="8-bit receive data" />
    </Register>
    <Register start="+0x28" size="0" name="I2C_TXDR" access="Read/Write" description="Transmit data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="TXDATA" description="8-bit transmit data" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="I2C2" start="0x40005800" description="Inter-integrated circuit">
    <Register start="+0x0" size="0" name="I2C_CR1" access="Read/Write" description="Control register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Peripheral enable Note: When PE=0, the I2C SCL and SDA lines are released. Internal state machines and status bits are put back to their reset value. When cleared, PE must be kept low for at least 3 APB clock cycles.">
        <Enum name="B_0x0" start="0x0" description="Peripheral disable" />
        <Enum name="B_0x1" start="0x1" description="Peripheral enable" />
      </BitField>
      <BitField start="1" size="1" name="TXIE" description="TX Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Transmit (TXIS) interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmit (TXIS) interrupt enabled" />
      </BitField>
      <BitField start="2" size="1" name="RXIE" description="RX Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Receive (RXNE) interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Receive (RXNE) interrupt enabled" />
      </BitField>
      <BitField start="3" size="1" name="ADDRIE" description="Address match Interrupt enable (slave only)">
        <Enum name="B_0x0" start="0x0" description="Address match (ADDR) interrupts disabled" />
        <Enum name="B_0x1" start="0x1" description="Address match (ADDR) interrupts enabled" />
      </BitField>
      <BitField start="4" size="1" name="NACKIE" description="Not acknowledge received Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Not acknowledge (NACKF) received interrupts disabled" />
        <Enum name="B_0x1" start="0x1" description="Not acknowledge (NACKF) received interrupts enabled" />
      </BitField>
      <BitField start="5" size="1" name="STOPIE" description="Stop detection Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Stop detection (STOPF) interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Stop detection (STOPF) interrupt enabled" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transfer Complete interrupt enable Note: Any of these events generate an interrupt: Transfer Complete (TC) Transfer Complete Reload (TCR)">
        <Enum name="B_0x0" start="0x0" description="Transfer Complete interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Transfer Complete interrupt enabled" />
      </BitField>
      <BitField start="7" size="1" name="ERRIE" description="Error interrupts enable Note: Any of these errors generate an interrupt: Arbitration Loss (ARLO) Bus Error detection (BERR) Overrun/Underrun (OVR) Timeout detection (TIMEOUT) PEC error detection (PECERR) Alert pin event detection (ALERT)">
        <Enum name="B_0x0" start="0x0" description="Error detection interrupts disabled" />
        <Enum name="B_0x1" start="0x1" description="Error detection interrupts enabled" />
      </BitField>
      <BitField start="8" size="4" name="DNF" description="Digital noise filter These bits are used to configure the digital noise filter on SDA and SCL input. The digital filter, filters spikes with a length of up to DNF[3:0] * tI2CCLK ... Note: If the analog filter is also enabled, the digital filter is added to the analog filter. This filter can only be programmed when the I2C is disabled (PE = 0).">
        <Enum name="B_0x0" start="0x0" description="Digital filter disabled" />
        <Enum name="B_0x1" start="0x1" description="Digital filter enabled and filtering capability up to 1 tI2CCLK" />
        <Enum name="B_0xF" start="0xF" description="digital filter enabled and filtering capability up to15 tI2CCLK" />
      </BitField>
      <BitField start="12" size="1" name="ANFOFF" description="Analog noise filter OFF Note: This bit can only be programmed when the I2C is disabled (PE = 0).">
        <Enum name="B_0x0" start="0x0" description="Analog noise filter enabled" />
        <Enum name="B_0x1" start="0x1" description="Analog noise filter disabled" />
      </BitField>
      <BitField start="14" size="1" name="TXDMAEN" description="DMA transmission requests enable">
        <Enum name="B_0x0" start="0x0" description="DMA mode disabled for transmission" />
        <Enum name="B_0x1" start="0x1" description="DMA mode enabled for transmission" />
      </BitField>
      <BitField start="15" size="1" name="RXDMAEN" description="DMA reception requests enable">
        <Enum name="B_0x0" start="0x0" description="DMA mode disabled for reception" />
        <Enum name="B_0x1" start="0x1" description="DMA mode enabled for reception" />
      </BitField>
      <BitField start="16" size="1" name="SBC" description="Slave byte control This bit is used to enable hardware byte control in slave mode.">
        <Enum name="B_0x0" start="0x0" description="Slave byte control disabled" />
        <Enum name="B_0x1" start="0x1" description="Slave byte control enabled" />
      </BitField>
      <BitField start="17" size="1" name="NOSTRETCH" description="Clock stretching disable This bit is used to disable clock stretching in slave mode. It must be kept cleared in master mode. Note: This bit can only be programmed when the I2C is disabled (PE = 0).">
        <Enum name="B_0x0" start="0x0" description="Clock stretching enabled" />
        <Enum name="B_0x1" start="0x1" description="Clock stretching disabled" />
      </BitField>
      <BitField start="18" size="1" name="WUPEN" description="Wakeup from Stop mode enable Note: If the Wakeup from Stop mode feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to . Note: WUPEN can be set only when DNF = '0000&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;">
        <Enum name="B_0x0" start="0x0" description="Wakeup from Stop mode disable." />
        <Enum name="B_0x1" start="0x1" description="Wakeup from Stop mode enable." />
      </BitField>
      <BitField start="19" size="1" name="GCEN" description="General call enable">
        <Enum name="B_0x0" start="0x0" description="General call disabled. Address 0b00000000 is NACKed." />
        <Enum name="B_0x1" start="0x1" description="General call enabled. Address 0b00000000 is ACKed." />
      </BitField>
      <BitField start="20" size="1" name="SMBHEN" description="SMBus Host Address enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Host Address disabled. Address 0b0001000x is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Host Address enabled. Address 0b0001000x is ACKed." />
      </BitField>
      <BitField start="21" size="1" name="SMBDEN" description="SMBus Device Default Address enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Device Default Address disabled. Address 0b1100001x is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Device Default Address enabled. Address 0b1100001x is ACKed." />
      </BitField>
      <BitField start="22" size="1" name="ALERTEN" description="SMBus alert enable Note: When ALERTEN=0, the SMBA pin can be used as a standard GPIO. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The SMBus alert pin (SMBA) is not supported in host mode (SMBHEN=1). In device mode (SMBHEN=0), the SMBA pin is released and the Alert Response Address header is disabled (0001100x followed by NACK)." />
        <Enum name="B_0x1" start="0x1" description="The SMBus alert pin is supported in host mode (SMBHEN=1). In device mode (SMBHEN=0), the SMBA pin is driven low and the Alert Response Address header is enabled (0001100x followed by ACK)." />
      </BitField>
      <BitField start="23" size="1" name="PECEN" description="PEC enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="PEC calculation disabled" />
        <Enum name="B_0x1" start="0x1" description="PEC calculation enabled" />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="I2C_CR2" access="Read/Write" description="Control register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="10" name="SADD" description="Slave address (master mode) In 7-bit addressing mode (ADD10 = 0): SADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9], SADD[8] and SADD[0] are don't care. In 10-bit addressing mode (ADD10 = 1): SADD[9:0] should be written with the 10-bit slave address to be sent. Note: Changing these bits when the START bit is set is not allowed." />
      <BitField start="10" size="1" name="RD_WRN" description="Transfer direction (master mode) Note: Changing this bit when the START bit is set is not allowed.">
        <Enum name="B_0x0" start="0x0" description="Master requests a write transfer." />
        <Enum name="B_0x1" start="0x1" description="Master requests a read transfer." />
      </BitField>
      <BitField start="11" size="1" name="ADD10" description="10-bit addressing mode (master mode) Note: Changing this bit when the START bit is set is not allowed.">
        <Enum name="B_0x0" start="0x0" description="The master operates in 7-bit addressing mode," />
        <Enum name="B_0x1" start="0x1" description="The master operates in 10-bit addressing mode" />
      </BitField>
      <BitField start="12" size="1" name="HEAD10R" description="10-bit address header only read direction (master receiver mode) Note: Changing this bit when the START bit is set is not allowed.">
        <Enum name="B_0x0" start="0x0" description="The master sends the complete 10 bit slave address read sequence: Start + 2 bytes 10bit address in write direction + Restart + 1st 7 bits of the 10 bit address in read direction." />
        <Enum name="B_0x1" start="0x1" description="The master only sends the 1st 7 bits of the 10 bit address, followed by Read direction." />
      </BitField>
      <BitField start="13" size="1" name="START" description="Start generation This bit is set by software, and cleared by hardware after the Start followed by the address sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0. It can also be cleared by software by writing '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to the ADDRCF bit in the I2C_ICR register. If the I2C is already in master mode with AUTOEND = 0, setting this bit generates a Repeated Start condition when RELOAD=0, after the end of the NBYTES transfer. Otherwise setting this bit generates a START condition once the bus is free. Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect. The START bit can be set even if the bus is BUSY or I2C is in slave mode. This bit has no effect when RELOAD is set.">
        <Enum name="B_0x0" start="0x0" description="No Start generation." />
        <Enum name="B_0x1" start="0x1" description="Restart/Start generation:" />
      </BitField>
      <BitField start="14" size="1" name="STOP" description="Stop generation (master mode) The bit is set by software, cleared by hardware when a STOP condition is detected, or when PE = 0. In Master Mode: Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect.">
        <Enum name="B_0x0" start="0x0" description="No Stop generation." />
        <Enum name="B_0x1" start="0x1" description="Stop generation after current byte transfer." />
      </BitField>
      <BitField start="15" size="1" name="NACK" description="NACK generation (slave mode) The bit is set by software, cleared by hardware when the NACK is sent, or when a STOP condition or an Address matched is received, or when PE=0. Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect. This bit is used in slave mode only: in master receiver mode, NACK is automatically generated after last byte preceding STOP or RESTART condition, whatever the NACK bit value. When an overrun occurs in slave receiver NOSTRETCH mode, a NACK is automatically generated whatever the NACK bit value. When hardware PEC checking is enabled (PECBYTE=1), the PEC acknowledge value does not depend on the NACK value.">
        <Enum name="B_0x0" start="0x0" description="an ACK is sent after current received byte." />
        <Enum name="B_0x1" start="0x1" description="a NACK is sent after current received byte." />
      </BitField>
      <BitField start="16" size="8" name="NBYTES" description="Number of bytes The number of bytes to be transmitted/received is programmed there. This field is don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care in slave mode with SBC=0. Note: Changing these bits when the START bit is set is not allowed." />
      <BitField start="24" size="1" name="RELOAD" description="NBYTES reload mode This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="The transfer is completed after the NBYTES data transfer (STOP or RESTART follows)." />
        <Enum name="B_0x1" start="0x1" description="The transfer is not completed after the NBYTES data transfer (NBYTES is reloaded). TCR flag is set when NBYTES data are transferred, stretching SCL low." />
      </BitField>
      <BitField start="25" size="1" name="AUTOEND" description="Automatic end mode (master mode) This bit is set and cleared by software. Note: This bit has no effect in slave mode or when the RELOAD bit is set.">
        <Enum name="B_0x0" start="0x0" description="software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low." />
        <Enum name="B_0x1" start="0x1" description="Automatic end mode: a STOP condition is automatically sent when NBYTES data are transferred." />
      </BitField>
      <BitField start="26" size="1" name="PECBYTE" description="Packet error checking byte This bit is set by software, and cleared by hardware when the PEC is transferred, or when a STOP condition or an Address matched is received, also when PE=0. Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect. This bit has no effect when RELOAD is set. This bit has no effect is slave mode when SBC=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No PEC transfer." />
        <Enum name="B_0x1" start="0x1" description="PEC transmission/reception is requested" />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="I2C_OAR1" access="Read/Write" description="Own address register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="10" name="OA1" description="Interface own slave address 7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. The bits OA1[9], OA1[8] and OA1[0] are don't care. 10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address. Note: These bits can be written only when OA1EN=0." />
      <BitField start="10" size="1" name="OA1MODE" description="Own Address 1 10-bit mode Note: This bit can be written only when OA1EN=0.">
        <Enum name="B_0x0" start="0x0" description="Own address 1 is a 7-bit address." />
        <Enum name="B_0x1" start="0x1" description="Own address 1 is a 10-bit address." />
      </BitField>
      <BitField start="15" size="1" name="OA1EN" description="Own Address 1 enable">
        <Enum name="B_0x0" start="0x0" description="Own address 1 disabled. The received slave address OA1 is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Own address 1 enabled. The received slave address OA1 is ACKed." />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="I2C_OAR2" access="Read/Write" description="Own address register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="1" size="7" name="OA2" description="Interface address 7-bit addressing mode: 7-bit address Note: These bits can be written only when OA2EN=0." />
      <BitField start="8" size="3" name="OA2MSK" description="Own Address 2 masks Note: These bits can be written only when OA2EN=0. As soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx and 0b1111xxx) are not acknowledged even if the comparison matches.">
        <Enum name="B_0x0" start="0x0" description="No mask" />
        <Enum name="B_0x1" start="0x1" description="OA2[1] is masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:2] are compared." />
        <Enum name="B_0x2" start="0x2" description="OA2[2:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:3] are compared." />
        <Enum name="B_0x3" start="0x3" description="OA2[3:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:4] are compared." />
        <Enum name="B_0x4" start="0x4" description="OA2[4:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:5] are compared." />
        <Enum name="B_0x5" start="0x5" description="OA2[5:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:6] are compared." />
        <Enum name="B_0x6" start="0x6" description="OA2[6:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7] is compared." />
        <Enum name="B_0x7" start="0x7" description="OA2[7:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. No comparison is done, and all (except reserved) 7-bit received addresses are acknowledged." />
      </BitField>
      <BitField start="15" size="1" name="OA2EN" description="Own Address 2 enable">
        <Enum name="B_0x0" start="0x0" description="Own address 2 disabled. The received slave address OA2 is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Own address 2 enabled. The received slave address OA2 is ACKed." />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="I2C_TIMINGR" access="Read/Write" description="Timing register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="SCLL" description="SCL low period (master mode)" />
      <BitField start="8" size="8" name="SCLH" description="SCL high period (master mode)" />
      <BitField start="16" size="4" name="SDADEL" description="Data hold time" />
      <BitField start="20" size="4" name="SCLDEL" description="Data setup time" />
      <BitField start="28" size="4" name="PRESC" description="Timing prescaler" />
    </Register>
    <Register start="+0x14" size="0" name="I2C_TIMEOUTR" access="Read/Write" description="Status register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="12" name="TIMEOUTA" description="Bus Timeout A This field is used to configure: The SCL low timeout condition tTIMEOUT when TIDLE=0 tTIMEOUT= (TIMEOUTA+1) x 2048 x tI2CCLK The bus idle condition (both SCL and SDA high) when TIDLE=1 tIDLE= (TIMEOUTA+1) x 4 x tI2CCLK Note: These bits can be written only when TIMOUTEN=0." />
      <BitField start="12" size="1" name="TIDLE" description="Idle clock timeout detection Note: This bit can be written only when TIMOUTEN=0.">
        <Enum name="B_0x0" start="0x0" description="TIMEOUTA is used to detect SCL low timeout" />
        <Enum name="B_0x1" start="0x1" description="TIMEOUTA is used to detect both SCL and SDA high timeout (bus idle condition)" />
      </BitField>
      <BitField start="15" size="1" name="TIMOUTEN" description="Clock timeout enable">
        <Enum name="B_0x0" start="0x0" description="SCL timeout detection is disabled" />
        <Enum name="B_0x1" start="0x1" description="SCL timeout detection is enabled: when SCL is low for more than tTIMEOUT (TIDLE=0) or high for more than tIDLE (TIDLE=1), a timeout error is detected (TIMEOUT=1)." />
      </BitField>
      <BitField start="16" size="12" name="TIMEOUTB" description="Bus timeout B This field is used to configure the cumulative clock extension timeout: In master mode, the master cumulative clock low extend time (tLOW:MEXT) is detected In slave mode, the slave cumulative clock low extend time (tLOW:SEXT) is detected tLOW:EXT= (TIMEOUTB+1) x 2048 x tI2CCLK Note: These bits can be written only when TEXTEN=0." />
      <BitField start="31" size="1" name="TEXTEN" description="Extended clock timeout enable">
        <Enum name="B_0x0" start="0x0" description="Extended clock timeout detection is disabled" />
        <Enum name="B_0x1" start="0x1" description="Extended clock timeout detection is enabled. When a cumulative SCL stretch for more than tLOW:EXT is done by the I2C interface, a timeout error is detected (TIMEOUT=1)." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="I2C_ISR" access="Read/Write" description="Interrupt and Status register" reset_value="0x00000001" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TXE" description="Transmit data register empty (transmitters)" />
      <BitField start="1" size="1" name="TXIS" description="Transmit interrupt status (transmitters)" />
      <BitField start="2" size="1" name="RXNE" description="Receive data register not empty (receivers)" />
      <BitField start="3" size="1" name="ADDR" description="Address matched (slave mode)" />
      <BitField start="4" size="1" name="NACKF" description="Not acknowledge received flag" />
      <BitField start="5" size="1" name="STOPF" description="Stop detection flag" />
      <BitField start="6" size="1" name="TC" description="Transfer Complete (master mode)" />
      <BitField start="7" size="1" name="TCR" description="Transfer Complete Reload" />
      <BitField start="8" size="1" name="BERR" description="Bus error" />
      <BitField start="9" size="1" name="ARLO" description="Arbitration lost" />
      <BitField start="10" size="1" name="OVR" description="Overrun/Underrun (slave mode)" />
      <BitField start="11" size="1" name="PECERR" description="PEC Error in reception" />
      <BitField start="12" size="1" name="TIMEOUT" description="Timeout or t_low detection flag" />
      <BitField start="13" size="1" name="ALERT" description="SMBus alert" />
      <BitField start="15" size="1" name="BUSY" description="Bus busy" />
      <BitField start="16" size="1" name="DIR" description="Transfer direction (Slave mode) This flag is updated when an address match event occurs (ADDR=1).">
        <Enum name="B_0x0" start="0x0" description="Write transfer, slave enters receiver mode." />
        <Enum name="B_0x1" start="0x1" description="Read transfer, slave enters transmitter mode." />
      </BitField>
      <BitField start="17" size="7" name="ADDCODE" description="Address match code (Slave mode)" />
    </Register>
    <Register start="+0x1C" size="0" name="I2C_ICR" access="WriteOnly" description="Interrupt clear register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="3" size="1" name="ADDRCF" description="Address Matched flag clear" />
      <BitField start="4" size="1" name="NACKCF" description="Not Acknowledge flag clear" />
      <BitField start="5" size="1" name="STOPCF" description="Stop detection flag clear" />
      <BitField start="8" size="1" name="BERRCF" description="Bus error flag clear" />
      <BitField start="9" size="1" name="ARLOCF" description="Arbitration lost flag clear" />
      <BitField start="10" size="1" name="OVRCF" description="Overrun/Underrun flag clear" />
      <BitField start="11" size="1" name="PECCF" description="PEC Error flag clear" />
      <BitField start="12" size="1" name="TIMOUTCF" description="Timeout detection flag clear" />
      <BitField start="13" size="1" name="ALERTCF" description="Alert flag clear" />
    </Register>
    <Register start="+0x20" size="0" name="I2C_PECR" access="ReadOnly" description="PEC register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="PEC" description="Packet error checking register" />
    </Register>
    <Register start="+0x24" size="0" name="I2C_RXDR" access="ReadOnly" description="Receive data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="RXDATA" description="8-bit receive data" />
    </Register>
    <Register start="+0x28" size="0" name="I2C_TXDR" access="Read/Write" description="Transmit data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="TXDATA" description="8-bit transmit data" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="I2C3" start="0x40008800" description="Inter-integrated circuit">
    <Register start="+0x0" size="0" name="I2C_CR1" access="Read/Write" description="Control register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Peripheral enable Note: When PE=0, the I2C SCL and SDA lines are released. Internal state machines and status bits are put back to their reset value. When cleared, PE must be kept low for at least 3 APB clock cycles.">
        <Enum name="B_0x0" start="0x0" description="Peripheral disable" />
        <Enum name="B_0x1" start="0x1" description="Peripheral enable" />
      </BitField>
      <BitField start="1" size="1" name="TXIE" description="TX Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Transmit (TXIS) interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmit (TXIS) interrupt enabled" />
      </BitField>
      <BitField start="2" size="1" name="RXIE" description="RX Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Receive (RXNE) interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Receive (RXNE) interrupt enabled" />
      </BitField>
      <BitField start="3" size="1" name="ADDRIE" description="Address match Interrupt enable (slave only)">
        <Enum name="B_0x0" start="0x0" description="Address match (ADDR) interrupts disabled" />
        <Enum name="B_0x1" start="0x1" description="Address match (ADDR) interrupts enabled" />
      </BitField>
      <BitField start="4" size="1" name="NACKIE" description="Not acknowledge received Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Not acknowledge (NACKF) received interrupts disabled" />
        <Enum name="B_0x1" start="0x1" description="Not acknowledge (NACKF) received interrupts enabled" />
      </BitField>
      <BitField start="5" size="1" name="STOPIE" description="Stop detection Interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Stop detection (STOPF) interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Stop detection (STOPF) interrupt enabled" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transfer Complete interrupt enable Note: Any of these events generate an interrupt: Transfer Complete (TC) Transfer Complete Reload (TCR)">
        <Enum name="B_0x0" start="0x0" description="Transfer Complete interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Transfer Complete interrupt enabled" />
      </BitField>
      <BitField start="7" size="1" name="ERRIE" description="Error interrupts enable Note: Any of these errors generate an interrupt: Arbitration Loss (ARLO) Bus Error detection (BERR) Overrun/Underrun (OVR) Timeout detection (TIMEOUT) PEC error detection (PECERR) Alert pin event detection (ALERT)">
        <Enum name="B_0x0" start="0x0" description="Error detection interrupts disabled" />
        <Enum name="B_0x1" start="0x1" description="Error detection interrupts enabled" />
      </BitField>
      <BitField start="8" size="4" name="DNF" description="Digital noise filter These bits are used to configure the digital noise filter on SDA and SCL input. The digital filter, filters spikes with a length of up to DNF[3:0] * tI2CCLK ... Note: If the analog filter is also enabled, the digital filter is added to the analog filter. This filter can only be programmed when the I2C is disabled (PE = 0).">
        <Enum name="B_0x0" start="0x0" description="Digital filter disabled" />
        <Enum name="B_0x1" start="0x1" description="Digital filter enabled and filtering capability up to 1 tI2CCLK" />
        <Enum name="B_0xF" start="0xF" description="digital filter enabled and filtering capability up to15 tI2CCLK" />
      </BitField>
      <BitField start="12" size="1" name="ANFOFF" description="Analog noise filter OFF Note: This bit can only be programmed when the I2C is disabled (PE = 0).">
        <Enum name="B_0x0" start="0x0" description="Analog noise filter enabled" />
        <Enum name="B_0x1" start="0x1" description="Analog noise filter disabled" />
      </BitField>
      <BitField start="14" size="1" name="TXDMAEN" description="DMA transmission requests enable">
        <Enum name="B_0x0" start="0x0" description="DMA mode disabled for transmission" />
        <Enum name="B_0x1" start="0x1" description="DMA mode enabled for transmission" />
      </BitField>
      <BitField start="15" size="1" name="RXDMAEN" description="DMA reception requests enable">
        <Enum name="B_0x0" start="0x0" description="DMA mode disabled for reception" />
        <Enum name="B_0x1" start="0x1" description="DMA mode enabled for reception" />
      </BitField>
      <BitField start="16" size="1" name="SBC" description="Slave byte control This bit is used to enable hardware byte control in slave mode.">
        <Enum name="B_0x0" start="0x0" description="Slave byte control disabled" />
        <Enum name="B_0x1" start="0x1" description="Slave byte control enabled" />
      </BitField>
      <BitField start="17" size="1" name="NOSTRETCH" description="Clock stretching disable This bit is used to disable clock stretching in slave mode. It must be kept cleared in master mode. Note: This bit can only be programmed when the I2C is disabled (PE = 0).">
        <Enum name="B_0x0" start="0x0" description="Clock stretching enabled" />
        <Enum name="B_0x1" start="0x1" description="Clock stretching disabled" />
      </BitField>
      <BitField start="18" size="1" name="WUPEN" description="Wakeup from Stop mode enable Note: If the Wakeup from Stop mode feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to . Note: WUPEN can be set only when DNF = '0000&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;">
        <Enum name="B_0x0" start="0x0" description="Wakeup from Stop mode disable." />
        <Enum name="B_0x1" start="0x1" description="Wakeup from Stop mode enable." />
      </BitField>
      <BitField start="19" size="1" name="GCEN" description="General call enable">
        <Enum name="B_0x0" start="0x0" description="General call disabled. Address 0b00000000 is NACKed." />
        <Enum name="B_0x1" start="0x1" description="General call enabled. Address 0b00000000 is ACKed." />
      </BitField>
      <BitField start="20" size="1" name="SMBHEN" description="SMBus Host Address enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Host Address disabled. Address 0b0001000x is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Host Address enabled. Address 0b0001000x is ACKed." />
      </BitField>
      <BitField start="21" size="1" name="SMBDEN" description="SMBus Device Default Address enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Device Default Address disabled. Address 0b1100001x is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Device Default Address enabled. Address 0b1100001x is ACKed." />
      </BitField>
      <BitField start="22" size="1" name="ALERTEN" description="SMBus alert enable Note: When ALERTEN=0, the SMBA pin can be used as a standard GPIO. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The SMBus alert pin (SMBA) is not supported in host mode (SMBHEN=1). In device mode (SMBHEN=0), the SMBA pin is released and the Alert Response Address header is disabled (0001100x followed by NACK)." />
        <Enum name="B_0x1" start="0x1" description="The SMBus alert pin is supported in host mode (SMBHEN=1). In device mode (SMBHEN=0), the SMBA pin is driven low and the Alert Response Address header is enabled (0001100x followed by ACK)." />
      </BitField>
      <BitField start="23" size="1" name="PECEN" description="PEC enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="PEC calculation disabled" />
        <Enum name="B_0x1" start="0x1" description="PEC calculation enabled" />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="I2C_CR2" access="Read/Write" description="Control register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="10" name="SADD" description="Slave address (master mode) In 7-bit addressing mode (ADD10 = 0): SADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9], SADD[8] and SADD[0] are don't care. In 10-bit addressing mode (ADD10 = 1): SADD[9:0] should be written with the 10-bit slave address to be sent. Note: Changing these bits when the START bit is set is not allowed." />
      <BitField start="10" size="1" name="RD_WRN" description="Transfer direction (master mode) Note: Changing this bit when the START bit is set is not allowed.">
        <Enum name="B_0x0" start="0x0" description="Master requests a write transfer." />
        <Enum name="B_0x1" start="0x1" description="Master requests a read transfer." />
      </BitField>
      <BitField start="11" size="1" name="ADD10" description="10-bit addressing mode (master mode) Note: Changing this bit when the START bit is set is not allowed.">
        <Enum name="B_0x0" start="0x0" description="The master operates in 7-bit addressing mode," />
        <Enum name="B_0x1" start="0x1" description="The master operates in 10-bit addressing mode" />
      </BitField>
      <BitField start="12" size="1" name="HEAD10R" description="10-bit address header only read direction (master receiver mode) Note: Changing this bit when the START bit is set is not allowed.">
        <Enum name="B_0x0" start="0x0" description="The master sends the complete 10 bit slave address read sequence: Start + 2 bytes 10bit address in write direction + Restart + 1st 7 bits of the 10 bit address in read direction." />
        <Enum name="B_0x1" start="0x1" description="The master only sends the 1st 7 bits of the 10 bit address, followed by Read direction." />
      </BitField>
      <BitField start="13" size="1" name="START" description="Start generation This bit is set by software, and cleared by hardware after the Start followed by the address sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0. It can also be cleared by software by writing '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to the ADDRCF bit in the I2C_ICR register. If the I2C is already in master mode with AUTOEND = 0, setting this bit generates a Repeated Start condition when RELOAD=0, after the end of the NBYTES transfer. Otherwise setting this bit generates a START condition once the bus is free. Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect. The START bit can be set even if the bus is BUSY or I2C is in slave mode. This bit has no effect when RELOAD is set.">
        <Enum name="B_0x0" start="0x0" description="No Start generation." />
        <Enum name="B_0x1" start="0x1" description="Restart/Start generation:" />
      </BitField>
      <BitField start="14" size="1" name="STOP" description="Stop generation (master mode) The bit is set by software, cleared by hardware when a STOP condition is detected, or when PE = 0. In Master Mode: Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect.">
        <Enum name="B_0x0" start="0x0" description="No Stop generation." />
        <Enum name="B_0x1" start="0x1" description="Stop generation after current byte transfer." />
      </BitField>
      <BitField start="15" size="1" name="NACK" description="NACK generation (slave mode) The bit is set by software, cleared by hardware when the NACK is sent, or when a STOP condition or an Address matched is received, or when PE=0. Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect. This bit is used in slave mode only: in master receiver mode, NACK is automatically generated after last byte preceding STOP or RESTART condition, whatever the NACK bit value. When an overrun occurs in slave receiver NOSTRETCH mode, a NACK is automatically generated whatever the NACK bit value. When hardware PEC checking is enabled (PECBYTE=1), the PEC acknowledge value does not depend on the NACK value.">
        <Enum name="B_0x0" start="0x0" description="an ACK is sent after current received byte." />
        <Enum name="B_0x1" start="0x1" description="a NACK is sent after current received byte." />
      </BitField>
      <BitField start="16" size="8" name="NBYTES" description="Number of bytes The number of bytes to be transmitted/received is programmed there. This field is don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care in slave mode with SBC=0. Note: Changing these bits when the START bit is set is not allowed." />
      <BitField start="24" size="1" name="RELOAD" description="NBYTES reload mode This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="The transfer is completed after the NBYTES data transfer (STOP or RESTART follows)." />
        <Enum name="B_0x1" start="0x1" description="The transfer is not completed after the NBYTES data transfer (NBYTES is reloaded). TCR flag is set when NBYTES data are transferred, stretching SCL low." />
      </BitField>
      <BitField start="25" size="1" name="AUTOEND" description="Automatic end mode (master mode) This bit is set and cleared by software. Note: This bit has no effect in slave mode or when the RELOAD bit is set.">
        <Enum name="B_0x0" start="0x0" description="software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low." />
        <Enum name="B_0x1" start="0x1" description="Automatic end mode: a STOP condition is automatically sent when NBYTES data are transferred." />
      </BitField>
      <BitField start="26" size="1" name="PECBYTE" description="Packet error checking byte This bit is set by software, and cleared by hardware when the PEC is transferred, or when a STOP condition or an Address matched is received, also when PE=0. Note: Writing '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit has no effect. This bit has no effect when RELOAD is set. This bit has no effect is slave mode when SBC=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No PEC transfer." />
        <Enum name="B_0x1" start="0x1" description="PEC transmission/reception is requested" />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="I2C_OAR1" access="Read/Write" description="Own address register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="10" name="OA1" description="Interface own slave address 7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. The bits OA1[9], OA1[8] and OA1[0] are don't care. 10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address. Note: These bits can be written only when OA1EN=0." />
      <BitField start="10" size="1" name="OA1MODE" description="Own Address 1 10-bit mode Note: This bit can be written only when OA1EN=0.">
        <Enum name="B_0x0" start="0x0" description="Own address 1 is a 7-bit address." />
        <Enum name="B_0x1" start="0x1" description="Own address 1 is a 10-bit address." />
      </BitField>
      <BitField start="15" size="1" name="OA1EN" description="Own Address 1 enable">
        <Enum name="B_0x0" start="0x0" description="Own address 1 disabled. The received slave address OA1 is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Own address 1 enabled. The received slave address OA1 is ACKed." />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="I2C_OAR2" access="Read/Write" description="Own address register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="1" size="7" name="OA2" description="Interface address 7-bit addressing mode: 7-bit address Note: These bits can be written only when OA2EN=0." />
      <BitField start="8" size="3" name="OA2MSK" description="Own Address 2 masks Note: These bits can be written only when OA2EN=0. As soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx and 0b1111xxx) are not acknowledged even if the comparison matches.">
        <Enum name="B_0x0" start="0x0" description="No mask" />
        <Enum name="B_0x1" start="0x1" description="OA2[1] is masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:2] are compared." />
        <Enum name="B_0x2" start="0x2" description="OA2[2:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:3] are compared." />
        <Enum name="B_0x3" start="0x3" description="OA2[3:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:4] are compared." />
        <Enum name="B_0x4" start="0x4" description="OA2[4:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:5] are compared." />
        <Enum name="B_0x5" start="0x5" description="OA2[5:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7:6] are compared." />
        <Enum name="B_0x6" start="0x6" description="OA2[6:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. Only OA2[7] is compared." />
        <Enum name="B_0x7" start="0x7" description="OA2[7:1] are masked and don&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;t care. No comparison is done, and all (except reserved) 7-bit received addresses are acknowledged." />
      </BitField>
      <BitField start="15" size="1" name="OA2EN" description="Own Address 2 enable">
        <Enum name="B_0x0" start="0x0" description="Own address 2 disabled. The received slave address OA2 is NACKed." />
        <Enum name="B_0x1" start="0x1" description="Own address 2 enabled. The received slave address OA2 is ACKed." />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="I2C_TIMINGR" access="Read/Write" description="Timing register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="SCLL" description="SCL low period (master mode)" />
      <BitField start="8" size="8" name="SCLH" description="SCL high period (master mode)" />
      <BitField start="16" size="4" name="SDADEL" description="Data hold time" />
      <BitField start="20" size="4" name="SCLDEL" description="Data setup time" />
      <BitField start="28" size="4" name="PRESC" description="Timing prescaler" />
    </Register>
    <Register start="+0x14" size="0" name="I2C_TIMEOUTR" access="Read/Write" description="Status register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="12" name="TIMEOUTA" description="Bus Timeout A This field is used to configure: The SCL low timeout condition tTIMEOUT when TIDLE=0 tTIMEOUT= (TIMEOUTA+1) x 2048 x tI2CCLK The bus idle condition (both SCL and SDA high) when TIDLE=1 tIDLE= (TIMEOUTA+1) x 4 x tI2CCLK Note: These bits can be written only when TIMOUTEN=0." />
      <BitField start="12" size="1" name="TIDLE" description="Idle clock timeout detection Note: This bit can be written only when TIMOUTEN=0.">
        <Enum name="B_0x0" start="0x0" description="TIMEOUTA is used to detect SCL low timeout" />
        <Enum name="B_0x1" start="0x1" description="TIMEOUTA is used to detect both SCL and SDA high timeout (bus idle condition)" />
      </BitField>
      <BitField start="15" size="1" name="TIMOUTEN" description="Clock timeout enable">
        <Enum name="B_0x0" start="0x0" description="SCL timeout detection is disabled" />
        <Enum name="B_0x1" start="0x1" description="SCL timeout detection is enabled: when SCL is low for more than tTIMEOUT (TIDLE=0) or high for more than tIDLE (TIDLE=1), a timeout error is detected (TIMEOUT=1)." />
      </BitField>
      <BitField start="16" size="12" name="TIMEOUTB" description="Bus timeout B This field is used to configure the cumulative clock extension timeout: In master mode, the master cumulative clock low extend time (tLOW:MEXT) is detected In slave mode, the slave cumulative clock low extend time (tLOW:SEXT) is detected tLOW:EXT= (TIMEOUTB+1) x 2048 x tI2CCLK Note: These bits can be written only when TEXTEN=0." />
      <BitField start="31" size="1" name="TEXTEN" description="Extended clock timeout enable">
        <Enum name="B_0x0" start="0x0" description="Extended clock timeout detection is disabled" />
        <Enum name="B_0x1" start="0x1" description="Extended clock timeout detection is enabled. When a cumulative SCL stretch for more than tLOW:EXT is done by the I2C interface, a timeout error is detected (TIMEOUT=1)." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="I2C_ISR" access="Read/Write" description="Interrupt and Status register" reset_value="0x00000001" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TXE" description="Transmit data register empty (transmitters)" />
      <BitField start="1" size="1" name="TXIS" description="Transmit interrupt status (transmitters)" />
      <BitField start="2" size="1" name="RXNE" description="Receive data register not empty (receivers)" />
      <BitField start="3" size="1" name="ADDR" description="Address matched (slave mode)" />
      <BitField start="4" size="1" name="NACKF" description="Not acknowledge received flag" />
      <BitField start="5" size="1" name="STOPF" description="Stop detection flag" />
      <BitField start="6" size="1" name="TC" description="Transfer Complete (master mode)" />
      <BitField start="7" size="1" name="TCR" description="Transfer Complete Reload" />
      <BitField start="8" size="1" name="BERR" description="Bus error" />
      <BitField start="9" size="1" name="ARLO" description="Arbitration lost" />
      <BitField start="10" size="1" name="OVR" description="Overrun/Underrun (slave mode)" />
      <BitField start="11" size="1" name="PECERR" description="PEC Error in reception" />
      <BitField start="12" size="1" name="TIMEOUT" description="Timeout or t_low detection flag" />
      <BitField start="13" size="1" name="ALERT" description="SMBus alert" />
      <BitField start="15" size="1" name="BUSY" description="Bus busy" />
      <BitField start="16" size="1" name="DIR" description="Transfer direction (Slave mode) This flag is updated when an address match event occurs (ADDR=1).">
        <Enum name="B_0x0" start="0x0" description="Write transfer, slave enters receiver mode." />
        <Enum name="B_0x1" start="0x1" description="Read transfer, slave enters transmitter mode." />
      </BitField>
      <BitField start="17" size="7" name="ADDCODE" description="Address match code (Slave mode)" />
    </Register>
    <Register start="+0x1C" size="0" name="I2C_ICR" access="WriteOnly" description="Interrupt clear register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="3" size="1" name="ADDRCF" description="Address Matched flag clear" />
      <BitField start="4" size="1" name="NACKCF" description="Not Acknowledge flag clear" />
      <BitField start="5" size="1" name="STOPCF" description="Stop detection flag clear" />
      <BitField start="8" size="1" name="BERRCF" description="Bus error flag clear" />
      <BitField start="9" size="1" name="ARLOCF" description="Arbitration lost flag clear" />
      <BitField start="10" size="1" name="OVRCF" description="Overrun/Underrun flag clear" />
      <BitField start="11" size="1" name="PECCF" description="PEC Error flag clear" />
      <BitField start="12" size="1" name="TIMOUTCF" description="Timeout detection flag clear" />
      <BitField start="13" size="1" name="ALERTCF" description="Alert flag clear" />
    </Register>
    <Register start="+0x20" size="0" name="I2C_PECR" access="ReadOnly" description="PEC register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="PEC" description="Packet error checking register" />
    </Register>
    <Register start="+0x24" size="0" name="I2C_RXDR" access="ReadOnly" description="Receive data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="RXDATA" description="8-bit receive data" />
    </Register>
    <Register start="+0x28" size="0" name="I2C_TXDR" access="Read/Write" description="Transmit data register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="TXDATA" description="8-bit transmit data" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="IWDG" start="0x40003000" description="Independent watchdog">
    <Register start="+0x0" size="0" name="IWDG_KR" access="WriteOnly" description="Key register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="KEY" description="Key value (write only, read 0x0000)" />
    </Register>
    <Register start="+0x4" size="0" name="IWDG_PR" access="Read/Write" description="Prescaler register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="PR" description="Prescaler divider These bits are write access protected see . They are written by software to select the prescaler divider feeding the counter clock. PVU bit of the must be reset in order to be able to change the prescaler divider. Note: Reading this register returns the prescaler value from the VDD voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing. For this reason the value read from this register is valid only when the PVU bit in the status register (IWDG_SR) is reset.">
        <Enum name="B_0x0" start="0x0" description="divider /4" />
        <Enum name="B_0x1" start="0x1" description="divider /8" />
        <Enum name="B_0x2" start="0x2" description="divider /16" />
        <Enum name="B_0x3" start="0x3" description="divider /32" />
        <Enum name="B_0x4" start="0x4" description="divider /64" />
        <Enum name="B_0x5" start="0x5" description="divider /128" />
        <Enum name="B_0x6" start="0x6" description="divider /256" />
        <Enum name="B_0x7" start="0x7" description="divider /256" />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="IWDG_RLR" access="Read/Write" description="Reload register" reset_value="0x00000FFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="12" name="RL" description="Watchdog counter reload value" />
    </Register>
    <Register start="+0xC" size="0" name="IWDG_SR" access="ReadOnly" description="Status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PVU" description="Watchdog prescaler value update This bit is set by hardware to indicate that an update of the prescaler value is ongoing. It is reset by hardware when the prescaler update operation is completed in the VDD voltage domain (takes up to five LSI cycles). Prescaler value can be updated only when PVU bit is reset." />
      <BitField start="1" size="1" name="RVU" description="Watchdog counter reload value update This bit is set by hardware to indicate that an update of the reload value is ongoing. It is reset by hardware when the reload value update operation is completed in the VDD voltage domain (takes up to five LSI cycles). Reload value can be updated only when RVU bit is reset." />
      <BitField start="2" size="1" name="WVU" description="Watchdog counter window value update This bit is set by hardware to indicate that an update of the window value is ongoing. It is reset by hardware when the reload value update operation is completed in the VDD voltage domain (takes up to five LSI cycles). Window value can be updated only when WVU bit is reset." />
    </Register>
    <Register start="+0x10" size="0" name="IWDG_WINR" access="Read/Write" description="Window register" reset_value="0x00000FFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="12" name="WIN" description="Watchdog counter window value" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="PWR" start="0x40007000" description="Power control">
    <Register start="+0x0" size="0" name="CR1" access="Read/Write" description="Power control register 1" reset_value="0x00000208" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="LPMS" description="Low-power mode selection" />
      <BitField start="3" size="1" name="FPD_STOP" description="Flash memory powered down during Stop mode" />
      <BitField start="4" size="1" name="FPD_LPRUN" description="Flash memory powered down during Low-power run mode" />
      <BitField start="5" size="1" name="FPD_LPSLP" description="Flash memory powered down during Low-power sleep mode" />
      <BitField start="8" size="1" name="DBP" description="Disable backup domain write protection" />
      <BitField start="9" size="2" name="VOS" description="Voltage scaling range selection" />
      <BitField start="14" size="1" name="LPR" description="Low-power run" />
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="Power control register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="10" size="1" name="USV" description="USV" />
    </Register>
    <Register start="+0x8" size="0" name="CR3" access="Read/Write" description="Power control register 3" reset_value="0X00008000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EWUP1" description="Enable Wakeup pin WKUP1" />
      <BitField start="1" size="1" name="EWUP2" description="Enable Wakeup pin WKUP2" />
      <BitField start="2" size="1" name="EWUP3" description="Enable Wakeup pin WKUP3" />
      <BitField start="3" size="1" name="EWUP4" description="Enable Wakeup pin WKUP4" />
      <BitField start="4" size="1" name="EWUP5" description="Enable WKUP5 wakeup pin" />
      <BitField start="5" size="1" name="EWUP6" description="Enable WKUP6 wakeup pin" />
      <BitField start="10" size="1" name="APC" description="Apply pull-up and pull-down configuration" />
      <BitField start="15" size="1" name="EIWUL" description="Enable internal wakeup line" />
    </Register>
    <Register start="+0xC" size="0" name="CR4" access="Read/Write" description="Power control register 4" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="WP1" description="Wakeup pin WKUP1 polarity" />
      <BitField start="1" size="1" name="WP2" description="Wakeup pin WKUP2 polarity" />
      <BitField start="2" size="1" name="WP3" description="Wakeup pin WKUP3 polarity" />
      <BitField start="3" size="1" name="WP4" description="Wakeup pin WKUP4 polarity" />
      <BitField start="4" size="1" name="WP5" description="Wakeup pin WKUP5 polarity" />
      <BitField start="5" size="1" name="WP6" description="WKUP6 wakeup pin polarity" />
      <BitField start="8" size="1" name="VBE" description="VBAT battery charging enable" />
      <BitField start="9" size="1" name="VBRS" description="VBAT battery charging resistor selection" />
    </Register>
    <Register start="+0x10" size="0" name="SR1" access="ReadOnly" description="Power status register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="WUF1" description="Wakeup flag 1" />
      <BitField start="1" size="1" name="WUF2" description="Wakeup flag 2" />
      <BitField start="2" size="1" name="WUF3" description="Wakeup flag 3" />
      <BitField start="3" size="1" name="WUF4" description="Wakeup flag 4" />
      <BitField start="4" size="1" name="WUF5" description="Wakeup flag 5" />
      <BitField start="5" size="1" name="WUF6" description="Wakeup flag 6" />
      <BitField start="8" size="1" name="SBF" description="Standby flag" />
      <BitField start="15" size="1" name="WUFI" description="Wakeup flag internal" />
    </Register>
    <Register start="+0x14" size="0" name="SR2" access="ReadOnly" description="Power status register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="7" size="1" name="FLASH_RDY" description="Flash ready flag" />
      <BitField start="8" size="1" name="REGLPS" description="Low-power regulator started" />
      <BitField start="9" size="1" name="REGLPF" description="Low-power regulator flag" />
      <BitField start="10" size="1" name="VOSF" description="Voltage scaling flag" />
    </Register>
    <Register start="+0x18" size="0" name="SCR" access="WriteOnly" description="Power status clear register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CWUF1" description="Clear wakeup flag 1" />
      <BitField start="1" size="1" name="CWUF2" description="Clear wakeup flag 2" />
      <BitField start="2" size="1" name="CWUF3" description="Clear wakeup flag 3" />
      <BitField start="3" size="1" name="CWUF4" description="Clear wakeup flag 4" />
      <BitField start="4" size="1" name="CWUF5" description="Clear wakeup flag 5" />
      <BitField start="5" size="1" name="CWUF6" description="Clear wakeup flag 6" />
      <BitField start="8" size="1" name="CSBF" description="Clear standby flag" />
    </Register>
    <Register start="+0x20" size="0" name="PUCRA" access="Read/Write" description="Power Port A pull-up control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PU0" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="1" size="1" name="PU1" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="2" size="1" name="PU2" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="3" size="1" name="PU3" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="4" size="1" name="PU4" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="5" size="1" name="PU5" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="6" size="1" name="PU6" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="7" size="1" name="PU7" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="8" size="1" name="PU8" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="9" size="1" name="PU9" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="10" size="1" name="PU10" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="11" size="1" name="PU11" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="12" size="1" name="PU12" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="13" size="1" name="PU13" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="14" size="1" name="PU14" description="Port A pull-up bit y (y=0..15)" />
      <BitField start="15" size="1" name="PU15" description="Port A pull-up bit y (y=0..15)" />
    </Register>
    <Register start="+0x24" size="0" name="PDCRA" access="Read/Write" description="Power Port A pull-down control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PD0" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="1" size="1" name="PD1" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="2" size="1" name="PD2" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="3" size="1" name="PD3" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="4" size="1" name="PD4" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="5" size="1" name="PD5" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="6" size="1" name="PD6" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="7" size="1" name="PD7" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="8" size="1" name="PD8" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="9" size="1" name="PD9" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="10" size="1" name="PD10" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="11" size="1" name="PD11" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="12" size="1" name="PD12" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="13" size="1" name="PD13" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="14" size="1" name="PD14" description="Port A pull-down bit y (y=0..15)" />
      <BitField start="15" size="1" name="PD15" description="Port A pull-down bit y (y=0..15)" />
    </Register>
    <Register start="+0x28" size="0" name="PUCRB" access="Read/Write" description="Power Port B pull-up control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PU0" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="1" size="1" name="PU1" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="2" size="1" name="PU2" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="3" size="1" name="PU3" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="4" size="1" name="PU4" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="5" size="1" name="PU5" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="6" size="1" name="PU6" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="7" size="1" name="PU7" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="8" size="1" name="PU8" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="9" size="1" name="PU9" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="10" size="1" name="PU10" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="11" size="1" name="PU11" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="12" size="1" name="PU12" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="13" size="1" name="PU13" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="14" size="1" name="PU14" description="Port B pull-up bit y (y=0..15)" />
      <BitField start="15" size="1" name="PU15" description="Port B pull-up bit y (y=0..15)" />
    </Register>
    <Register start="+0x2C" size="0" name="PDCRB" access="Read/Write" description="Power Port B pull-down control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PD0" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="1" size="1" name="PD1" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="2" size="1" name="PD2" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="3" size="1" name="PD3" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="4" size="1" name="PD4" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="5" size="1" name="PD5" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="6" size="1" name="PD6" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="7" size="1" name="PD7" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="8" size="1" name="PD8" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="9" size="1" name="PD9" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="10" size="1" name="PD10" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="11" size="1" name="PD11" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="12" size="1" name="PD12" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="13" size="1" name="PD13" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="14" size="1" name="PD14" description="Port B pull-down bit y (y=0..15)" />
      <BitField start="15" size="1" name="PD15" description="Port B pull-down bit y (y=0..15)" />
    </Register>
    <Register start="+0x30" size="0" name="PUCRC" access="Read/Write" description="Power Port C pull-up control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PU0" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="1" size="1" name="PU1" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="2" size="1" name="PU2" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="3" size="1" name="PU3" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="4" size="1" name="PU4" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="5" size="1" name="PU5" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="6" size="1" name="PU6" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="7" size="1" name="PU7" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="8" size="1" name="PU8" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="9" size="1" name="PU9" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="10" size="1" name="PU10" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="11" size="1" name="PU11" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="12" size="1" name="PU12" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="13" size="1" name="PU13" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="14" size="1" name="PU14" description="Port C pull-up bit y (y=0..15)" />
      <BitField start="15" size="1" name="PU15" description="Port C pull-up bit y (y=0..15)" />
    </Register>
    <Register start="+0x34" size="0" name="PDCRC" access="Read/Write" description="Power Port C pull-down control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PD0" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="1" size="1" name="PD1" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="2" size="1" name="PD2" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="3" size="1" name="PD3" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="4" size="1" name="PD4" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="5" size="1" name="PD5" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="6" size="1" name="PD6" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="7" size="1" name="PD7" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="8" size="1" name="PD8" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="9" size="1" name="PD9" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="10" size="1" name="PD10" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="11" size="1" name="PD11" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="12" size="1" name="PD12" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="13" size="1" name="PD13" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="14" size="1" name="PD14" description="Port C pull-down bit y (y=0..15)" />
      <BitField start="15" size="1" name="PD15" description="Port C pull-down bit y (y=0..15)" />
    </Register>
    <Register start="+0x38" size="0" name="PUCRD" access="Read/Write" description="Power Port D pull-up control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PU0" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="1" size="1" name="PU1" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="2" size="1" name="PU2" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="3" size="1" name="PU3" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="4" size="1" name="PU4" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="5" size="1" name="PU5" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="6" size="1" name="PU6" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="7" size="1" name="PU7" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="8" size="1" name="PU8" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="9" size="1" name="PU9" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="10" size="1" name="PU10" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="11" size="1" name="PU11" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="12" size="1" name="PU12" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="13" size="1" name="PU13" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="14" size="1" name="PU14" description="Port D pull-up bit y (y=0..15)" />
      <BitField start="15" size="1" name="PU15" description="Port D pull-up bit y (y=0..15)" />
    </Register>
    <Register start="+0x3C" size="0" name="PDCRD" access="Read/Write" description="Power Port D pull-down control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PD0" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="1" size="1" name="PD1" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="2" size="1" name="PD2" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="3" size="1" name="PD3" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="4" size="1" name="PD4" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="5" size="1" name="PD5" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="6" size="1" name="PD6" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="7" size="1" name="PD7" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="8" size="1" name="PD8" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="9" size="1" name="PD9" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="10" size="1" name="PD10" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="11" size="1" name="PD11" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="12" size="1" name="PD12" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="13" size="1" name="PD13" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="14" size="1" name="PD14" description="Port D pull-down bit y (y=0..15)" />
      <BitField start="15" size="1" name="PD15" description="Port D pull-down bit y (y=0..15)" />
    </Register>
    <Register start="+0x40" size="0" name="PUCRE" access="Read/Write" description="Power Port E pull-UP control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PU0" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="1" size="1" name="PU1" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="2" size="1" name="PU2" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="3" size="1" name="PU3" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="4" size="1" name="PU4" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="5" size="1" name="PU5" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="6" size="1" name="PU6" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="7" size="1" name="PU7" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="8" size="1" name="PU8" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="9" size="1" name="PU9" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="10" size="1" name="PU10" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="11" size="1" name="PU11" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="12" size="1" name="PU12" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="13" size="1" name="PU13" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="14" size="1" name="PU14" description="Port E pull-up bit y (y=0..15)" />
      <BitField start="15" size="1" name="PU15" description="Port E pull-up bit y (y=0..15)" />
    </Register>
    <Register start="+0x44" size="0" name="PDCRE" access="Read/Write" description="Power Port E pull-down control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PD0" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="1" size="1" name="PD1" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="2" size="1" name="PD2" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="3" size="1" name="PD3" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="4" size="1" name="PD4" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="5" size="1" name="PD5" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="6" size="1" name="PD6" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="7" size="1" name="PD7" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="8" size="1" name="PD8" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="9" size="1" name="PD9" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="10" size="1" name="PD10" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="11" size="1" name="PD11" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="12" size="1" name="PD12" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="13" size="1" name="PD13" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="14" size="1" name="PD14" description="Port E pull-down bit y (y=0..15)" />
      <BitField start="15" size="1" name="PD15" description="Port E pull-down bit y (y=0..15)" />
    </Register>
    <Register start="+0x48" size="0" name="PUCRF" access="Read/Write" description="Power Port F pull-up control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PU0" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="1" size="1" name="PU1" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="2" size="1" name="PU2" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="3" size="1" name="PU3" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="4" size="1" name="PU4" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="5" size="1" name="PU5" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="6" size="1" name="PU6" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="7" size="1" name="PU7" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="8" size="1" name="PU8" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="9" size="1" name="PU9" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="10" size="1" name="PU10" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="11" size="1" name="PU11" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="12" size="1" name="PU12" description="Port F pull-up bit y (y=0..15)" />
      <BitField start="13" size="1" name="PU13" description="Port F pull-up bit y (y=0..15)" />
    </Register>
    <Register start="+0x4C" size="0" name="PDCRF" access="Read/Write" description="Power Port F pull-down control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PD0" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="1" size="1" name="PD1" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="2" size="1" name="PD2" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="3" size="1" name="PD3" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="4" size="1" name="PD4" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="5" size="1" name="PD5" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="6" size="1" name="PD6" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="7" size="1" name="PD7" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="8" size="1" name="PD8" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="9" size="1" name="PD9" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="10" size="1" name="PD10" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="11" size="1" name="PD11" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="12" size="1" name="PD12" description="Port F pull-down bit y (y=0..15)" />
      <BitField start="13" size="1" name="PD13" description="Port F pull-down bit y (y=0..15)" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="RCC" start="0x40021000" description="Reset and clock control">
    <Register start="+0x0" size="0" name="CR" access="Read/Write" description="Clock control register" reset_value="0x00000063" reset_mask="0xFFFFFFFF">
      <BitField start="8" size="1" name="HSION" description="HSI16 clock enable" />
      <BitField start="9" size="1" name="HSIKERON" description="HSI16 always enable for peripheral kernels" />
      <BitField start="10" size="1" name="HSIRDY" description="HSI16 clock ready flag" />
      <BitField start="11" size="3" name="HSIDIV" description="HSI16 clock division factor" />
      <BitField start="16" size="1" name="HSEON" description="HSE clock enable" />
      <BitField start="17" size="1" name="HSERDY" description="HSE clock ready flag" />
      <BitField start="18" size="1" name="HSEBYP" description="HSE crystal oscillator bypass" />
      <BitField start="19" size="1" name="CSSON" description="Clock security system enable" />
      <BitField start="24" size="1" name="PLLON" description="PLL enable" />
      <BitField start="25" size="1" name="PLLRDY" description="PLL clock ready flag" />
    </Register>
    <Register start="+0x4" size="0" name="ICSCR" access="Read/Write" description="Internal clock sources calibration register" reset_value="0x10000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="HSICAL" description="HSI16 clock calibration" />
      <BitField start="8" size="7" name="HSITRIM" description="HSI16 clock trimming" />
    </Register>
    <Register start="+0x8" size="0" name="CFGR" access="Read/Write" description="Clock configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="SW" description="System clock switch" />
      <BitField start="3" size="3" name="SWS" description="System clock switch status" />
      <BitField start="8" size="4" name="HPRE" description="AHB prescaler" />
      <BitField start="12" size="3" name="PPRE" description="APB prescaler" />
      <BitField start="16" size="4" name="MCO2SEL" description="MCO2SEL" />
      <BitField start="20" size="4" name="MCO2PRE" description="MCO2PRE" />
      <BitField start="24" size="4" name="MCOSEL" description="Microcontroller clock output" />
      <BitField start="28" size="4" name="MCOPRE" description="Microcontroller clock output prescaler" />
    </Register>
    <Register start="+0xC" size="0" name="PLLSYSCFGR" access="Read/Write" description="PLL configuration register" reset_value="0x00001000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="PLLSRC" description="PLL input clock source" />
      <BitField start="4" size="3" name="PLLM" description="Division factor M of the PLL input clock divider" />
      <BitField start="8" size="8" name="PLLN" description="PLL frequency multiplication factor N" />
      <BitField start="16" size="1" name="PLLPEN" description="PLLPCLK clock output enable" />
      <BitField start="17" size="5" name="PLLP" description="PLL VCO division factor P for PLLPCLK clock output" />
      <BitField start="24" size="1" name="PLLQEN" description="PLLQCLK clock output enable" />
      <BitField start="25" size="3" name="PLLQ" description="PLL VCO division factor Q for PLLQCLK clock output" />
      <BitField start="28" size="1" name="PLLREN" description="PLLRCLK clock output enable" />
      <BitField start="29" size="3" name="PLLR" description="PLL VCO division factor R for PLLRCLK clock output" />
    </Register>
    <Register start="+0x18" size="0" name="CIER" access="Read/Write" description="Clock interrupt enable register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LSIRDYIE" description="LSI ready interrupt enable" />
      <BitField start="1" size="1" name="LSERDYIE" description="LSE ready interrupt enable" />
      <BitField start="3" size="1" name="HSIRDYIE" description="HSI ready interrupt enable" />
      <BitField start="4" size="1" name="HSERDYIE" description="HSE ready interrupt enable" />
      <BitField start="5" size="1" name="PLLSYSRDYIE" description="PLL ready interrupt enable" />
    </Register>
    <Register start="+0x1C" size="0" name="CIFR" access="ReadOnly" description="Clock interrupt flag register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LSIRDYF" description="LSI ready interrupt flag" />
      <BitField start="1" size="1" name="LSERDYF" description="LSE ready interrupt flag" />
      <BitField start="3" size="1" name="HSIRDYF" description="HSI ready interrupt flag" />
      <BitField start="4" size="1" name="HSERDYF" description="HSE ready interrupt flag" />
      <BitField start="5" size="1" name="PLLSYSRDYF" description="PLL ready interrupt flag" />
      <BitField start="8" size="1" name="CSSF" description="Clock security system interrupt flag" />
      <BitField start="9" size="1" name="LSECSSF" description="LSE Clock security system interrupt flag" />
    </Register>
    <Register start="+0x20" size="0" name="CICR" access="WriteOnly" description="Clock interrupt clear register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LSIRDYC" description="LSI ready interrupt clear" />
      <BitField start="1" size="1" name="LSERDYC" description="LSE ready interrupt clear" />
      <BitField start="3" size="1" name="HSIRDYC" description="HSI ready interrupt clear" />
      <BitField start="4" size="1" name="HSERDYC" description="HSE ready interrupt clear" />
      <BitField start="5" size="1" name="PLLSYSRDYC" description="PLL ready interrupt clear" />
      <BitField start="8" size="1" name="CSSC" description="Clock security system interrupt clear" />
      <BitField start="9" size="1" name="LSECSSC" description="LSE Clock security system interrupt clear" />
    </Register>
    <Register start="+0x24" size="0" name="IOPRSTR" access="Read/Write" description="I/O port reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="GPIOARST" description="GPIOARST" />
      <BitField start="1" size="1" name="GPIOBRST" description="GPIOBRST" />
      <BitField start="2" size="1" name="GPIOCRST" description="GPIOCRST" />
      <BitField start="3" size="1" name="GPIODRST" description="GPIODRST" />
      <BitField start="4" size="1" name="GPIOERST" description="GPIOERST" />
      <BitField start="5" size="1" name="GPIOFRST" description="GPIOFRST" />
    </Register>
    <Register start="+0x28" size="0" name="AHBRSTR" access="Read/Write" description="AHB peripheral reset register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="DMA1RST" description="DMA1 reset" />
      <BitField start="1" size="1" name="DMA2RST" description="DMA1 reset" />
      <BitField start="8" size="1" name="FLASHRST" description="FLITF reset" />
      <BitField start="12" size="1" name="CRCRST" description="CRC reset" />
    </Register>
    <Register start="+0x2C" size="0" name="APBRSTR1" access="Read/Write" description="APB peripheral reset register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="1" size="1" name="TIM3RST" description="TIM3 timer reset" />
      <BitField start="2" size="1" name="TIM4RST" description="TIM4 timer reset" />
      <BitField start="4" size="1" name="TIM6RST" description="TIM6 timer reset" />
      <BitField start="5" size="1" name="TIM7RST" description="TIM7 timer reset" />
      <BitField start="8" size="1" name="USART5RST" description="USART5RST" />
      <BitField start="9" size="1" name="USART6RST" description="USART6RST" />
      <BitField start="13" size="1" name="USBRST" description="USBRST" />
      <BitField start="14" size="1" name="SPI2RST" description="SPI2 reset" />
      <BitField start="15" size="1" name="SPI3RST" description="SPI3 reset" />
      <BitField start="17" size="1" name="USART2RST" description="USART2 reset" />
      <BitField start="18" size="1" name="USART3RST" description="USART3 reset" />
      <BitField start="19" size="1" name="USART4RST" description="USART4 reset" />
      <BitField start="21" size="1" name="I2C1RST" description="I2C1 reset" />
      <BitField start="22" size="1" name="I2C2RST" description="I2C2 reset" />
      <BitField start="23" size="1" name="I2C3RST" description="I2C3RST reset" />
      <BitField start="27" size="1" name="DBGRST" description="Debug support reset" />
      <BitField start="28" size="1" name="PWRRST" description="Power interface reset" />
    </Register>
    <Register start="+0x30" size="0" name="APBRSTR2" access="Read/Write" description="APB peripheral reset register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SYSCFGRST" description="SYSCFG, COMP and VREFBUF reset" />
      <BitField start="11" size="1" name="TIM1RST" description="TIM1 timer reset" />
      <BitField start="12" size="1" name="SPI1RST" description="SPI1 reset" />
      <BitField start="14" size="1" name="USART1RST" description="USART1 reset" />
      <BitField start="15" size="1" name="TIM14RST" description="TIM14 timer reset" />
      <BitField start="16" size="1" name="TIM15RST" description="TIM15 timer reset" />
      <BitField start="17" size="1" name="TIM16RST" description="TIM16 timer reset" />
      <BitField start="18" size="1" name="TIM17RST" description="TIM17 timer reset" />
      <BitField start="20" size="1" name="ADCRST" description="ADC reset" />
    </Register>
    <Register start="+0x34" size="0" name="IOPENR" access="Read/Write" description="GPIO clock enable register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="GPIOAEN" description="I/O port A clock enable during Sleep mode" />
      <BitField start="1" size="1" name="GPIOBEN" description="I/O port B clock enable during Sleep mode" />
      <BitField start="2" size="1" name="GPIOCEN" description="I/O port C clock enable during Sleep mode" />
      <BitField start="3" size="1" name="GPIODEN" description="I/O port D clock enable during Sleep mode" />
      <BitField start="4" size="1" name="GPIOEEN" description="I/O port E clock enable during Sleep mode" />
      <BitField start="5" size="1" name="GPIOFEN" description="I/O port F clock enable during Sleep mode" />
    </Register>
    <Register start="+0x38" size="0" name="AHBENR" access="Read/Write" description="AHB peripheral clock enable register" reset_value="0x00000100" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="DMA1EN" description="DMA1 clock enable" />
      <BitField start="1" size="1" name="DMA2EN" description="DMA2 clock enable" />
      <BitField start="8" size="1" name="FLASHEN" description="Flash memory interface clock enable" />
      <BitField start="12" size="1" name="CRCEN" description="CRC clock enable" />
    </Register>
    <Register start="+0x3C" size="0" name="APBENR1" access="Read/Write" description="APB peripheral clock enable register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="1" size="1" name="TIM3EN" description="TIM3 timer clock enable" />
      <BitField start="2" size="1" name="TIM4EN" description="TIM4 timer clock enable" />
      <BitField start="4" size="1" name="TIM6EN" description="TIM6 timer clock enable" />
      <BitField start="5" size="1" name="TIM7EN" description="TIM7 timer clock enable" />
      <BitField start="8" size="1" name="USART5EN" description="USART5EN" />
      <BitField start="9" size="1" name="USART6EN" description="USART6EN" />
      <BitField start="10" size="1" name="RTCAPBEN" description="RTC APB clock enable" />
      <BitField start="11" size="1" name="WWDGEN" description="WWDG clock enable" />
      <BitField start="13" size="1" name="USBEN" description="USBEN" />
      <BitField start="14" size="1" name="SPI2EN" description="SPI2 clock enable" />
      <BitField start="15" size="1" name="SPI3EN" description="SPI3 clock enable" />
      <BitField start="17" size="1" name="USART2EN" description="USART2 clock enable" />
      <BitField start="18" size="1" name="USART3EN" description="USART3 clock enable" />
      <BitField start="19" size="1" name="USART4EN" description="USART4 clock enable" />
      <BitField start="21" size="1" name="I2C1EN" description="I2C1 clock enable" />
      <BitField start="22" size="1" name="I2C2EN" description="I2C2 clock enable" />
      <BitField start="23" size="1" name="I2C3EN" description="I2C3 clock enable" />
      <BitField start="27" size="1" name="DBGEN" description="Debug support clock enable" />
      <BitField start="28" size="1" name="PWREN" description="Power interface clock enable" />
    </Register>
    <Register start="+0x40" size="0" name="APBENR2" access="Read/Write" description="APB peripheral clock enable register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SYSCFGEN" description="SYSCFG, COMP and VREFBUF clock enable" />
      <BitField start="11" size="1" name="TIM1EN" description="TIM1 timer clock enable" />
      <BitField start="12" size="1" name="SPI1EN" description="SPI1 clock enable" />
      <BitField start="14" size="1" name="USART1EN" description="USART1 clock enable" />
      <BitField start="15" size="1" name="TIM14EN" description="TIM14 timer clock enable" />
      <BitField start="16" size="1" name="TIM15EN" description="TIM15 timer clock enable" />
      <BitField start="17" size="1" name="TIM16EN" description="TIM16 timer clock enable" />
      <BitField start="18" size="1" name="TIM17EN" description="TIM16 timer clock enable" />
      <BitField start="20" size="1" name="ADCEN" description="ADC clock enable" />
    </Register>
    <Register start="+0x44" size="0" name="IOPSMENR" access="Read/Write" description="GPIO in Sleep mode clock enable register" reset_value="0x0000003F" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="GPIOASMEN" description="I/O port A clock enable during Sleep mode" />
      <BitField start="1" size="1" name="GPIOBSMEN" description="I/O port B clock enable during Sleep mode" />
      <BitField start="2" size="1" name="GPIOCSMEN" description="I/O port C clock enable during Sleep mode" />
      <BitField start="3" size="1" name="GPIODSMEN" description="I/O port D clock enable during Sleep mode" />
      <BitField start="4" size="1" name="GPIOESMEN" description="I/O port E clock enable during Sleep mode" />
      <BitField start="5" size="1" name="GPIOFSMEN" description="I/O port F clock enable during Sleep mode" />
    </Register>
    <Register start="+0x48" size="0" name="AHBSMENR" access="Read/Write" description="AHB peripheral clock enable in Sleep mode register" reset_value="0x00051303" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="DMA1SMEN" description="DMA1 clock enable during Sleep mode" />
      <BitField start="1" size="1" name="DMA2SMEN" description="DMA2 clock enable during Sleep mode" />
      <BitField start="8" size="1" name="FLASHSMEN" description="Flash memory interface clock enable during Sleep mode" />
      <BitField start="9" size="1" name="SRAMSMEN" description="SRAM clock enable during Sleep mode" />
      <BitField start="12" size="1" name="CRCSMEN" description="CRC clock enable during Sleep mode" />
    </Register>
    <Register start="+0x4C" size="0" name="APBSMENR1" access="Read/Write" description="APB peripheral clock enable in Sleep mode register 1" reset_value="0xFFFFFFB7" reset_mask="0xFFFFFFFF">
      <BitField start="1" size="1" name="TIM3SMEN" description="TIM3 timer clock enable during Sleep mode" />
      <BitField start="2" size="1" name="TIM4SMEN" description="TIM4 timer clock enable during Sleep mode" />
      <BitField start="4" size="1" name="TIM6SMEN" description="TIM6 timer clock enable during Sleep mode" />
      <BitField start="5" size="1" name="TIM7SMEN" description="TIM7 timer clock enable during Sleep mode" />
      <BitField start="8" size="1" name="USART5SMEN" description="USART5 clock enable" />
      <BitField start="9" size="1" name="USART6SMEN" description="USART6 clock enable" />
      <BitField start="10" size="1" name="RTCAPBSMEN" description="RTC APB clock enable during Sleep mode" />
      <BitField start="11" size="1" name="WWDGSMEN" description="WWDG clock enable during Sleep mode" />
      <BitField start="13" size="1" name="USBSMEN" description="USB clock enable during Sleep mode" />
      <BitField start="14" size="1" name="SPI2SMEN" description="SPI2 clock enable during Sleep mode" />
      <BitField start="15" size="1" name="SPI3SMEN" description="SPI3 clock enable during Sleep mode" />
      <BitField start="17" size="1" name="USART2SMEN" description="USART2 clock enable during Sleep mode" />
      <BitField start="18" size="1" name="USART3SMEN" description="USART3 clock enable during Sleep mode" />
      <BitField start="19" size="1" name="USART4SMEN" description="USART4 clock enable during Sleep mode" />
      <BitField start="21" size="1" name="I2C1SMEN" description="I2C1 clock enable during Sleep mode" />
      <BitField start="22" size="1" name="I2C2SMEN" description="I2C2 clock enable during Sleep mode" />
      <BitField start="23" size="1" name="I2C3SMEN" description="I2C3 clock enable during Sleep mode" />
      <BitField start="27" size="1" name="DBGSMEN" description="Debug support clock enable during Sleep mode" />
      <BitField start="28" size="1" name="PWRSMEN" description="Power interface clock enable during Sleep mode" />
    </Register>
    <Register start="+0x50" size="0" name="APBSMENR2" access="Read/Write" description="APB peripheral clock enable in Sleep mode register 2" reset_value="0x0017D801" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SYSCFGSMEN" description="SYSCFG, COMP and VREFBUF clock enable during Sleep mode" />
      <BitField start="11" size="1" name="TIM1SMEN" description="TIM1 timer clock enable during Sleep mode" />
      <BitField start="12" size="1" name="SPI1SMEN" description="SPI1 clock enable during Sleep mode" />
      <BitField start="14" size="1" name="USART1SMEN" description="USART1 clock enable during Sleep mode" />
      <BitField start="15" size="1" name="TIM14SMEN" description="TIM14 timer clock enable during Sleep mode" />
      <BitField start="16" size="1" name="TIM15SMEN" description="TIM15 timer clock enable during Sleep mode" />
      <BitField start="17" size="1" name="TIM16SMEN" description="TIM16 timer clock enable during Sleep mode" />
      <BitField start="18" size="1" name="TIM17SMEN" description="TIM16 timer clock enable during Sleep mode" />
      <BitField start="20" size="1" name="ADCSMEN" description="ADC clock enable during Sleep mode" />
    </Register>
    <Register start="+0x54" size="0" name="CCIPR" access="Read/Write" description="Peripherals independent clock configuration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="USART1SEL" description="USART1 clock source selection" />
      <BitField start="2" size="2" name="USART2SEL" description="USART2 clock source selection" />
      <BitField start="4" size="2" name="USART3SEL" description="USART3 clock source selection" />
      <BitField start="12" size="2" name="I2C1SEL" description="I2C1 clock source selection" />
      <BitField start="14" size="2" name="I2S2SEL" description="I2S1 clock source selection" />
      <BitField start="22" size="1" name="TIM1SEL" description="TIM1 clock source selection" />
      <BitField start="24" size="1" name="TIM15SEL" description="TIM15 clock source selection" />
      <BitField start="30" size="2" name="ADCSEL" description="ADCs clock source selection" />
    </Register>
    <Register start="+0x58" size="0" name="CCIPR2" access="Read/Write" description="Peripherals independent clock configuration register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="I2S1SEL" description="2S1SEL" />
      <BitField start="2" size="2" name="I2S2SEL" description="I2S2SEL" />
      <BitField start="12" size="2" name="USBSEL" description="USBSEL" />
    </Register>
    <Register start="+0x5C" size="0" name="BDCR" access="Read/Write" description="RTC domain control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LSEON" description="LSE oscillator enable" />
      <BitField start="1" size="1" name="LSERDY" description="LSE oscillator ready" />
      <BitField start="2" size="1" name="LSEBYP" description="LSE oscillator bypass" />
      <BitField start="3" size="2" name="LSEDRV" description="LSE oscillator drive capability" />
      <BitField start="5" size="1" name="LSECSSON" description="CSS on LSE enable" />
      <BitField start="6" size="1" name="LSECSSD" description="CSS on LSE failure Detection" />
      <BitField start="8" size="2" name="RTCSEL" description="RTC clock source selection" />
      <BitField start="15" size="1" name="RTCEN" description="RTC clock enable" />
      <BitField start="16" size="1" name="BDRST" description="RTC domain software reset" />
      <BitField start="24" size="1" name="LSCOEN" description="Low-speed clock output (LSCO) enable" />
      <BitField start="25" size="1" name="LSCOSEL" description="Low-speed clock output selection" />
    </Register>
    <Register start="+0x60" size="0" name="CSR" access="Read/Write" description="Control/status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LSION" description="LSI oscillator enable" />
      <BitField start="1" size="1" name="LSIRDY" description="LSI oscillator ready" />
      <BitField start="23" size="1" name="RMVF" description="Remove reset flags" />
      <BitField start="25" size="1" name="OBLRSTF" description="Option byte loader reset flag" />
      <BitField start="26" size="1" name="PINRSTF" description="Pin reset flag" />
      <BitField start="27" size="1" name="PWRRSTF" description="BOR or POR/PDR flag" />
      <BitField start="28" size="1" name="SFTRSTF" description="Software reset flag" />
      <BitField start="29" size="1" name="IWDGRSTF" description="Independent window watchdog reset flag" />
      <BitField start="30" size="1" name="WWDGRSTF" description="Window watchdog reset flag" />
      <BitField start="31" size="1" name="LPWRRSTF" description="Low-power reset flag" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="RTC" start="0x40002800" description="Real-time clock">
    <Register start="+0x0" size="0" name="RTC_TR" access="Read/Write" description="RTC time register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="SU" description="Second units in BCD format" />
      <BitField start="4" size="3" name="ST" description="Second tens in BCD format" />
      <BitField start="8" size="4" name="MNU" description="Minute units in BCD format" />
      <BitField start="12" size="3" name="MNT" description="Minute tens in BCD format" />
      <BitField start="16" size="4" name="HU" description="Hour units in BCD format" />
      <BitField start="20" size="2" name="HT" description="Hour tens in BCD format" />
      <BitField start="22" size="1" name="PM" description="AM/PM notation">
        <Enum name="B_0x0" start="0x0" description="AM or 24-hour format" />
        <Enum name="B_0x1" start="0x1" description="PM" />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="RTC_DR" access="Read/Write" description="RTC date register" reset_value="0x00002101" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="DU" description="Date units in BCD format" />
      <BitField start="4" size="2" name="DT" description="Date tens in BCD format" />
      <BitField start="8" size="4" name="MU" description="Month units in BCD format" />
      <BitField start="12" size="1" name="MT" description="Month tens in BCD format" />
      <BitField start="13" size="3" name="WDU" description="Week day units ...">
        <Enum name="B_0x0" start="0x0" description="forbidden" />
        <Enum name="B_0x1" start="0x1" description="Monday" />
        <Enum name="B_0x7" start="0x7" description="Sunday" />
      </BitField>
      <BitField start="16" size="4" name="YU" description="Year units in BCD format" />
      <BitField start="20" size="4" name="YT" description="Year tens in BCD format" />
    </Register>
    <Register start="+0x8" size="0" name="RTC_SSR" access="Read/Write" description="RTC sub second register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="SS" description="Sub second value SS[15:0] is the value in the synchronous prescaler counter. The fraction of a second is given by the formula below: Second fraction = (PREDIV_S - SS) / (PREDIV_S + 1) Note: SS can be larger than PREDIV_S only after a shift operation. In that case, the correct time/date is one second less than as indicated by RTC_TR/RTC_DR." />
    </Register>
    <Register start="+0xC" size="0" name="RTC_ICSR" access="Read/Write" description="RTC initialization control and status register" reset_value="0x00000007" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ALRAWF" description="Alarm A write flag This bit is set by hardware when alarm A values can be changed, after the ALRAE bit has been set to 0 in RTC_CR. It is cleared by hardware in initialization mode.">
        <Enum name="B_0x0" start="0x0" description="Alarm A update not allowed" />
        <Enum name="B_0x1" start="0x1" description="Alarm A update allowed" />
      </BitField>
      <BitField start="1" size="1" name="ALRBWF" description="Alarm B write flag This bit is set by hardware when alarm B values can be changed, after the ALRBE bit has been set to 0 in RTC_CR. It is cleared by hardware in initialization mode.">
        <Enum name="B_0x0" start="0x0" description="Alarm B update not allowed" />
        <Enum name="B_0x1" start="0x1" description="Alarm B update allowed" />
      </BitField>
      <BitField start="2" size="1" name="WUTWF" description="Wakeup timer write flag This bit is set by hardware when WUT value can be changed, after the WUTE bit has been set to 0 in RTC_CR. It is cleared by hardware in initialization mode.">
        <Enum name="B_0x0" start="0x0" description="Wakeup timer configuration update not allowed except in initialization mode" />
        <Enum name="B_0x1" start="0x1" description="Wakeup timer configuration update allowed" />
      </BitField>
      <BitField start="3" size="1" name="SHPF" description="Shift operation pending This flag is set by hardware as soon as a shift operation is initiated by a write to the RTC_SHIFTR register. It is cleared by hardware when the corresponding shift operation has been executed. Writing to the SHPF bit has no effect.">
        <Enum name="B_0x0" start="0x0" description="No shift operation is pending" />
        <Enum name="B_0x1" start="0x1" description="A shift operation is pending" />
      </BitField>
      <BitField start="4" size="1" name="INITS" description="Initialization status flag This bit is set by hardware when the calendar year field is different from 0 (Backup domain reset state).">
        <Enum name="B_0x0" start="0x0" description="Calendar has not been initialized" />
        <Enum name="B_0x1" start="0x1" description="Calendar has been initialized" />
      </BitField>
      <BitField start="5" size="1" name="RSF" description="Registers synchronization flag This bit is set by hardware each time the calendar registers are copied into the shadow registers (RTC_SSR, RTC_TR and RTC_DR). This bit is cleared by hardware in initialization mode, while a shift operation is pending (SHPF = 1), or when in bypass shadow register mode (BYPSHAD = 1). This bit can also be cleared by software. It is cleared either by software or by hardware in initialization mode.">
        <Enum name="B_0x0" start="0x0" description="Calendar shadow registers not yet synchronized" />
        <Enum name="B_0x1" start="0x1" description="Calendar shadow registers synchronized" />
      </BitField>
      <BitField start="6" size="1" name="INITF" description="Initialization flag When this bit is set to 1, the RTC is in initialization state, and the time, date and prescaler registers can be updated.">
        <Enum name="B_0x0" start="0x0" description="Calendar registers update is not allowed" />
        <Enum name="B_0x1" start="0x1" description="Calendar registers update is allowed" />
      </BitField>
      <BitField start="7" size="1" name="INIT" description="Initialization mode">
        <Enum name="B_0x0" start="0x0" description="Free running mode" />
        <Enum name="B_0x1" start="0x1" description="Initialization mode used to program time and date register (RTC_TR and RTC_DR), and prescaler register (RTC_PRER). Counters are stopped and start counting from the new value when INIT is reset." />
      </BitField>
      <BitField start="16" size="1" name="RECALPF" description="Recalibration pending Flag The RECALPF status flag is automatically set to 1 when software writes to the RTC_CALR register, indicating that the RTC_CALR register is blocked. When the new calibration settings are taken into account, this bit returns to 0. Refer to ." />
    </Register>
    <Register start="+0x10" size="0" name="RTC_PRER" access="Read/Write" description="RTC prescaler register" reset_value="0x007F00FF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="15" name="PREDIV_S" description="Synchronous prescaler factor This is the synchronous division factor: ck_spre frequency = ck_apre frequency/(PREDIV_S+1)" />
      <BitField start="16" size="7" name="PREDIV_A" description="Asynchronous prescaler factor This is the asynchronous division factor: ck_apre frequency = RTCCLK frequency/(PREDIV_A+1)" />
    </Register>
    <Register start="+0x14" size="0" name="RTC_WUTR" access="Read/Write" description="RTC wakeup timer register" reset_value="0x0000FFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="WUT" description="Wakeup auto-reload value bits When the wakeup timer is enabled (WUTE set to 1), the WUTF flag is set every (WUT[15:0]+1) ck_wut cycles. The ck_wut period is selected through WUCKSEL[2:0] bits of the RTC_CR register. When WUCKSEL[2] = 1, the wakeup timer becomes 17-bits and WUCKSEL[1] effectively becomes WUT[16] the most-significant bit to be reloaded into the timer. The first assertion of WUTF occurs between WUT and (WUT + 1) ck_wut cycles after WUTE is set. Setting WUT[15:0] to 0x0000 with WUCKSEL[2:0] = 011 (RTCCLK/2) is forbidden." />
    </Register>
    <Register start="+0x18" size="0" name="RTC_CR" access="Read/Write" description="control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="WUCKSEL" description="ck_wut wakeup clock selection 10x: ck_spre (usually 1Hz) clock is selected 11x: ck_spre (usually 1Hz) clock is selected and 216is added to the WUT counter value">
        <Enum name="B_0x0" start="0x0" description="RTC/16 clock is selected" />
        <Enum name="B_0x1" start="0x1" description="RTC/8 clock is selected" />
        <Enum name="B_0x2" start="0x2" description="RTC/4 clock is selected" />
        <Enum name="B_0x3" start="0x3" description="RTC/2 clock is selected" />
      </BitField>
      <BitField start="3" size="1" name="TSEDGE" description="Timestamp event active edge TSE must be reset when TSEDGE is changed to avoid unwanted TSF setting.">
        <Enum name="B_0x0" start="0x0" description="RTC_TS input rising edge generates a timestamp event" />
        <Enum name="B_0x1" start="0x1" description="RTC_TS input falling edge generates a timestamp event" />
      </BitField>
      <BitField start="4" size="1" name="REFCKON" description="RTC_REFIN reference clock detection enable (50 or 60Hz) Note: PREDIV_S must be 0x00FF.">
        <Enum name="B_0x0" start="0x0" description="RTC_REFIN detection disabled" />
        <Enum name="B_0x1" start="0x1" description="RTC_REFIN detection enabled" />
      </BitField>
      <BitField start="5" size="1" name="BYPSHAD" description="Bypass the shadow registers Note: If the frequency of the APB1 clock is less than seven times the frequency of RTCCLK, BYPSHAD must be set to 1.">
        <Enum name="B_0x0" start="0x0" description="Calendar values (when reading from RTC_SSR, RTC_TR, and RTC_DR) are taken from the shadow registers, which are updated once every two RTCCLK cycles." />
        <Enum name="B_0x1" start="0x1" description="Calendar values (when reading from RTC_SSR, RTC_TR, and RTC_DR) are taken directly from the calendar counters." />
      </BitField>
      <BitField start="6" size="1" name="FMT" description="Hour format">
        <Enum name="B_0x0" start="0x0" description="24 hour/day format" />
        <Enum name="B_0x1" start="0x1" description="AM/PM hour format" />
      </BitField>
      <BitField start="8" size="1" name="ALRAE" description="Alarm A enable">
        <Enum name="B_0x0" start="0x0" description="Alarm A disabled" />
        <Enum name="B_0x1" start="0x1" description="Alarm A enabled" />
      </BitField>
      <BitField start="9" size="1" name="ALRBE" description="Alarm B enable">
        <Enum name="B_0x0" start="0x0" description="Alarm B disabled" />
        <Enum name="B_0x1" start="0x1" description="Alarm B enabled" />
      </BitField>
      <BitField start="10" size="1" name="WUTE" description="Wakeup timer enable Note: When the wakeup timer is disabled, wait for WUTWF=1 before enabling it again.">
        <Enum name="B_0x0" start="0x0" description="Wakeup timer disabled" />
        <Enum name="B_0x1" start="0x1" description="Wakeup timer enabled" />
      </BitField>
      <BitField start="11" size="1" name="TSE" description="timestamp enable">
        <Enum name="B_0x0" start="0x0" description="timestamp disable" />
        <Enum name="B_0x1" start="0x1" description="timestamp enable" />
      </BitField>
      <BitField start="12" size="1" name="ALRAIE" description="Alarm A interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Alarm A interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Alarm A interrupt enabled" />
      </BitField>
      <BitField start="13" size="1" name="ALRBIE" description="Alarm B interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Alarm B interrupt disable" />
        <Enum name="B_0x1" start="0x1" description="Alarm B interrupt enable" />
      </BitField>
      <BitField start="14" size="1" name="WUTIE" description="Wakeup timer interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Wakeup timer interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Wakeup timer interrupt enabled" />
      </BitField>
      <BitField start="15" size="1" name="TSIE" description="Timestamp interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Timestamp interrupt disable" />
        <Enum name="B_0x1" start="0x1" description="Timestamp interrupt enable" />
      </BitField>
      <BitField start="16" size="1" name="ADD1H" description="Add 1 hour (summer time change) When this bit is set outside initialization mode, 1 hour is added to the calendar time. This bit is always read as 0.">
        <Enum name="B_0x0" start="0x0" description="No effect" />
        <Enum name="B_0x1" start="0x1" description="Adds 1 hour to the current time. This can be used for summer time change" />
      </BitField>
      <BitField start="17" size="1" name="SUB1H" description="Subtract 1 hour (winter time change) When this bit is set outside initialization mode, 1 hour is subtracted to the calendar time if the current hour is not 0. This bit is always read as 0. Setting this bit has no effect when current hour is 0.">
        <Enum name="B_0x0" start="0x0" description="No effect" />
        <Enum name="B_0x1" start="0x1" description="Subtracts 1 hour to the current time. This can be used for winter time change." />
      </BitField>
      <BitField start="18" size="1" name="BKP" description="Backup This bit can be written by the user to memorize whether the daylight saving time change has been performed or not." />
      <BitField start="19" size="1" name="COSEL" description="Calibration output selection When COE = 1, this bit selects which signal is output on CALIB. These frequencies are valid for RTCCLK at 32.768kHz and prescalers at their default values (PREDIV_A = 127 and PREDIV_S = 255). Refer to .">
        <Enum name="B_0x0" start="0x0" description="Calibration output is 512Hz" />
        <Enum name="B_0x1" start="0x1" description="Calibration output is 1Hz" />
      </BitField>
      <BitField start="20" size="1" name="POL" description="Output polarity This bit is used to configure the polarity of TAMPALRM output.">
        <Enum name="B_0x0" start="0x0" description="The pin is high when ALRAF/ALRBF/WUTF is asserted (depending on OSEL[1:0]), or when a TAMPxF/ITAMPxF is asserted (if TAMPOE = 1)." />
        <Enum name="B_0x1" start="0x1" description="The pin is low when ALRAF/ALRBF/WUTF is asserted (depending on OSEL[1:0]), or when a TAMPxF/ITAMPxF is asserted (if TAMPOE = 1)." />
      </BitField>
      <BitField start="21" size="2" name="OSEL" description="Output selection These bits are used to select the flag to be routed to TAMPALRM output.">
        <Enum name="B_0x0" start="0x0" description="Output disabled" />
        <Enum name="B_0x1" start="0x1" description="Alarm A output enabled" />
        <Enum name="B_0x2" start="0x2" description="Alarm B output enabled" />
        <Enum name="B_0x3" start="0x3" description="Wakeup output enabled" />
      </BitField>
      <BitField start="23" size="1" name="COE" description="Calibration output enable This bit enables the CALIB output">
        <Enum name="B_0x0" start="0x0" description="Calibration output disabled" />
        <Enum name="B_0x1" start="0x1" description="Calibration output enabled" />
      </BitField>
      <BitField start="24" size="1" name="ITSE" description="timestamp on internal event enable">
        <Enum name="B_0x0" start="0x0" description="internal event timestamp disabled" />
        <Enum name="B_0x1" start="0x1" description="internal event timestamp enabled" />
      </BitField>
      <BitField start="25" size="1" name="TAMPTS" description="Activate timestamp on tamper detection event TAMPTS is valid even if TSE = 0 in the RTC_CR register. Timestamp flag is set after the tamper flags, therefore if TAMPTS and TSIE are set, it is recommended to disable the tamper interrupts in order to avoid servicing 2 interrupts.">
        <Enum name="B_0x0" start="0x0" description="Tamper detection event does not cause a RTC timestamp to be saved" />
        <Enum name="B_0x1" start="0x1" description="Save RTC timestamp on tamper detection event" />
      </BitField>
      <BitField start="26" size="1" name="TAMPOE" description="Tamper detection output enable on TAMPALRM">
        <Enum name="B_0x0" start="0x0" description="The tamper flag is not routed on TAMPALRM" />
        <Enum name="B_0x1" start="0x1" description="The tamper flag is routed on TAMPALRM, combined with the signal provided by OSEL and with the polarity provided by POL." />
      </BitField>
      <BitField start="29" size="1" name="TAMPALRM_PU" description="TAMPALRM pull-up enable">
        <Enum name="B_0x0" start="0x0" description="No pull-up is applied on TAMPALRM output" />
        <Enum name="B_0x1" start="0x1" description="A pull-up is applied on TAMPALRM output" />
      </BitField>
      <BitField start="30" size="1" name="TAMPALRM_TYPE" description="TAMPALRM output type">
        <Enum name="B_0x0" start="0x0" description="TAMPALRM is push-pull output" />
        <Enum name="B_0x1" start="0x1" description="TAMPALRM is open-drain output" />
      </BitField>
      <BitField start="31" size="1" name="OUT2EN" description="RTC_OUT2 output enable Setting this bit allows to remap the RTC outputs on RTC_OUT2 as follows: OUT2EN = 0: RTC output 2 disable If OSEL &#xc3;&#xa2;&#xc2;&#x89;&#xc2; 00 or TAMPOE = 1: TAMPALRM is output on RTC_OUT1 If OSEL = 00 and TAMPOE = 0 and COE = 1: CALIB is output on RTC_OUT1 OUT2EN = 1: RTC output 2 enable If (OSEL &#xc3;&#xa2;&#xc2;&#x89;&#xc2; 00 or TAMPOE = 1) and COE = 0: TAMPALRM is output on RTC_OUT2 If OSEL = 00 and TAMPOE = 0 and COE = 1: CALIB is output on RTC_OUT2 If (OSEL&#xc3;&#xa2;&#xc2;&#x89;&#xc2; 00 or TAMPOE = 1) and COE = 1: CALIB is output on RTC_OUT2 and TAMPALRM is output on RTC_OUT1." />
    </Register>
    <Register start="+0x24" size="0" name="RTC_WPR" access="Read/Write" description="write protection register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="KEY" description="Write protection key This byte is written by software. Reading this byte always returns 0x00. Refer to for a description of how to unlock RTC register write protection." />
    </Register>
    <Register start="+0x28" size="0" name="RTC_CALR" access="Read/Write" description="RTC calibration register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="CALM" description="Calibration minus The frequency of the calendar is reduced by masking CALM out of 220 RTCCLK pulses (32 seconds if the input frequency is 32768Hz). This decreases the frequency of the calendar with a resolution of 0.9537ppm. To increase the frequency of the calendar, this feature should be used in conjunction with CALP. See ." />
      <BitField start="13" size="1" name="CALW16" description="Use a 16-second calibration cycle period When CALW16 is set to 1, the 16-second calibration cycle period is selected. This bit must not be set to 1 if CALW8 = 1. Note: CALM[0] is stuck at 0 when CALW16 = 1. Refer to calibration." />
      <BitField start="14" size="1" name="CALW8" description="Use an 8-second calibration cycle period When CALW8 is set to 1, the 8-second calibration cycle period is selected. Note: CALM[1:0] are stuck at 00 when CALW8 = 1. Refer to digital calibration." />
      <BitField start="15" size="1" name="CALP" description="Increase frequency of RTC by 488.5ppm This feature is intended to be used in conjunction with CALM, which lowers the frequency of the calendar with a fine resolution. if the input frequency is 32768Hz, the number of RTCCLK pulses added during a 32-second window is calculated as follows: (512 &#xc3;&#x83;&#xc2;&#x97; CALP) - CALM. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No RTCCLK pulses are added." />
        <Enum name="B_0x1" start="0x1" description="One RTCCLK pulse is effectively inserted every 211 pulses (frequency increased by 488.5ppm)." />
      </BitField>
    </Register>
    <Register start="+0x2C" size="0" name="RTC_SHIFTR" access="Read/Write" description="RTC shift control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="15" name="SUBFS" description="Subtract a fraction of a second These bits are write only and is always read as zero. Writing to this bit has no effect when a shift operation is pending (when SHPF = 1, in RTC_ICSR). The value which is written to SUBFS is added to the synchronous prescaler counter. Since this counter counts down, this operation effectively subtracts from (delays) the clock by: Delay (seconds) = SUBFS / (PREDIV_S + 1) A fraction of a second can effectively be added to the clock (advancing the clock) when the ADD1S function is used in conjunction with SUBFS, effectively advancing the clock by: Advance (seconds) = (1 - (SUBFS / (PREDIV_S + 1))). Note: Writing to SUBFS causes RSF to be cleared. Software can then wait until RSF = 1 to be sure that the shadow registers have been updated with the shifted time." />
      <BitField start="31" size="1" name="ADD1S" description="Add one second This bit is write only and is always read as zero. Writing to this bit has no effect when a shift operation is pending (when SHPF = 1, in RTC_ICSR). This function is intended to be used with SUBFS (see description below) in order to effectively add a fraction of a second to the clock in an atomic operation.">
        <Enum name="B_0x0" start="0x0" description="No effect" />
        <Enum name="B_0x1" start="0x1" description="Add one second to the clock/calendar" />
      </BitField>
    </Register>
    <Register start="+0x30" size="0" name="RTC_TSTR" access="Read/Write" description="RTC timestamp time register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="SU" description="Second units in BCD format." />
      <BitField start="4" size="3" name="ST" description="Second tens in BCD format." />
      <BitField start="8" size="4" name="MNU" description="Minute units in BCD format." />
      <BitField start="12" size="3" name="MNT" description="Minute tens in BCD format." />
      <BitField start="16" size="4" name="HU" description="Hour units in BCD format." />
      <BitField start="20" size="2" name="HT" description="Hour tens in BCD format." />
      <BitField start="22" size="1" name="PM" description="AM/PM notation">
        <Enum name="B_0x0" start="0x0" description="AM or 24-hour format" />
        <Enum name="B_0x1" start="0x1" description="PM" />
      </BitField>
    </Register>
    <Register start="+0x34" size="0" name="RTC_TSDR" access="Read/Write" description="RTC timestamp date register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="DU" description="Date units in BCD format" />
      <BitField start="4" size="2" name="DT" description="Date tens in BCD format" />
      <BitField start="8" size="4" name="MU" description="Month units in BCD format" />
      <BitField start="12" size="1" name="MT" description="Month tens in BCD format" />
      <BitField start="13" size="3" name="WDU" description="Week day units" />
    </Register>
    <Register start="+0x38" size="0" name="RTC_TSSSR" access="Read/Write" description="RTC timestamp sub second register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="SS" description="Sub second value SS[15:0] is the value of the synchronous prescaler counter when the timestamp event occurred." />
    </Register>
    <Register start="+0x40" size="0" name="RTC_ALRMAR" access="Read/Write" description="RTC alarm A register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="SU" description="Second units in BCD format." />
      <BitField start="4" size="3" name="ST" description="Second tens in BCD format." />
      <BitField start="7" size="1" name="MSK1" description="Alarm A seconds mask">
        <Enum name="B_0x0" start="0x0" description="Alarm A set if the seconds match" />
        <Enum name="B_0x1" start="0x1" description="Seconds don't care in alarm A comparison" />
      </BitField>
      <BitField start="8" size="4" name="MNU" description="Minute units in BCD format" />
      <BitField start="12" size="3" name="MNT" description="Minute tens in BCD format" />
      <BitField start="15" size="1" name="MSK2" description="Alarm A minutes mask">
        <Enum name="B_0x0" start="0x0" description="Alarm A set if the minutes match" />
        <Enum name="B_0x1" start="0x1" description="Minutes don't care in alarm A comparison" />
      </BitField>
      <BitField start="16" size="4" name="HU" description="Hour units in BCD format" />
      <BitField start="20" size="2" name="HT" description="Hour tens in BCD format" />
      <BitField start="22" size="1" name="PM" description="AM/PM notation">
        <Enum name="B_0x0" start="0x0" description="AM or 24-hour format" />
        <Enum name="B_0x1" start="0x1" description="PM" />
      </BitField>
      <BitField start="23" size="1" name="MSK3" description="Alarm A hours mask">
        <Enum name="B_0x0" start="0x0" description="Alarm A set if the hours match" />
        <Enum name="B_0x1" start="0x1" description="Hours don't care in alarm A comparison" />
      </BitField>
      <BitField start="24" size="4" name="DU" description="Date units or day in BCD format" />
      <BitField start="28" size="2" name="DT" description="Date tens in BCD format" />
      <BitField start="30" size="1" name="WDSEL" description="Week day selection">
        <Enum name="B_0x0" start="0x0" description="DU[3:0] represents the date units" />
        <Enum name="B_0x1" start="0x1" description="DU[3:0] represents the week day. DT[1:0] is don't care." />
      </BitField>
      <BitField start="31" size="1" name="MSK4" description="Alarm A date mask">
        <Enum name="B_0x0" start="0x0" description="Alarm A set if the date/day match" />
        <Enum name="B_0x1" start="0x1" description="Date/day don't care in alarm A comparison" />
      </BitField>
    </Register>
    <Register start="+0x44" size="0" name="RTC_ALRMASSR" access="Read/Write" description="RTC alarm A sub second register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="15" name="SS" description="Sub seconds value This value is compared with the contents of the synchronous prescaler counter to determine if alarm A is to be activated. Only bits 0 up MASKSS-1 are compared." />
      <BitField start="24" size="4" name="MASKSS" description="Mask the most-significant bits starting at this bit 2: SS[14:2] are don't care in alarm A comparison. Only SS[1:0] are compared. 3: SS[14:3] are don't care in alarm A comparison. Only SS[2:0] are compared. ... 12: SS[14:12] are don't care in alarm A comparison. SS[11:0] are compared. 13: SS[14:13] are don't care in alarm A comparison. SS[12:0] are compared. 14: SS[14] is don't care in alarm A comparison. SS[13:0] are compared. 15: All 15 SS bits are compared and must match to activate alarm. The overflow bits of the synchronous counter (bits 15) is never compared. This bit can be different from 0 only after a shift operation. Note: The overflow bits of the synchronous counter (bits 15) is never compared. This bit can be different from 0 only after a shift operation.">
        <Enum name="B_0x0" start="0x0" description="No comparison on sub seconds for alarm A. The alarm is set when the seconds unit is incremented (assuming that the rest of the fields match)." />
        <Enum name="B_0x1" start="0x1" description="SS[14:1] are don't care in alarm A comparison. Only SS[0] is compared." />
      </BitField>
    </Register>
    <Register start="+0x48" size="0" name="RTC_ALRMBR" access="Read/Write" description="RTC alarm B register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="SU" description="Second units in BCD format" />
      <BitField start="4" size="3" name="ST" description="Second tens in BCD format" />
      <BitField start="7" size="1" name="MSK1" description="Alarm B seconds mask">
        <Enum name="B_0x0" start="0x0" description="Alarm B set if the seconds match" />
        <Enum name="B_0x1" start="0x1" description="Seconds don't care in alarm B comparison" />
      </BitField>
      <BitField start="8" size="4" name="MNU" description="Minute units in BCD format" />
      <BitField start="12" size="3" name="MNT" description="Minute tens in BCD format" />
      <BitField start="15" size="1" name="MSK2" description="Alarm B minutes mask">
        <Enum name="B_0x0" start="0x0" description="Alarm B set if the minutes match" />
        <Enum name="B_0x1" start="0x1" description="Minutes don't care in alarm B comparison" />
      </BitField>
      <BitField start="16" size="4" name="HU" description="Hour units in BCD format" />
      <BitField start="20" size="2" name="HT" description="Hour tens in BCD format" />
      <BitField start="22" size="1" name="PM" description="AM/PM notation">
        <Enum name="B_0x0" start="0x0" description="AM or 24-hour format" />
        <Enum name="B_0x1" start="0x1" description="PM" />
      </BitField>
      <BitField start="23" size="1" name="MSK3" description="Alarm B hours mask">
        <Enum name="B_0x0" start="0x0" description="Alarm B set if the hours match" />
        <Enum name="B_0x1" start="0x1" description="Hours don't care in alarm B comparison" />
      </BitField>
      <BitField start="24" size="4" name="DU" description="Date units or day in BCD format" />
      <BitField start="28" size="2" name="DT" description="Date tens in BCD format" />
      <BitField start="30" size="1" name="WDSEL" description="Week day selection">
        <Enum name="B_0x0" start="0x0" description="DU[3:0] represents the date units" />
        <Enum name="B_0x1" start="0x1" description="DU[3:0] represents the week day. DT[1:0] is don't care." />
      </BitField>
      <BitField start="31" size="1" name="MSK4" description="Alarm B date mask">
        <Enum name="B_0x0" start="0x0" description="Alarm B set if the date and day match" />
        <Enum name="B_0x1" start="0x1" description="Date and day don't care in alarm B comparison" />
      </BitField>
    </Register>
    <Register start="+0x4C" size="0" name="RTC_ALRMBSSR" access="Read/Write" description="RTC alarm B sub second register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="15" name="SS" description="Sub seconds value This value is compared with the contents of the synchronous prescaler counter to determine if alarm B is to be activated. Only bits 0 up to MASKSS-1 are compared." />
      <BitField start="24" size="4" name="MASKSS" description="Mask the most-significant bits starting at this bit ... The overflow bits of the synchronous counter (bits 15) is never compared. This bit can be different from 0 only after a shift operation.">
        <Enum name="B_0x0" start="0x0" description="No comparison on sub seconds for alarm B. The alarm is set when the seconds unit is incremented (assuming that the rest of the fields match)." />
        <Enum name="B_0x1" start="0x1" description="SS[14:1] are don't care in alarm B comparison. Only SS[0] is compared." />
        <Enum name="B_0x2" start="0x2" description="SS[14:2] are don't care in alarm B comparison. Only SS[1:0] are compared." />
        <Enum name="B_0x3" start="0x3" description="SS[14:3] are don't care in alarm B comparison. Only SS[2:0] are compared." />
        <Enum name="B_0xC" start="0xC" description="SS[14:12] are don't care in alarm B comparison. SS[11:0] are compared." />
        <Enum name="B_0xD" start="0xD" description="SS[14:13] are don't care in alarm B comparison. SS[12:0] are compared." />
        <Enum name="B_0xE" start="0xE" description="SS[14] is don't care in alarm B comparison. SS[13:0] are compared." />
        <Enum name="B_0xF" start="0xF" description="All 15 SS bits are compared and must match to activate alarm." />
      </BitField>
    </Register>
    <Register start="+0x50" size="0" name="RTC_SR" access="Read/Write" description="RTC status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ALRAF" description="Alarm A flag This flag is set by hardware when the time/date registers (RTC_TR and RTC_DR) match the alarm A register (RTC_ALRMAR)." />
      <BitField start="1" size="1" name="ALRBF" description="Alarm B flag This flag is set by hardware when the time/date registers (RTC_TR and RTC_DR) match the alarm B register (RTC_ALRMBR)." />
      <BitField start="2" size="1" name="WUTF" description="Wakeup timer flag This flag is set by hardware when the wakeup auto-reload counter reaches 0. This flag must be cleared by software at least 1.5 RTCCLK periods before WUTF is set to 1 again." />
      <BitField start="3" size="1" name="TSF" description="Timestamp flag This flag is set by hardware when a timestamp event occurs. If ITSF flag is set, TSF must be cleared together with ITSF." />
      <BitField start="4" size="1" name="TSOVF" description="Timestamp overflow flag This flag is set by hardware when a timestamp event occurs while TSF is already set. It is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared." />
      <BitField start="5" size="1" name="ITSF" description="Internal timestamp flag This flag is set by hardware when a timestamp on the internal event occurs." />
    </Register>
    <Register start="+0x54" size="0" name="RTC_MISR" access="Read/Write" description="RTC masked interrupt status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ALRAMF" description="Alarm A masked flag This flag is set by hardware when the alarm A interrupt occurs." />
      <BitField start="1" size="1" name="ALRBMF" description="Alarm B masked flag This flag is set by hardware when the alarm B interrupt occurs." />
      <BitField start="2" size="1" name="WUTMF" description="Wakeup timer masked flag This flag is set by hardware when the wakeup timer interrupt occurs. This flag must be cleared by software at least 1.5 RTCCLK periods before WUTF is set to 1 again." />
      <BitField start="3" size="1" name="TSMF" description="Timestamp masked flag This flag is set by hardware when a timestamp interrupt occurs. If ITSF flag is set, TSF must be cleared together with ITSF." />
      <BitField start="4" size="1" name="TSOVMF" description="Timestamp overflow masked flag This flag is set by hardware when a timestamp interrupt occurs while TSMF is already set. It is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared." />
      <BitField start="5" size="1" name="ITSMF" description="Internal timestamp masked flag This flag is set by hardware when a timestamp on the internal event occurs and timestampinterrupt is raised." />
    </Register>
    <Register start="+0x5C" size="0" name="RTC_SCR" access="Read/Write" description="RTC status clear register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CALRAF" description="Clear alarm A flag Writing 1 in this bit clears the ALRAF bit in the RTC_SR register." />
      <BitField start="1" size="1" name="CALRBF" description="Clear alarm B flag Writing 1 in this bit clears the ALRBF bit in the RTC_SR register." />
      <BitField start="2" size="1" name="CWUTF" description="Clear wakeup timer flag Writing 1 in this bit clears the WUTF bit in the RTC_SR register." />
      <BitField start="3" size="1" name="CTSF" description="Clear timestamp flag Writing 1 in this bit clears the TSOVF bit in the RTC_SR register. If ITSF flag is set, TSF must be cleared together with ITSF by setting CRSF and CITSF." />
      <BitField start="4" size="1" name="CTSOVF" description="Clear timestamp overflow flag Writing 1 in this bit clears the TSOVF bit in the RTC_SR register. It is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared." />
      <BitField start="5" size="1" name="CITSF" description="Clear internal timestamp flag Writing 1 in this bit clears the ITSF bit in the RTC_SR register." />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="SPI1" start="0x40013000" description="Serial peripheral interface/Inter-IC sound">
    <Register start="+0x0" size="2" name="SPI_CR1" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="CPHA" description="Clock phase Note: This bit should not be changed when communication is ongoing. This bit is not used in I2S mode and SPI TI mode except the case when CRC is applied at TI mode.">
        <Enum name="B_0x0" start="0x0" description="The first clock transition is the first data capture edge" />
        <Enum name="B_0x1" start="0x1" description="The second clock transition is the first data capture edge" />
      </BitField>
      <BitField start="1" size="1" name="CPOL" description="Clock polarity Note: This bit should not be changed when communication is ongoing. This bit is not used in I2S mode and SPI TI mode except the case when CRC is applied at TI mode.">
        <Enum name="B_0x0" start="0x0" description="CK to 0 when idle" />
        <Enum name="B_0x1" start="0x1" description="CK to 1 when idle" />
      </BitField>
      <BitField start="2" size="1" name="MSTR" description="Master selection Note: This bit should not be changed when communication is ongoing. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Slave configuration" />
        <Enum name="B_0x1" start="0x1" description="Master configuration" />
      </BitField>
      <BitField start="3" size="3" name="BR" description="Baud rate control Note: These bits should not be changed when communication is ongoing. These bits are not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="fPCLK/2" />
        <Enum name="B_0x1" start="0x1" description="fPCLK/4" />
        <Enum name="B_0x2" start="0x2" description="fPCLK/8" />
        <Enum name="B_0x3" start="0x3" description="fPCLK/16" />
        <Enum name="B_0x4" start="0x4" description="fPCLK/32" />
        <Enum name="B_0x5" start="0x5" description="fPCLK/64" />
        <Enum name="B_0x6" start="0x6" description="fPCLK/128" />
        <Enum name="B_0x7" start="0x7" description="fPCLK/256" />
      </BitField>
      <BitField start="6" size="1" name="SPE" description="SPI enable Note: When disabling the SPI, follow the procedure described in SPI on page1020. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Peripheral disabled" />
        <Enum name="B_0x1" start="0x1" description="Peripheral enabled" />
      </BitField>
      <BitField start="7" size="1" name="LSBFIRST" description="Frame format Note: 1. This bit should not be changed when communication is ongoing. 2. This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="data is transmitted / received with the MSB first" />
        <Enum name="B_0x1" start="0x1" description="data is transmitted / received with the LSB first" />
      </BitField>
      <BitField start="8" size="1" name="SSI" description="Internal slave select This bit has an effect only when the SSM bit is set. The value of this bit is forced onto the NSS pin and the I/O value of the NSS pin is ignored. Note: This bit is not used in I2S mode and SPI TI mode." />
      <BitField start="9" size="1" name="SSM" description="Software slave management When the SSM bit is set, the NSS pin input is replaced with the value from the SSI bit. Note: This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="Software slave management disabled" />
        <Enum name="B_0x1" start="0x1" description="Software slave management enabled" />
      </BitField>
      <BitField start="10" size="1" name="RXONLY" description="Receive only mode enabled. This bit enables simplex communication using a single unidirectional line to receive data exclusively. Keep BIDIMODE bit clear when receive only mode is active.This bit is also useful in a multislave system in which this particular slave is not accessed, the output from the accessed slave is not corrupted. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Full-duplex (Transmit and receive)" />
        <Enum name="B_0x1" start="0x1" description="Output disabled (Receive-only mode)" />
      </BitField>
      <BitField start="11" size="1" name="CRCL" description="CRC length This bit is set and cleared by software to select the CRC length. Note: This bit should be written only when SPI is disabled (SPE = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) for correct operation. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="8-bit CRC length" />
        <Enum name="B_0x1" start="0x1" description="16-bit CRC length" />
      </BitField>
      <BitField start="12" size="1" name="CRCNEXT" description="Transmit CRC next Note: This bit has to be written as soon as the last data is written in the SPIx_DR register. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Next transmit value is from Tx buffer." />
        <Enum name="B_0x1" start="0x1" description="Next transmit value is from Tx CRC register." />
      </BitField>
      <BitField start="13" size="1" name="CRCEN" description="Hardware CRC calculation enable Note: This bit should be written only when SPI is disabled (SPE = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) for correct operation. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="CRC calculation disabled" />
        <Enum name="B_0x1" start="0x1" description="CRC calculation enabled" />
      </BitField>
      <BitField start="14" size="1" name="BIDIOE" description="Output enable in bidirectional mode This bit combined with the BIDIMODE bit selects the direction of transfer in bidirectional mode. Note: In master mode, the MOSI pin is used and in slave mode, the MISO pin is used. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Output disabled (receive-only mode)" />
        <Enum name="B_0x1" start="0x1" description="Output enabled (transmit-only mode)" />
      </BitField>
      <BitField start="15" size="1" name="BIDIMODE" description="Bidirectional data mode enable. This bit enables half-duplex communication using common single bidirectional data line. Keep RXONLY bit clear when bidirectional mode is active. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="2-line unidirectional data mode selected" />
        <Enum name="B_0x1" start="0x1" description="1-line bidirectional data mode selected" />
      </BitField>
    </Register>
    <Register start="+0x4" size="2" name="SPI_CR2" access="Read/Write" reset_value="0x00000700" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="RXDMAEN" description="Rx buffer DMA enable When this bit is set, a DMA request is generated whenever the RXNE flag is set.">
        <Enum name="B_0x0" start="0x0" description="Rx buffer DMA disabled" />
        <Enum name="B_0x1" start="0x1" description="Rx buffer DMA enabled" />
      </BitField>
      <BitField start="1" size="1" name="TXDMAEN" description="Tx buffer DMA enable When this bit is set, a DMA request is generated whenever the TXE flag is set.">
        <Enum name="B_0x0" start="0x0" description="Tx buffer DMA disabled" />
        <Enum name="B_0x1" start="0x1" description="Tx buffer DMA enabled" />
      </BitField>
      <BitField start="2" size="1" name="SSOE" description="SS output enable Note: This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="SS output is disabled in master mode and the SPI interface can work in multimaster configuration" />
        <Enum name="B_0x1" start="0x1" description="SS output is enabled in master mode and when the SPI interface is enabled. The SPI interface cannot work in a multimaster environment." />
      </BitField>
      <BitField start="3" size="1" name="NSSP" description="NSS pulse management This bit is used in master mode only. it allows the SPI to generate an NSS pulse between two consecutive data when doing continuous transfers. In the case of a single data transfer, it forces the NSS pin high level after the transfer. It has no meaning if CPHA = &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;, or FRF = &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Note: 1. This bit must be written only when the SPI is disabled (SPE=0). 2. This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="No NSS pulse" />
        <Enum name="B_0x1" start="0x1" description="NSS pulse generated" />
      </BitField>
      <BitField start="4" size="1" name="FRF" description="Frame format 1 SPI TI mode Note: This bit must be written only when the SPI is disabled (SPE=0). This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="SPI Motorola mode" />
      </BitField>
      <BitField start="5" size="1" name="ERRIE" description="Error interrupt enable This bit controls the generation of an interrupt when an error condition occurs (CRCERR, OVR, MODF in SPI mode, FRE at TI mode and UDR, OVR, and FRE in I2S mode).">
        <Enum name="B_0x0" start="0x0" description="Error interrupt is masked" />
        <Enum name="B_0x1" start="0x1" description="Error interrupt is enabled" />
      </BitField>
      <BitField start="6" size="1" name="RXNEIE" description="RX buffer not empty interrupt enable">
        <Enum name="B_0x0" start="0x0" description="RXNE interrupt masked" />
        <Enum name="B_0x1" start="0x1" description="RXNE interrupt not masked. Used to generate an interrupt request when the RXNE flag is set." />
      </BitField>
      <BitField start="7" size="1" name="TXEIE" description="Tx buffer empty interrupt enable">
        <Enum name="B_0x0" start="0x0" description="TXE interrupt masked" />
        <Enum name="B_0x1" start="0x1" description="TXE interrupt not masked. Used to generate an interrupt request when the TXE flag is set." />
      </BitField>
      <BitField start="8" size="4" name="DS" description="Data size These bits configure the data length for SPI transfers. If software attempts to write one of the &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Not used&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; values, they are forced to the value &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;0111&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; (8-bit) Note: These bits are not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Not used" />
        <Enum name="B_0x1" start="0x1" description="Not used" />
        <Enum name="B_0x2" start="0x2" description="Not used" />
        <Enum name="B_0x3" start="0x3" description="4-bit" />
        <Enum name="B_0x4" start="0x4" description="5-bit" />
        <Enum name="B_0x5" start="0x5" description="6-bit" />
        <Enum name="B_0x6" start="0x6" description="7-bit" />
        <Enum name="B_0x7" start="0x7" description="8-bit" />
        <Enum name="B_0x8" start="0x8" description="9-bit" />
        <Enum name="B_0x9" start="0x9" description="10-bit" />
        <Enum name="B_0xA" start="0xA" description="11-bit" />
        <Enum name="B_0xB" start="0xB" description="12-bit" />
        <Enum name="B_0xC" start="0xC" description="13-bit" />
        <Enum name="B_0xD" start="0xD" description="14-bit" />
        <Enum name="B_0xE" start="0xE" description="15-bit" />
        <Enum name="B_0xF" start="0xF" description="16-bit" />
      </BitField>
      <BitField start="12" size="1" name="FRXTH" description="FIFO reception threshold This bit is used to set the threshold of the RXFIFO that triggers an RXNE event Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="RXNE event is generated if the FIFO level is greater than or equal to 1/2 (16-bit)" />
        <Enum name="B_0x1" start="0x1" description="RXNE event is generated if the FIFO level is greater than or equal to 1/4 (8-bit)" />
      </BitField>
      <BitField start="13" size="1" name="LDMA_RX" description="Last DMA transfer for reception This bit is used in data packing mode, to define if the total number of data to receive by DMA is odd or even. It has significance only if the RXDMAEN bit in the SPIx_CR2 register is set and if packing mode is used (data length =&lt; 8-bit and write access to SPIx_DR is 16-bit wide). It has to be written when the SPI is disabled (SPE = 0 in the SPIx_CR1 register). Note: Refer to if the CRCEN bit is set. This bit is not used in I&#xc3;&#x82;&#xc2;&#xb2;S mode.">
        <Enum name="B_0x0" start="0x0" description="Number of data to transfer is even" />
        <Enum name="B_0x1" start="0x1" description="Number of data to transfer is odd" />
      </BitField>
      <BitField start="14" size="1" name="LDMA_TX" description="Last DMA transfer for transmission This bit is used in data packing mode, to define if the total number of data to transmit by DMA is odd or even. It has significance only if the TXDMAEN bit in the SPIx_CR2 register is set and if packing mode is used (data length =&lt; 8-bit and write access to SPIx_DR is 16-bit wide). It has to be written when the SPI is disabled (SPE = 0 in the SPIx_CR1 register). Note: Refer to if the CRCEN bit is set. This bit is not used in I&#xc3;&#x82;&#xc2;&#xb2;S mode.">
        <Enum name="B_0x0" start="0x0" description="Number of data to transfer is even" />
        <Enum name="B_0x1" start="0x1" description="Number of data to transfer is odd" />
      </BitField>
    </Register>
    <Register start="+0x8" size="2" name="SPI_SR" access="Read/Write" reset_value="0x00000002" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="RXNE" description="Receive buffer not empty">
        <Enum name="B_0x0" start="0x0" description="Rx buffer empty" />
        <Enum name="B_0x1" start="0x1" description="Rx buffer not empty" />
      </BitField>
      <BitField start="1" size="1" name="TXE" description="Transmit buffer empty">
        <Enum name="B_0x0" start="0x0" description="Tx buffer not empty" />
        <Enum name="B_0x1" start="0x1" description="Tx buffer empty" />
      </BitField>
      <BitField start="2" size="1" name="CHSIDE" description="Channel side Note: This bit is not used in SPI mode. It has no significance in PCM mode.">
        <Enum name="B_0x0" start="0x0" description="Channel Left has to be transmitted or has been received" />
        <Enum name="B_0x1" start="0x1" description="Channel Right has to be transmitted or has been received" />
      </BitField>
      <BitField start="3" size="1" name="UDR" description="Underrun flag This flag is set by hardware and reset by a software sequence. Refer to page1056 for the software sequence. Note: This bit is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="No underrun occurred" />
        <Enum name="B_0x1" start="0x1" description="Underrun occurred" />
      </BitField>
      <BitField start="4" size="1" name="CRCERR" description="CRC error flag Note: This flag is set by hardware and cleared by software writing 0. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="CRC value received matches the SPIx_RXCRCR value" />
        <Enum name="B_0x1" start="0x1" description="CRC value received does not match the SPIx_RXCRCR value" />
      </BitField>
      <BitField start="5" size="1" name="MODF" description="Mode fault This flag is set by hardware and reset by a software sequence. Refer to (MODF) on page1030 for the software sequence. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="No mode fault occurred" />
        <Enum name="B_0x1" start="0x1" description="Mode fault occurred" />
      </BitField>
      <BitField start="6" size="1" name="OVR" description="Overrun flag This flag is set by hardware and reset by a software sequence. Refer to page1056 for the software sequence.">
        <Enum name="B_0x0" start="0x0" description="No overrun occurred" />
        <Enum name="B_0x1" start="0x1" description="Overrun occurred" />
      </BitField>
      <BitField start="7" size="1" name="BSY" description="Busy flag This flag is set and cleared by hardware. Note: The BSY flag must be used with caution: refer to and .">
        <Enum name="B_0x0" start="0x0" description="SPI (or I2S) not busy" />
        <Enum name="B_0x1" start="0x1" description="SPI (or I2S) is busy in communication or Tx buffer is not empty" />
      </BitField>
      <BitField start="8" size="1" name="FRE" description="Frame format error This flag is used for SPI in TI slave mode and I2S slave mode. Refer to error flags and . This flag is set by hardware and reset when SPIx_SR is read by software.">
        <Enum name="B_0x0" start="0x0" description="No frame format error" />
        <Enum name="B_0x1" start="0x1" description="A frame format error occurred" />
      </BitField>
      <BitField start="9" size="2" name="FRLVL" description="FIFO reception level These bits are set and cleared by hardware. Note: These bits are not used in I&#xc3;&#x82;&#xc2;&#xb2;S mode and in SPI receive-only mode while CRC calculation is enabled.">
        <Enum name="B_0x0" start="0x0" description="FIFO empty" />
        <Enum name="B_0x1" start="0x1" description="1/4 FIFO" />
        <Enum name="B_0x2" start="0x2" description="1/2 FIFO" />
        <Enum name="B_0x3" start="0x3" description="FIFO full" />
      </BitField>
      <BitField start="11" size="2" name="FTLVL" description="FIFO transmission level These bits are set and cleared by hardware. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="FIFO empty" />
        <Enum name="B_0x1" start="0x1" description="1/4 FIFO" />
        <Enum name="B_0x2" start="0x2" description="1/2 FIFO" />
        <Enum name="B_0x3" start="0x3" description="FIFO full (considered as FULL when the FIFO threshold is greater than 1/2)" />
      </BitField>
    </Register>
    <Register start="+0xC" size="2" name="SPI_DR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="DR" description="Data register Data received or to be transmitted The data register serves as an interface between the Rx and Tx FIFOs. When the data register is read, RxFIFO is accessed while the write to data register accesses TxFIFO (See ). Note: Data is always right-aligned. Unused bits are ignored when writing to the register, and read as zero when the register is read. The Rx threshold setting must always correspond with the read access currently used." />
    </Register>
    <Register start="+0x10" size="2" name="SPI_CRCPR" access="Read/Write" reset_value="0x00000007" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="CRCPOLY" description="CRC polynomial register This register contains the polynomial for the CRC calculation. The CRC polynomial (0x0007) is the reset value of this register. Another polynomial can be configured as required." />
    </Register>
    <Register start="+0x14" size="2" name="SPI_RXCRCR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="RXCRC" description="Rx CRC register When CRC calculation is enabled, the RXCRC[15:0] bits contain the computed CRC value of the subsequently received bytes. This register is reset when the CRCEN bit in SPIx_CR1 register is written to 1. The CRC is calculated serially using the polynomial programmed in the SPIx_CRCPR register. Only the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPIx_CR1 is cleared). CRC calculation is done based on any CRC8 standard. The entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPIx_CR1 register is set). CRC calculation is done based on any CRC16 standard. Note: A read to this register when the BSY Flag is set could return an incorrect value. These bits are not used in I2S mode." />
    </Register>
    <Register start="+0x18" size="2" name="SPI_TXCRCR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="TXCRC" description="Tx CRC register When CRC calculation is enabled, the TXCRC[7:0] bits contain the computed CRC value of the subsequently transmitted bytes. This register is reset when the CRCEN bit of SPIx_CR1 is written to 1. The CRC is calculated serially using the polynomial programmed in the SPIx_CRCPR register. Only the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPIx_CR1 is cleared). CRC calculation is done based on any CRC8 standard. The entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPIx_CR1 register is set). CRC calculation is done based on any CRC16 standard. Note: A read to this register when the BSY flag is set could return an incorrect value. These bits are not used in I2S mode." />
    </Register>
    <Register start="+0x1C" size="2" name="SPI_I2SCFGR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="CHLEN" description="Channel length (number of bits per audio channel) The bit write operation has a meaning only if DATLEN = 00 otherwise the channel length is fixed to 32-bit by hardware whatever the value filled in. Note: For correct operation, this bit should be configured when the I2S is disabled. It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="16-bit wide" />
        <Enum name="B_0x1" start="0x1" description="32-bit wide" />
      </BitField>
      <BitField start="1" size="2" name="DATLEN" description="Data length to be transferred Note: For correct operation, these bits should be configured when the I2S is disabled. They are not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="16-bit data length" />
        <Enum name="B_0x1" start="0x1" description="24-bit data length" />
        <Enum name="B_0x2" start="0x2" description="32-bit data length" />
        <Enum name="B_0x3" start="0x3" description="Not allowed" />
      </BitField>
      <BitField start="3" size="1" name="CKPOL" description="Inactive state clock polarity Note: For correct operation, this bit should be configured when the I2S is disabled. It is not used in SPI mode. The bit CKPOL does not affect the CK edge sensitivity used to receive or transmit the SD and WS signals.">
        <Enum name="B_0x0" start="0x0" description="I2S clock inactive state is low level" />
        <Enum name="B_0x1" start="0x1" description="I2S clock inactive state is high level" />
      </BitField>
      <BitField start="4" size="2" name="I2SSTD" description="I2S standard selection For more details on I2S standards, refer to Note: For correct operation, these bits should be configured when the I2S is disabled. They are not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="I2S Philips standard" />
        <Enum name="B_0x1" start="0x1" description="MSB justified standard (left justified)" />
        <Enum name="B_0x2" start="0x2" description="LSB justified standard (right justified)" />
        <Enum name="B_0x3" start="0x3" description="PCM standard" />
      </BitField>
      <BitField start="7" size="1" name="PCMSYNC" description="PCM frame synchronization Note: This bit has a meaning only if I2SSTD = 11 (PCM standard is used). It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Short frame synchronization" />
        <Enum name="B_0x1" start="0x1" description="Long frame synchronization" />
      </BitField>
      <BitField start="8" size="2" name="I2SCFG" description="I2S configuration mode Note: These bits should be configured when the I2S is disabled. They are not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Slave - transmit" />
        <Enum name="B_0x1" start="0x1" description="Slave - receive" />
        <Enum name="B_0x2" start="0x2" description="Master - transmit" />
        <Enum name="B_0x3" start="0x3" description="Master - receive" />
      </BitField>
      <BitField start="10" size="1" name="I2SE" description="I2S enable Note: This bit is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="I2S peripheral is disabled" />
        <Enum name="B_0x1" start="0x1" description="I2S peripheral is enabled" />
      </BitField>
      <BitField start="11" size="1" name="I2SMOD" description="I2S mode selection Note: This bit should be configured when the SPI is disabled.">
        <Enum name="B_0x0" start="0x0" description="SPI mode is selected" />
        <Enum name="B_0x1" start="0x1" description="I2S mode is selected" />
      </BitField>
      <BitField start="12" size="1" name="ASTRTEN" description="Asynchronous start enable. When the I2S is enabled in slave mode, the hardware starts the transfer when the I2S clock is received and an appropriate transition is detected on the WS signal. When the I2S is enabled in slave mode, the hardware starts the transfer when the I2S clock is received and the appropriate level is detected on the WS signal. Note: The appropriate transition is a falling edge on WS signal when I2S Philips Standard is used, or a rising edge for other standards. The appropriate level is a low level on WS signal when I2S Philips Standard is used, or a high level for other standards. Please refer to for additional information.">
        <Enum name="B_0x0" start="0x0" description="The Asynchronous start is disabled." />
        <Enum name="B_0x1" start="0x1" description="The Asynchronous start is enabled." />
      </BitField>
    </Register>
    <Register start="+0x20" size="2" name="SPI_I2SPR" access="Read/Write" reset_value="0x00000002" reset_mask="0x0000FFFF">
      <BitField start="0" size="8" name="I2SDIV" description="I2S linear prescaler I2SDIV [7:0] = 0 or I2SDIV [7:0] = 1 are forbidden values. Refer to . Note: These bits should be configured when the I2S is disabled. They are used only when the I2S is in master mode. They are not used in SPI mode." />
      <BitField start="8" size="1" name="ODD" description="Odd factor for the prescaler Refer to . Note: This bit should be configured when the I2S is disabled. It is used only when the I2S is in master mode. It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Real divider value is = I2SDIV *2" />
        <Enum name="B_0x1" start="0x1" description="Real divider value is = (I2SDIV * 2)+1" />
      </BitField>
      <BitField start="9" size="1" name="MCKOE" description="Master clock output enable Note: This bit should be configured when the I2S is disabled. It is used only when the I2S is in master mode. It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Master clock output is disabled" />
        <Enum name="B_0x1" start="0x1" description="Master clock output is enabled" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="SPI2" start="0x40003800" description="Serial peripheral interface/Inter-IC sound">
    <Register start="+0x0" size="2" name="SPI_CR1" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="CPHA" description="Clock phase Note: This bit should not be changed when communication is ongoing. This bit is not used in I2S mode and SPI TI mode except the case when CRC is applied at TI mode.">
        <Enum name="B_0x0" start="0x0" description="The first clock transition is the first data capture edge" />
        <Enum name="B_0x1" start="0x1" description="The second clock transition is the first data capture edge" />
      </BitField>
      <BitField start="1" size="1" name="CPOL" description="Clock polarity Note: This bit should not be changed when communication is ongoing. This bit is not used in I2S mode and SPI TI mode except the case when CRC is applied at TI mode.">
        <Enum name="B_0x0" start="0x0" description="CK to 0 when idle" />
        <Enum name="B_0x1" start="0x1" description="CK to 1 when idle" />
      </BitField>
      <BitField start="2" size="1" name="MSTR" description="Master selection Note: This bit should not be changed when communication is ongoing. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Slave configuration" />
        <Enum name="B_0x1" start="0x1" description="Master configuration" />
      </BitField>
      <BitField start="3" size="3" name="BR" description="Baud rate control Note: These bits should not be changed when communication is ongoing. These bits are not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="fPCLK/2" />
        <Enum name="B_0x1" start="0x1" description="fPCLK/4" />
        <Enum name="B_0x2" start="0x2" description="fPCLK/8" />
        <Enum name="B_0x3" start="0x3" description="fPCLK/16" />
        <Enum name="B_0x4" start="0x4" description="fPCLK/32" />
        <Enum name="B_0x5" start="0x5" description="fPCLK/64" />
        <Enum name="B_0x6" start="0x6" description="fPCLK/128" />
        <Enum name="B_0x7" start="0x7" description="fPCLK/256" />
      </BitField>
      <BitField start="6" size="1" name="SPE" description="SPI enable Note: When disabling the SPI, follow the procedure described in SPI on page1020. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Peripheral disabled" />
        <Enum name="B_0x1" start="0x1" description="Peripheral enabled" />
      </BitField>
      <BitField start="7" size="1" name="LSBFIRST" description="Frame format Note: 1. This bit should not be changed when communication is ongoing. 2. This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="data is transmitted / received with the MSB first" />
        <Enum name="B_0x1" start="0x1" description="data is transmitted / received with the LSB first" />
      </BitField>
      <BitField start="8" size="1" name="SSI" description="Internal slave select This bit has an effect only when the SSM bit is set. The value of this bit is forced onto the NSS pin and the I/O value of the NSS pin is ignored. Note: This bit is not used in I2S mode and SPI TI mode." />
      <BitField start="9" size="1" name="SSM" description="Software slave management When the SSM bit is set, the NSS pin input is replaced with the value from the SSI bit. Note: This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="Software slave management disabled" />
        <Enum name="B_0x1" start="0x1" description="Software slave management enabled" />
      </BitField>
      <BitField start="10" size="1" name="RXONLY" description="Receive only mode enabled. This bit enables simplex communication using a single unidirectional line to receive data exclusively. Keep BIDIMODE bit clear when receive only mode is active.This bit is also useful in a multislave system in which this particular slave is not accessed, the output from the accessed slave is not corrupted. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Full-duplex (Transmit and receive)" />
        <Enum name="B_0x1" start="0x1" description="Output disabled (Receive-only mode)" />
      </BitField>
      <BitField start="11" size="1" name="CRCL" description="CRC length This bit is set and cleared by software to select the CRC length. Note: This bit should be written only when SPI is disabled (SPE = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) for correct operation. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="8-bit CRC length" />
        <Enum name="B_0x1" start="0x1" description="16-bit CRC length" />
      </BitField>
      <BitField start="12" size="1" name="CRCNEXT" description="Transmit CRC next Note: This bit has to be written as soon as the last data is written in the SPIx_DR register. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Next transmit value is from Tx buffer." />
        <Enum name="B_0x1" start="0x1" description="Next transmit value is from Tx CRC register." />
      </BitField>
      <BitField start="13" size="1" name="CRCEN" description="Hardware CRC calculation enable Note: This bit should be written only when SPI is disabled (SPE = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) for correct operation. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="CRC calculation disabled" />
        <Enum name="B_0x1" start="0x1" description="CRC calculation enabled" />
      </BitField>
      <BitField start="14" size="1" name="BIDIOE" description="Output enable in bidirectional mode This bit combined with the BIDIMODE bit selects the direction of transfer in bidirectional mode. Note: In master mode, the MOSI pin is used and in slave mode, the MISO pin is used. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Output disabled (receive-only mode)" />
        <Enum name="B_0x1" start="0x1" description="Output enabled (transmit-only mode)" />
      </BitField>
      <BitField start="15" size="1" name="BIDIMODE" description="Bidirectional data mode enable. This bit enables half-duplex communication using common single bidirectional data line. Keep RXONLY bit clear when bidirectional mode is active. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="2-line unidirectional data mode selected" />
        <Enum name="B_0x1" start="0x1" description="1-line bidirectional data mode selected" />
      </BitField>
    </Register>
    <Register start="+0x4" size="2" name="SPI_CR2" access="Read/Write" reset_value="0x00000700" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="RXDMAEN" description="Rx buffer DMA enable When this bit is set, a DMA request is generated whenever the RXNE flag is set.">
        <Enum name="B_0x0" start="0x0" description="Rx buffer DMA disabled" />
        <Enum name="B_0x1" start="0x1" description="Rx buffer DMA enabled" />
      </BitField>
      <BitField start="1" size="1" name="TXDMAEN" description="Tx buffer DMA enable When this bit is set, a DMA request is generated whenever the TXE flag is set.">
        <Enum name="B_0x0" start="0x0" description="Tx buffer DMA disabled" />
        <Enum name="B_0x1" start="0x1" description="Tx buffer DMA enabled" />
      </BitField>
      <BitField start="2" size="1" name="SSOE" description="SS output enable Note: This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="SS output is disabled in master mode and the SPI interface can work in multimaster configuration" />
        <Enum name="B_0x1" start="0x1" description="SS output is enabled in master mode and when the SPI interface is enabled. The SPI interface cannot work in a multimaster environment." />
      </BitField>
      <BitField start="3" size="1" name="NSSP" description="NSS pulse management This bit is used in master mode only. it allows the SPI to generate an NSS pulse between two consecutive data when doing continuous transfers. In the case of a single data transfer, it forces the NSS pin high level after the transfer. It has no meaning if CPHA = &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;, or FRF = &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Note: 1. This bit must be written only when the SPI is disabled (SPE=0). 2. This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="No NSS pulse" />
        <Enum name="B_0x1" start="0x1" description="NSS pulse generated" />
      </BitField>
      <BitField start="4" size="1" name="FRF" description="Frame format 1 SPI TI mode Note: This bit must be written only when the SPI is disabled (SPE=0). This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="SPI Motorola mode" />
      </BitField>
      <BitField start="5" size="1" name="ERRIE" description="Error interrupt enable This bit controls the generation of an interrupt when an error condition occurs (CRCERR, OVR, MODF in SPI mode, FRE at TI mode and UDR, OVR, and FRE in I2S mode).">
        <Enum name="B_0x0" start="0x0" description="Error interrupt is masked" />
        <Enum name="B_0x1" start="0x1" description="Error interrupt is enabled" />
      </BitField>
      <BitField start="6" size="1" name="RXNEIE" description="RX buffer not empty interrupt enable">
        <Enum name="B_0x0" start="0x0" description="RXNE interrupt masked" />
        <Enum name="B_0x1" start="0x1" description="RXNE interrupt not masked. Used to generate an interrupt request when the RXNE flag is set." />
      </BitField>
      <BitField start="7" size="1" name="TXEIE" description="Tx buffer empty interrupt enable">
        <Enum name="B_0x0" start="0x0" description="TXE interrupt masked" />
        <Enum name="B_0x1" start="0x1" description="TXE interrupt not masked. Used to generate an interrupt request when the TXE flag is set." />
      </BitField>
      <BitField start="8" size="4" name="DS" description="Data size These bits configure the data length for SPI transfers. If software attempts to write one of the &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Not used&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; values, they are forced to the value &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;0111&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; (8-bit) Note: These bits are not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Not used" />
        <Enum name="B_0x1" start="0x1" description="Not used" />
        <Enum name="B_0x2" start="0x2" description="Not used" />
        <Enum name="B_0x3" start="0x3" description="4-bit" />
        <Enum name="B_0x4" start="0x4" description="5-bit" />
        <Enum name="B_0x5" start="0x5" description="6-bit" />
        <Enum name="B_0x6" start="0x6" description="7-bit" />
        <Enum name="B_0x7" start="0x7" description="8-bit" />
        <Enum name="B_0x8" start="0x8" description="9-bit" />
        <Enum name="B_0x9" start="0x9" description="10-bit" />
        <Enum name="B_0xA" start="0xA" description="11-bit" />
        <Enum name="B_0xB" start="0xB" description="12-bit" />
        <Enum name="B_0xC" start="0xC" description="13-bit" />
        <Enum name="B_0xD" start="0xD" description="14-bit" />
        <Enum name="B_0xE" start="0xE" description="15-bit" />
        <Enum name="B_0xF" start="0xF" description="16-bit" />
      </BitField>
      <BitField start="12" size="1" name="FRXTH" description="FIFO reception threshold This bit is used to set the threshold of the RXFIFO that triggers an RXNE event Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="RXNE event is generated if the FIFO level is greater than or equal to 1/2 (16-bit)" />
        <Enum name="B_0x1" start="0x1" description="RXNE event is generated if the FIFO level is greater than or equal to 1/4 (8-bit)" />
      </BitField>
      <BitField start="13" size="1" name="LDMA_RX" description="Last DMA transfer for reception This bit is used in data packing mode, to define if the total number of data to receive by DMA is odd or even. It has significance only if the RXDMAEN bit in the SPIx_CR2 register is set and if packing mode is used (data length =&lt; 8-bit and write access to SPIx_DR is 16-bit wide). It has to be written when the SPI is disabled (SPE = 0 in the SPIx_CR1 register). Note: Refer to if the CRCEN bit is set. This bit is not used in I&#xc3;&#x82;&#xc2;&#xb2;S mode.">
        <Enum name="B_0x0" start="0x0" description="Number of data to transfer is even" />
        <Enum name="B_0x1" start="0x1" description="Number of data to transfer is odd" />
      </BitField>
      <BitField start="14" size="1" name="LDMA_TX" description="Last DMA transfer for transmission This bit is used in data packing mode, to define if the total number of data to transmit by DMA is odd or even. It has significance only if the TXDMAEN bit in the SPIx_CR2 register is set and if packing mode is used (data length =&lt; 8-bit and write access to SPIx_DR is 16-bit wide). It has to be written when the SPI is disabled (SPE = 0 in the SPIx_CR1 register). Note: Refer to if the CRCEN bit is set. This bit is not used in I&#xc3;&#x82;&#xc2;&#xb2;S mode.">
        <Enum name="B_0x0" start="0x0" description="Number of data to transfer is even" />
        <Enum name="B_0x1" start="0x1" description="Number of data to transfer is odd" />
      </BitField>
    </Register>
    <Register start="+0x8" size="2" name="SPI_SR" access="Read/Write" reset_value="0x00000002" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="RXNE" description="Receive buffer not empty">
        <Enum name="B_0x0" start="0x0" description="Rx buffer empty" />
        <Enum name="B_0x1" start="0x1" description="Rx buffer not empty" />
      </BitField>
      <BitField start="1" size="1" name="TXE" description="Transmit buffer empty">
        <Enum name="B_0x0" start="0x0" description="Tx buffer not empty" />
        <Enum name="B_0x1" start="0x1" description="Tx buffer empty" />
      </BitField>
      <BitField start="2" size="1" name="CHSIDE" description="Channel side Note: This bit is not used in SPI mode. It has no significance in PCM mode.">
        <Enum name="B_0x0" start="0x0" description="Channel Left has to be transmitted or has been received" />
        <Enum name="B_0x1" start="0x1" description="Channel Right has to be transmitted or has been received" />
      </BitField>
      <BitField start="3" size="1" name="UDR" description="Underrun flag This flag is set by hardware and reset by a software sequence. Refer to page1056 for the software sequence. Note: This bit is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="No underrun occurred" />
        <Enum name="B_0x1" start="0x1" description="Underrun occurred" />
      </BitField>
      <BitField start="4" size="1" name="CRCERR" description="CRC error flag Note: This flag is set by hardware and cleared by software writing 0. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="CRC value received matches the SPIx_RXCRCR value" />
        <Enum name="B_0x1" start="0x1" description="CRC value received does not match the SPIx_RXCRCR value" />
      </BitField>
      <BitField start="5" size="1" name="MODF" description="Mode fault This flag is set by hardware and reset by a software sequence. Refer to (MODF) on page1030 for the software sequence. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="No mode fault occurred" />
        <Enum name="B_0x1" start="0x1" description="Mode fault occurred" />
      </BitField>
      <BitField start="6" size="1" name="OVR" description="Overrun flag This flag is set by hardware and reset by a software sequence. Refer to page1056 for the software sequence.">
        <Enum name="B_0x0" start="0x0" description="No overrun occurred" />
        <Enum name="B_0x1" start="0x1" description="Overrun occurred" />
      </BitField>
      <BitField start="7" size="1" name="BSY" description="Busy flag This flag is set and cleared by hardware. Note: The BSY flag must be used with caution: refer to and .">
        <Enum name="B_0x0" start="0x0" description="SPI (or I2S) not busy" />
        <Enum name="B_0x1" start="0x1" description="SPI (or I2S) is busy in communication or Tx buffer is not empty" />
      </BitField>
      <BitField start="8" size="1" name="FRE" description="Frame format error This flag is used for SPI in TI slave mode and I2S slave mode. Refer to error flags and . This flag is set by hardware and reset when SPIx_SR is read by software.">
        <Enum name="B_0x0" start="0x0" description="No frame format error" />
        <Enum name="B_0x1" start="0x1" description="A frame format error occurred" />
      </BitField>
      <BitField start="9" size="2" name="FRLVL" description="FIFO reception level These bits are set and cleared by hardware. Note: These bits are not used in I&#xc3;&#x82;&#xc2;&#xb2;S mode and in SPI receive-only mode while CRC calculation is enabled.">
        <Enum name="B_0x0" start="0x0" description="FIFO empty" />
        <Enum name="B_0x1" start="0x1" description="1/4 FIFO" />
        <Enum name="B_0x2" start="0x2" description="1/2 FIFO" />
        <Enum name="B_0x3" start="0x3" description="FIFO full" />
      </BitField>
      <BitField start="11" size="2" name="FTLVL" description="FIFO transmission level These bits are set and cleared by hardware. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="FIFO empty" />
        <Enum name="B_0x1" start="0x1" description="1/4 FIFO" />
        <Enum name="B_0x2" start="0x2" description="1/2 FIFO" />
        <Enum name="B_0x3" start="0x3" description="FIFO full (considered as FULL when the FIFO threshold is greater than 1/2)" />
      </BitField>
    </Register>
    <Register start="+0xC" size="2" name="SPI_DR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="DR" description="Data register Data received or to be transmitted The data register serves as an interface between the Rx and Tx FIFOs. When the data register is read, RxFIFO is accessed while the write to data register accesses TxFIFO (See ). Note: Data is always right-aligned. Unused bits are ignored when writing to the register, and read as zero when the register is read. The Rx threshold setting must always correspond with the read access currently used." />
    </Register>
    <Register start="+0x10" size="2" name="SPI_CRCPR" access="Read/Write" reset_value="0x00000007" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="CRCPOLY" description="CRC polynomial register This register contains the polynomial for the CRC calculation. The CRC polynomial (0x0007) is the reset value of this register. Another polynomial can be configured as required." />
    </Register>
    <Register start="+0x14" size="2" name="SPI_RXCRCR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="RXCRC" description="Rx CRC register When CRC calculation is enabled, the RXCRC[15:0] bits contain the computed CRC value of the subsequently received bytes. This register is reset when the CRCEN bit in SPIx_CR1 register is written to 1. The CRC is calculated serially using the polynomial programmed in the SPIx_CRCPR register. Only the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPIx_CR1 is cleared). CRC calculation is done based on any CRC8 standard. The entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPIx_CR1 register is set). CRC calculation is done based on any CRC16 standard. Note: A read to this register when the BSY Flag is set could return an incorrect value. These bits are not used in I2S mode." />
    </Register>
    <Register start="+0x18" size="2" name="SPI_TXCRCR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="TXCRC" description="Tx CRC register When CRC calculation is enabled, the TXCRC[7:0] bits contain the computed CRC value of the subsequently transmitted bytes. This register is reset when the CRCEN bit of SPIx_CR1 is written to 1. The CRC is calculated serially using the polynomial programmed in the SPIx_CRCPR register. Only the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPIx_CR1 is cleared). CRC calculation is done based on any CRC8 standard. The entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPIx_CR1 register is set). CRC calculation is done based on any CRC16 standard. Note: A read to this register when the BSY flag is set could return an incorrect value. These bits are not used in I2S mode." />
    </Register>
    <Register start="+0x1C" size="2" name="SPI_I2SCFGR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="CHLEN" description="Channel length (number of bits per audio channel) The bit write operation has a meaning only if DATLEN = 00 otherwise the channel length is fixed to 32-bit by hardware whatever the value filled in. Note: For correct operation, this bit should be configured when the I2S is disabled. It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="16-bit wide" />
        <Enum name="B_0x1" start="0x1" description="32-bit wide" />
      </BitField>
      <BitField start="1" size="2" name="DATLEN" description="Data length to be transferred Note: For correct operation, these bits should be configured when the I2S is disabled. They are not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="16-bit data length" />
        <Enum name="B_0x1" start="0x1" description="24-bit data length" />
        <Enum name="B_0x2" start="0x2" description="32-bit data length" />
        <Enum name="B_0x3" start="0x3" description="Not allowed" />
      </BitField>
      <BitField start="3" size="1" name="CKPOL" description="Inactive state clock polarity Note: For correct operation, this bit should be configured when the I2S is disabled. It is not used in SPI mode. The bit CKPOL does not affect the CK edge sensitivity used to receive or transmit the SD and WS signals.">
        <Enum name="B_0x0" start="0x0" description="I2S clock inactive state is low level" />
        <Enum name="B_0x1" start="0x1" description="I2S clock inactive state is high level" />
      </BitField>
      <BitField start="4" size="2" name="I2SSTD" description="I2S standard selection For more details on I2S standards, refer to Note: For correct operation, these bits should be configured when the I2S is disabled. They are not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="I2S Philips standard" />
        <Enum name="B_0x1" start="0x1" description="MSB justified standard (left justified)" />
        <Enum name="B_0x2" start="0x2" description="LSB justified standard (right justified)" />
        <Enum name="B_0x3" start="0x3" description="PCM standard" />
      </BitField>
      <BitField start="7" size="1" name="PCMSYNC" description="PCM frame synchronization Note: This bit has a meaning only if I2SSTD = 11 (PCM standard is used). It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Short frame synchronization" />
        <Enum name="B_0x1" start="0x1" description="Long frame synchronization" />
      </BitField>
      <BitField start="8" size="2" name="I2SCFG" description="I2S configuration mode Note: These bits should be configured when the I2S is disabled. They are not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Slave - transmit" />
        <Enum name="B_0x1" start="0x1" description="Slave - receive" />
        <Enum name="B_0x2" start="0x2" description="Master - transmit" />
        <Enum name="B_0x3" start="0x3" description="Master - receive" />
      </BitField>
      <BitField start="10" size="1" name="I2SE" description="I2S enable Note: This bit is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="I2S peripheral is disabled" />
        <Enum name="B_0x1" start="0x1" description="I2S peripheral is enabled" />
      </BitField>
      <BitField start="11" size="1" name="I2SMOD" description="I2S mode selection Note: This bit should be configured when the SPI is disabled.">
        <Enum name="B_0x0" start="0x0" description="SPI mode is selected" />
        <Enum name="B_0x1" start="0x1" description="I2S mode is selected" />
      </BitField>
      <BitField start="12" size="1" name="ASTRTEN" description="Asynchronous start enable. When the I2S is enabled in slave mode, the hardware starts the transfer when the I2S clock is received and an appropriate transition is detected on the WS signal. When the I2S is enabled in slave mode, the hardware starts the transfer when the I2S clock is received and the appropriate level is detected on the WS signal. Note: The appropriate transition is a falling edge on WS signal when I2S Philips Standard is used, or a rising edge for other standards. The appropriate level is a low level on WS signal when I2S Philips Standard is used, or a high level for other standards. Please refer to for additional information.">
        <Enum name="B_0x0" start="0x0" description="The Asynchronous start is disabled." />
        <Enum name="B_0x1" start="0x1" description="The Asynchronous start is enabled." />
      </BitField>
    </Register>
    <Register start="+0x20" size="2" name="SPI_I2SPR" access="Read/Write" reset_value="0x00000002" reset_mask="0x0000FFFF">
      <BitField start="0" size="8" name="I2SDIV" description="I2S linear prescaler I2SDIV [7:0] = 0 or I2SDIV [7:0] = 1 are forbidden values. Refer to . Note: These bits should be configured when the I2S is disabled. They are used only when the I2S is in master mode. They are not used in SPI mode." />
      <BitField start="8" size="1" name="ODD" description="Odd factor for the prescaler Refer to . Note: This bit should be configured when the I2S is disabled. It is used only when the I2S is in master mode. It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Real divider value is = I2SDIV *2" />
        <Enum name="B_0x1" start="0x1" description="Real divider value is = (I2SDIV * 2)+1" />
      </BitField>
      <BitField start="9" size="1" name="MCKOE" description="Master clock output enable Note: This bit should be configured when the I2S is disabled. It is used only when the I2S is in master mode. It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Master clock output is disabled" />
        <Enum name="B_0x1" start="0x1" description="Master clock output is enabled" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="SPI3" start="0x40003C00" description="Serial peripheral interface/Inter-IC sound">
    <Register start="+0x0" size="2" name="SPI_CR1" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="CPHA" description="Clock phase Note: This bit should not be changed when communication is ongoing. This bit is not used in I2S mode and SPI TI mode except the case when CRC is applied at TI mode.">
        <Enum name="B_0x0" start="0x0" description="The first clock transition is the first data capture edge" />
        <Enum name="B_0x1" start="0x1" description="The second clock transition is the first data capture edge" />
      </BitField>
      <BitField start="1" size="1" name="CPOL" description="Clock polarity Note: This bit should not be changed when communication is ongoing. This bit is not used in I2S mode and SPI TI mode except the case when CRC is applied at TI mode.">
        <Enum name="B_0x0" start="0x0" description="CK to 0 when idle" />
        <Enum name="B_0x1" start="0x1" description="CK to 1 when idle" />
      </BitField>
      <BitField start="2" size="1" name="MSTR" description="Master selection Note: This bit should not be changed when communication is ongoing. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Slave configuration" />
        <Enum name="B_0x1" start="0x1" description="Master configuration" />
      </BitField>
      <BitField start="3" size="3" name="BR" description="Baud rate control Note: These bits should not be changed when communication is ongoing. These bits are not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="fPCLK/2" />
        <Enum name="B_0x1" start="0x1" description="fPCLK/4" />
        <Enum name="B_0x2" start="0x2" description="fPCLK/8" />
        <Enum name="B_0x3" start="0x3" description="fPCLK/16" />
        <Enum name="B_0x4" start="0x4" description="fPCLK/32" />
        <Enum name="B_0x5" start="0x5" description="fPCLK/64" />
        <Enum name="B_0x6" start="0x6" description="fPCLK/128" />
        <Enum name="B_0x7" start="0x7" description="fPCLK/256" />
      </BitField>
      <BitField start="6" size="1" name="SPE" description="SPI enable Note: When disabling the SPI, follow the procedure described in SPI on page1020. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Peripheral disabled" />
        <Enum name="B_0x1" start="0x1" description="Peripheral enabled" />
      </BitField>
      <BitField start="7" size="1" name="LSBFIRST" description="Frame format Note: 1. This bit should not be changed when communication is ongoing. 2. This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="data is transmitted / received with the MSB first" />
        <Enum name="B_0x1" start="0x1" description="data is transmitted / received with the LSB first" />
      </BitField>
      <BitField start="8" size="1" name="SSI" description="Internal slave select This bit has an effect only when the SSM bit is set. The value of this bit is forced onto the NSS pin and the I/O value of the NSS pin is ignored. Note: This bit is not used in I2S mode and SPI TI mode." />
      <BitField start="9" size="1" name="SSM" description="Software slave management When the SSM bit is set, the NSS pin input is replaced with the value from the SSI bit. Note: This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="Software slave management disabled" />
        <Enum name="B_0x1" start="0x1" description="Software slave management enabled" />
      </BitField>
      <BitField start="10" size="1" name="RXONLY" description="Receive only mode enabled. This bit enables simplex communication using a single unidirectional line to receive data exclusively. Keep BIDIMODE bit clear when receive only mode is active.This bit is also useful in a multislave system in which this particular slave is not accessed, the output from the accessed slave is not corrupted. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Full-duplex (Transmit and receive)" />
        <Enum name="B_0x1" start="0x1" description="Output disabled (Receive-only mode)" />
      </BitField>
      <BitField start="11" size="1" name="CRCL" description="CRC length This bit is set and cleared by software to select the CRC length. Note: This bit should be written only when SPI is disabled (SPE = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) for correct operation. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="8-bit CRC length" />
        <Enum name="B_0x1" start="0x1" description="16-bit CRC length" />
      </BitField>
      <BitField start="12" size="1" name="CRCNEXT" description="Transmit CRC next Note: This bit has to be written as soon as the last data is written in the SPIx_DR register. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Next transmit value is from Tx buffer." />
        <Enum name="B_0x1" start="0x1" description="Next transmit value is from Tx CRC register." />
      </BitField>
      <BitField start="13" size="1" name="CRCEN" description="Hardware CRC calculation enable Note: This bit should be written only when SPI is disabled (SPE = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) for correct operation. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="CRC calculation disabled" />
        <Enum name="B_0x1" start="0x1" description="CRC calculation enabled" />
      </BitField>
      <BitField start="14" size="1" name="BIDIOE" description="Output enable in bidirectional mode This bit combined with the BIDIMODE bit selects the direction of transfer in bidirectional mode. Note: In master mode, the MOSI pin is used and in slave mode, the MISO pin is used. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Output disabled (receive-only mode)" />
        <Enum name="B_0x1" start="0x1" description="Output enabled (transmit-only mode)" />
      </BitField>
      <BitField start="15" size="1" name="BIDIMODE" description="Bidirectional data mode enable. This bit enables half-duplex communication using common single bidirectional data line. Keep RXONLY bit clear when bidirectional mode is active. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="2-line unidirectional data mode selected" />
        <Enum name="B_0x1" start="0x1" description="1-line bidirectional data mode selected" />
      </BitField>
    </Register>
    <Register start="+0x4" size="2" name="SPI_CR2" access="Read/Write" reset_value="0x00000700" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="RXDMAEN" description="Rx buffer DMA enable When this bit is set, a DMA request is generated whenever the RXNE flag is set.">
        <Enum name="B_0x0" start="0x0" description="Rx buffer DMA disabled" />
        <Enum name="B_0x1" start="0x1" description="Rx buffer DMA enabled" />
      </BitField>
      <BitField start="1" size="1" name="TXDMAEN" description="Tx buffer DMA enable When this bit is set, a DMA request is generated whenever the TXE flag is set.">
        <Enum name="B_0x0" start="0x0" description="Tx buffer DMA disabled" />
        <Enum name="B_0x1" start="0x1" description="Tx buffer DMA enabled" />
      </BitField>
      <BitField start="2" size="1" name="SSOE" description="SS output enable Note: This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="SS output is disabled in master mode and the SPI interface can work in multimaster configuration" />
        <Enum name="B_0x1" start="0x1" description="SS output is enabled in master mode and when the SPI interface is enabled. The SPI interface cannot work in a multimaster environment." />
      </BitField>
      <BitField start="3" size="1" name="NSSP" description="NSS pulse management This bit is used in master mode only. it allows the SPI to generate an NSS pulse between two consecutive data when doing continuous transfers. In the case of a single data transfer, it forces the NSS pin high level after the transfer. It has no meaning if CPHA = &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;, or FRF = &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Note: 1. This bit must be written only when the SPI is disabled (SPE=0). 2. This bit is not used in I2S mode and SPI TI mode.">
        <Enum name="B_0x0" start="0x0" description="No NSS pulse" />
        <Enum name="B_0x1" start="0x1" description="NSS pulse generated" />
      </BitField>
      <BitField start="4" size="1" name="FRF" description="Frame format 1 SPI TI mode Note: This bit must be written only when the SPI is disabled (SPE=0). This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="SPI Motorola mode" />
      </BitField>
      <BitField start="5" size="1" name="ERRIE" description="Error interrupt enable This bit controls the generation of an interrupt when an error condition occurs (CRCERR, OVR, MODF in SPI mode, FRE at TI mode and UDR, OVR, and FRE in I2S mode).">
        <Enum name="B_0x0" start="0x0" description="Error interrupt is masked" />
        <Enum name="B_0x1" start="0x1" description="Error interrupt is enabled" />
      </BitField>
      <BitField start="6" size="1" name="RXNEIE" description="RX buffer not empty interrupt enable">
        <Enum name="B_0x0" start="0x0" description="RXNE interrupt masked" />
        <Enum name="B_0x1" start="0x1" description="RXNE interrupt not masked. Used to generate an interrupt request when the RXNE flag is set." />
      </BitField>
      <BitField start="7" size="1" name="TXEIE" description="Tx buffer empty interrupt enable">
        <Enum name="B_0x0" start="0x0" description="TXE interrupt masked" />
        <Enum name="B_0x1" start="0x1" description="TXE interrupt not masked. Used to generate an interrupt request when the TXE flag is set." />
      </BitField>
      <BitField start="8" size="4" name="DS" description="Data size These bits configure the data length for SPI transfers. If software attempts to write one of the &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Not used&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; values, they are forced to the value &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;0111&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; (8-bit) Note: These bits are not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="Not used" />
        <Enum name="B_0x1" start="0x1" description="Not used" />
        <Enum name="B_0x2" start="0x2" description="Not used" />
        <Enum name="B_0x3" start="0x3" description="4-bit" />
        <Enum name="B_0x4" start="0x4" description="5-bit" />
        <Enum name="B_0x5" start="0x5" description="6-bit" />
        <Enum name="B_0x6" start="0x6" description="7-bit" />
        <Enum name="B_0x7" start="0x7" description="8-bit" />
        <Enum name="B_0x8" start="0x8" description="9-bit" />
        <Enum name="B_0x9" start="0x9" description="10-bit" />
        <Enum name="B_0xA" start="0xA" description="11-bit" />
        <Enum name="B_0xB" start="0xB" description="12-bit" />
        <Enum name="B_0xC" start="0xC" description="13-bit" />
        <Enum name="B_0xD" start="0xD" description="14-bit" />
        <Enum name="B_0xE" start="0xE" description="15-bit" />
        <Enum name="B_0xF" start="0xF" description="16-bit" />
      </BitField>
      <BitField start="12" size="1" name="FRXTH" description="FIFO reception threshold This bit is used to set the threshold of the RXFIFO that triggers an RXNE event Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="RXNE event is generated if the FIFO level is greater than or equal to 1/2 (16-bit)" />
        <Enum name="B_0x1" start="0x1" description="RXNE event is generated if the FIFO level is greater than or equal to 1/4 (8-bit)" />
      </BitField>
      <BitField start="13" size="1" name="LDMA_RX" description="Last DMA transfer for reception This bit is used in data packing mode, to define if the total number of data to receive by DMA is odd or even. It has significance only if the RXDMAEN bit in the SPIx_CR2 register is set and if packing mode is used (data length =&lt; 8-bit and write access to SPIx_DR is 16-bit wide). It has to be written when the SPI is disabled (SPE = 0 in the SPIx_CR1 register). Note: Refer to if the CRCEN bit is set. This bit is not used in I&#xc3;&#x82;&#xc2;&#xb2;S mode.">
        <Enum name="B_0x0" start="0x0" description="Number of data to transfer is even" />
        <Enum name="B_0x1" start="0x1" description="Number of data to transfer is odd" />
      </BitField>
      <BitField start="14" size="1" name="LDMA_TX" description="Last DMA transfer for transmission This bit is used in data packing mode, to define if the total number of data to transmit by DMA is odd or even. It has significance only if the TXDMAEN bit in the SPIx_CR2 register is set and if packing mode is used (data length =&lt; 8-bit and write access to SPIx_DR is 16-bit wide). It has to be written when the SPI is disabled (SPE = 0 in the SPIx_CR1 register). Note: Refer to if the CRCEN bit is set. This bit is not used in I&#xc3;&#x82;&#xc2;&#xb2;S mode.">
        <Enum name="B_0x0" start="0x0" description="Number of data to transfer is even" />
        <Enum name="B_0x1" start="0x1" description="Number of data to transfer is odd" />
      </BitField>
    </Register>
    <Register start="+0x8" size="2" name="SPI_SR" access="Read/Write" reset_value="0x00000002" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="RXNE" description="Receive buffer not empty">
        <Enum name="B_0x0" start="0x0" description="Rx buffer empty" />
        <Enum name="B_0x1" start="0x1" description="Rx buffer not empty" />
      </BitField>
      <BitField start="1" size="1" name="TXE" description="Transmit buffer empty">
        <Enum name="B_0x0" start="0x0" description="Tx buffer not empty" />
        <Enum name="B_0x1" start="0x1" description="Tx buffer empty" />
      </BitField>
      <BitField start="2" size="1" name="CHSIDE" description="Channel side Note: This bit is not used in SPI mode. It has no significance in PCM mode.">
        <Enum name="B_0x0" start="0x0" description="Channel Left has to be transmitted or has been received" />
        <Enum name="B_0x1" start="0x1" description="Channel Right has to be transmitted or has been received" />
      </BitField>
      <BitField start="3" size="1" name="UDR" description="Underrun flag This flag is set by hardware and reset by a software sequence. Refer to page1056 for the software sequence. Note: This bit is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="No underrun occurred" />
        <Enum name="B_0x1" start="0x1" description="Underrun occurred" />
      </BitField>
      <BitField start="4" size="1" name="CRCERR" description="CRC error flag Note: This flag is set by hardware and cleared by software writing 0. This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="CRC value received matches the SPIx_RXCRCR value" />
        <Enum name="B_0x1" start="0x1" description="CRC value received does not match the SPIx_RXCRCR value" />
      </BitField>
      <BitField start="5" size="1" name="MODF" description="Mode fault This flag is set by hardware and reset by a software sequence. Refer to (MODF) on page1030 for the software sequence. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="No mode fault occurred" />
        <Enum name="B_0x1" start="0x1" description="Mode fault occurred" />
      </BitField>
      <BitField start="6" size="1" name="OVR" description="Overrun flag This flag is set by hardware and reset by a software sequence. Refer to page1056 for the software sequence.">
        <Enum name="B_0x0" start="0x0" description="No overrun occurred" />
        <Enum name="B_0x1" start="0x1" description="Overrun occurred" />
      </BitField>
      <BitField start="7" size="1" name="BSY" description="Busy flag This flag is set and cleared by hardware. Note: The BSY flag must be used with caution: refer to and .">
        <Enum name="B_0x0" start="0x0" description="SPI (or I2S) not busy" />
        <Enum name="B_0x1" start="0x1" description="SPI (or I2S) is busy in communication or Tx buffer is not empty" />
      </BitField>
      <BitField start="8" size="1" name="FRE" description="Frame format error This flag is used for SPI in TI slave mode and I2S slave mode. Refer to error flags and . This flag is set by hardware and reset when SPIx_SR is read by software.">
        <Enum name="B_0x0" start="0x0" description="No frame format error" />
        <Enum name="B_0x1" start="0x1" description="A frame format error occurred" />
      </BitField>
      <BitField start="9" size="2" name="FRLVL" description="FIFO reception level These bits are set and cleared by hardware. Note: These bits are not used in I&#xc3;&#x82;&#xc2;&#xb2;S mode and in SPI receive-only mode while CRC calculation is enabled.">
        <Enum name="B_0x0" start="0x0" description="FIFO empty" />
        <Enum name="B_0x1" start="0x1" description="1/4 FIFO" />
        <Enum name="B_0x2" start="0x2" description="1/2 FIFO" />
        <Enum name="B_0x3" start="0x3" description="FIFO full" />
      </BitField>
      <BitField start="11" size="2" name="FTLVL" description="FIFO transmission level These bits are set and cleared by hardware. Note: This bit is not used in I2S mode.">
        <Enum name="B_0x0" start="0x0" description="FIFO empty" />
        <Enum name="B_0x1" start="0x1" description="1/4 FIFO" />
        <Enum name="B_0x2" start="0x2" description="1/2 FIFO" />
        <Enum name="B_0x3" start="0x3" description="FIFO full (considered as FULL when the FIFO threshold is greater than 1/2)" />
      </BitField>
    </Register>
    <Register start="+0xC" size="2" name="SPI_DR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="DR" description="Data register Data received or to be transmitted The data register serves as an interface between the Rx and Tx FIFOs. When the data register is read, RxFIFO is accessed while the write to data register accesses TxFIFO (See ). Note: Data is always right-aligned. Unused bits are ignored when writing to the register, and read as zero when the register is read. The Rx threshold setting must always correspond with the read access currently used." />
    </Register>
    <Register start="+0x10" size="2" name="SPI_CRCPR" access="Read/Write" reset_value="0x00000007" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="CRCPOLY" description="CRC polynomial register This register contains the polynomial for the CRC calculation. The CRC polynomial (0x0007) is the reset value of this register. Another polynomial can be configured as required." />
    </Register>
    <Register start="+0x14" size="2" name="SPI_RXCRCR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="RXCRC" description="Rx CRC register When CRC calculation is enabled, the RXCRC[15:0] bits contain the computed CRC value of the subsequently received bytes. This register is reset when the CRCEN bit in SPIx_CR1 register is written to 1. The CRC is calculated serially using the polynomial programmed in the SPIx_CRCPR register. Only the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPIx_CR1 is cleared). CRC calculation is done based on any CRC8 standard. The entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPIx_CR1 register is set). CRC calculation is done based on any CRC16 standard. Note: A read to this register when the BSY Flag is set could return an incorrect value. These bits are not used in I2S mode." />
    </Register>
    <Register start="+0x18" size="2" name="SPI_TXCRCR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="16" name="TXCRC" description="Tx CRC register When CRC calculation is enabled, the TXCRC[7:0] bits contain the computed CRC value of the subsequently transmitted bytes. This register is reset when the CRCEN bit of SPIx_CR1 is written to 1. The CRC is calculated serially using the polynomial programmed in the SPIx_CRCPR register. Only the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPIx_CR1 is cleared). CRC calculation is done based on any CRC8 standard. The entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPIx_CR1 register is set). CRC calculation is done based on any CRC16 standard. Note: A read to this register when the BSY flag is set could return an incorrect value. These bits are not used in I2S mode." />
    </Register>
    <Register start="+0x1C" size="2" name="SPI_I2SCFGR" access="Read/Write" reset_value="0x00000000" reset_mask="0x0000FFFF">
      <BitField start="0" size="1" name="CHLEN" description="Channel length (number of bits per audio channel) The bit write operation has a meaning only if DATLEN = 00 otherwise the channel length is fixed to 32-bit by hardware whatever the value filled in. Note: For correct operation, this bit should be configured when the I2S is disabled. It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="16-bit wide" />
        <Enum name="B_0x1" start="0x1" description="32-bit wide" />
      </BitField>
      <BitField start="1" size="2" name="DATLEN" description="Data length to be transferred Note: For correct operation, these bits should be configured when the I2S is disabled. They are not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="16-bit data length" />
        <Enum name="B_0x1" start="0x1" description="24-bit data length" />
        <Enum name="B_0x2" start="0x2" description="32-bit data length" />
        <Enum name="B_0x3" start="0x3" description="Not allowed" />
      </BitField>
      <BitField start="3" size="1" name="CKPOL" description="Inactive state clock polarity Note: For correct operation, this bit should be configured when the I2S is disabled. It is not used in SPI mode. The bit CKPOL does not affect the CK edge sensitivity used to receive or transmit the SD and WS signals.">
        <Enum name="B_0x0" start="0x0" description="I2S clock inactive state is low level" />
        <Enum name="B_0x1" start="0x1" description="I2S clock inactive state is high level" />
      </BitField>
      <BitField start="4" size="2" name="I2SSTD" description="I2S standard selection For more details on I2S standards, refer to Note: For correct operation, these bits should be configured when the I2S is disabled. They are not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="I2S Philips standard" />
        <Enum name="B_0x1" start="0x1" description="MSB justified standard (left justified)" />
        <Enum name="B_0x2" start="0x2" description="LSB justified standard (right justified)" />
        <Enum name="B_0x3" start="0x3" description="PCM standard" />
      </BitField>
      <BitField start="7" size="1" name="PCMSYNC" description="PCM frame synchronization Note: This bit has a meaning only if I2SSTD = 11 (PCM standard is used). It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Short frame synchronization" />
        <Enum name="B_0x1" start="0x1" description="Long frame synchronization" />
      </BitField>
      <BitField start="8" size="2" name="I2SCFG" description="I2S configuration mode Note: These bits should be configured when the I2S is disabled. They are not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Slave - transmit" />
        <Enum name="B_0x1" start="0x1" description="Slave - receive" />
        <Enum name="B_0x2" start="0x2" description="Master - transmit" />
        <Enum name="B_0x3" start="0x3" description="Master - receive" />
      </BitField>
      <BitField start="10" size="1" name="I2SE" description="I2S enable Note: This bit is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="I2S peripheral is disabled" />
        <Enum name="B_0x1" start="0x1" description="I2S peripheral is enabled" />
      </BitField>
      <BitField start="11" size="1" name="I2SMOD" description="I2S mode selection Note: This bit should be configured when the SPI is disabled.">
        <Enum name="B_0x0" start="0x0" description="SPI mode is selected" />
        <Enum name="B_0x1" start="0x1" description="I2S mode is selected" />
      </BitField>
      <BitField start="12" size="1" name="ASTRTEN" description="Asynchronous start enable. When the I2S is enabled in slave mode, the hardware starts the transfer when the I2S clock is received and an appropriate transition is detected on the WS signal. When the I2S is enabled in slave mode, the hardware starts the transfer when the I2S clock is received and the appropriate level is detected on the WS signal. Note: The appropriate transition is a falling edge on WS signal when I2S Philips Standard is used, or a rising edge for other standards. The appropriate level is a low level on WS signal when I2S Philips Standard is used, or a high level for other standards. Please refer to for additional information.">
        <Enum name="B_0x0" start="0x0" description="The Asynchronous start is disabled." />
        <Enum name="B_0x1" start="0x1" description="The Asynchronous start is enabled." />
      </BitField>
    </Register>
    <Register start="+0x20" size="2" name="SPI_I2SPR" access="Read/Write" reset_value="0x00000002" reset_mask="0x0000FFFF">
      <BitField start="0" size="8" name="I2SDIV" description="I2S linear prescaler I2SDIV [7:0] = 0 or I2SDIV [7:0] = 1 are forbidden values. Refer to . Note: These bits should be configured when the I2S is disabled. They are used only when the I2S is in master mode. They are not used in SPI mode." />
      <BitField start="8" size="1" name="ODD" description="Odd factor for the prescaler Refer to . Note: This bit should be configured when the I2S is disabled. It is used only when the I2S is in master mode. It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Real divider value is = I2SDIV *2" />
        <Enum name="B_0x1" start="0x1" description="Real divider value is = (I2SDIV * 2)+1" />
      </BitField>
      <BitField start="9" size="1" name="MCKOE" description="Master clock output enable Note: This bit should be configured when the I2S is disabled. It is used only when the I2S is in master mode. It is not used in SPI mode.">
        <Enum name="B_0x0" start="0x0" description="Master clock output is disabled" />
        <Enum name="B_0x1" start="0x1" description="Master clock output is enabled" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="SYSCFG" start="0x40010000" description="System configuration controller">
    <Register start="+0x0" size="0" name="CFGR1" access="Read/Write" description="SYSCFG configuration register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="MEM_MODE" description="Memory mapping selection bits" />
      <BitField start="3" size="1" name="PA11_RMP" description="PA11_RMP" />
      <BitField start="4" size="1" name="PA12_RMP" description="PA11 and PA12 remapping bit." />
      <BitField start="5" size="1" name="IR_POL" description="IR output polarity selection" />
      <BitField start="6" size="2" name="IR_MOD" description="IR Modulation Envelope signal selection." />
      <BitField start="8" size="1" name="BOOSTEN" description="I/O analog switch voltage booster enable" />
      <BitField start="9" size="1" name="UCPD1_STROBE" description="Strobe signal bit for UCPD1" />
      <BitField start="10" size="1" name="UCPD2_STROBE" description="Strobe signal bit for UCPD2" />
      <BitField start="16" size="1" name="I2C_PBx_FMP" description="Fast Mode Plus (FM+) driving capability activation bits" />
      <BitField start="17" size="1" name="I2C_PB7_FMP" description="I2C_PB7_FMP" />
      <BitField start="18" size="1" name="I2C_PB8_FMP" description="I2C_PB8_FMP" />
      <BitField start="19" size="1" name="I2C_PB9_FMP" description="I2C_PB9_FMP" />
      <BitField start="20" size="1" name="I2C1_FMP" description="FM+ driving capability activation for I2C1" />
      <BitField start="21" size="1" name="I2C2_FMP" description="FM+ driving capability activation for I2C2" />
      <BitField start="22" size="1" name="I2C_PA9_FMP" description="Fast Mode Plus (FM+) driving capability activation bits" />
      <BitField start="23" size="1" name="I2C_PA10_FMP" description="Fast Mode Plus (FM+) driving capability activation bits" />
      <BitField start="24" size="1" name="I2C3_FMP" description="I2C3_FMP" />
    </Register>
    <Register start="+0x18" size="0" name="CFGR2" access="Read/Write" description="SYSCFG configuration register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LOCKUP_LOCK" description="Cortex-M0+ LOCKUP bit enable bit" />
      <BitField start="1" size="1" name="SRAM_PARITY_LOCK" description="SRAM parity lock bit" />
      <BitField start="3" size="1" name="ECC_LOCK" description="ECC error lock bit" />
      <BitField start="8" size="1" name="SRAM_PEF" description="SRAM parity error flag" />
    </Register>
    <Register start="+0x80" size="0" name="ITLINE0" access="ReadOnly" description="interrupt line 0 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="WWDG" description="Window watchdog interrupt pending flag" />
    </Register>
    <Register start="+0x88" size="0" name="ITLINE2" access="ReadOnly" description="interrupt line 2 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TAMP" description="TAMP" />
      <BitField start="1" size="1" name="RTC" description="RTC" />
    </Register>
    <Register start="+0x8C" size="0" name="ITLINE3" access="ReadOnly" description="interrupt line 3 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="FLASH_ITF" description="FLASH_ITF" />
      <BitField start="1" size="1" name="FLASH_ECC" description="FLASH_ECC" />
    </Register>
    <Register start="+0x90" size="0" name="ITLINE4" access="ReadOnly" description="interrupt line 4 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="RCC" description="RCC" />
    </Register>
    <Register start="+0x94" size="0" name="ITLINE5" access="ReadOnly" description="interrupt line 5 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EXTI0" description="EXTI0" />
      <BitField start="1" size="1" name="EXTI1" description="EXTI1" />
    </Register>
    <Register start="+0x98" size="0" name="ITLINE6" access="ReadOnly" description="interrupt line 6 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EXTI2" description="EXTI2" />
      <BitField start="1" size="1" name="EXTI3" description="EXTI3" />
    </Register>
    <Register start="+0x9C" size="0" name="ITLINE7" access="ReadOnly" description="interrupt line 7 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EXTI4" description="EXTI4" />
      <BitField start="1" size="1" name="EXTI5" description="EXTI5" />
      <BitField start="2" size="1" name="EXTI6" description="EXTI6" />
      <BitField start="3" size="1" name="EXTI7" description="EXTI7" />
      <BitField start="4" size="1" name="EXTI8" description="EXTI8" />
      <BitField start="5" size="1" name="EXTI9" description="EXTI9" />
      <BitField start="6" size="1" name="EXTI10" description="EXTI10" />
      <BitField start="7" size="1" name="EXTI11" description="EXTI11" />
      <BitField start="8" size="1" name="EXTI12" description="EXTI12" />
      <BitField start="9" size="1" name="EXTI13" description="EXTI13" />
      <BitField start="10" size="1" name="EXTI14" description="EXTI14" />
      <BitField start="11" size="1" name="EXTI15" description="EXTI15" />
    </Register>
    <Register start="+0xA0" size="0" name="ITLINE8" access="ReadOnly" description="interrupt line 8 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="2" size="1" name="USB" description="USB" />
    </Register>
    <Register start="+0xA4" size="0" name="ITLINE9" access="ReadOnly" description="interrupt line 9 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="DMA1_CH1" description="DMA1_CH1" />
    </Register>
    <Register start="+0xA8" size="0" name="ITLINE10" access="ReadOnly" description="interrupt line 10 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="DMA1_CH2" description="DMA1_CH1" />
      <BitField start="1" size="1" name="DMA1_CH3" description="DMA1_CH3" />
    </Register>
    <Register start="+0xAC" size="0" name="ITLINE11" access="ReadOnly" description="interrupt line 11 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="DMAMUX" description="DMAMUX" />
      <BitField start="1" size="1" name="DMA1_CH4" description="DMA1_CH4" />
      <BitField start="2" size="1" name="DMA1_CH5" description="DMA1_CH5" />
      <BitField start="3" size="1" name="DMA1_CH6" description="DMA1_CH6" />
      <BitField start="4" size="1" name="DMA1_CH7" description="DMA1_CH7" />
      <BitField start="5" size="1" name="DMA2_CH1" description="DMA2_CH1" />
      <BitField start="6" size="1" name="DMA2_CH2" description="DMA2_CH2" />
      <BitField start="7" size="1" name="DMA2_CH3" description="DMA2_CH3" />
      <BitField start="8" size="1" name="DMA2_CH4" description="DMA2_CH4" />
      <BitField start="9" size="1" name="DMA2_CH5" description="DMA2_CH5" />
    </Register>
    <Register start="+0xB0" size="0" name="ITLINE12" access="ReadOnly" description="interrupt line 12 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ADC" description="ADC" />
    </Register>
    <Register start="+0xB4" size="0" name="ITLINE13" access="ReadOnly" description="interrupt line 13 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TIM1_CCU" description="TIM1_CCU" />
      <BitField start="1" size="1" name="TIM1_TRG" description="TIM1_TRG" />
      <BitField start="2" size="1" name="TIM1_UPD" description="TIM1_UPD" />
      <BitField start="3" size="1" name="TIM1_BRK" description="TIM1_BRK" />
    </Register>
    <Register start="+0xB8" size="0" name="ITLINE14" access="ReadOnly" description="interrupt line 14 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TIM1_CC" description="TIM1_CC" />
    </Register>
    <Register start="+0xC0" size="0" name="ITLINE16" access="ReadOnly" description="interrupt line 16 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TIM3" description="TIM3" />
      <BitField start="1" size="1" name="TIM4" description="TIM4" />
    </Register>
    <Register start="+0xC4" size="0" name="ITLINE17" access="ReadOnly" description="interrupt line 17 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TIM6" description="TIM6" />
    </Register>
    <Register start="+0xC8" size="0" name="ITLINE18" access="ReadOnly" description="interrupt line 18 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TIM7" description="TIM7" />
    </Register>
    <Register start="+0xCC" size="0" name="ITLINE19" access="ReadOnly" description="interrupt line 19 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TIM14" description="TIM14" />
    </Register>
    <Register start="+0xD0" size="0" name="ITLINE20" access="ReadOnly" description="interrupt line 20 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TIM15" description="TIM15" />
    </Register>
    <Register start="+0xD4" size="0" name="ITLINE21" access="ReadOnly" description="interrupt line 21 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TIM16" description="TIM16" />
    </Register>
    <Register start="+0xD8" size="0" name="ITLINE22" access="ReadOnly" description="interrupt line 22 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TIM17" description="TIM17" />
    </Register>
    <Register start="+0xDC" size="0" name="ITLINE23" access="ReadOnly" description="interrupt line 23 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="I2C1" description="I2C1" />
    </Register>
    <Register start="+0xE0" size="0" name="ITLINE24" access="ReadOnly" description="interrupt line 24 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="I2C2" description="I2C2" />
      <BitField start="1" size="1" name="I2C3" description="I2C3" />
    </Register>
    <Register start="+0xE4" size="0" name="ITLINE25" access="ReadOnly" description="interrupt line 25 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SPI1" description="SPI1" />
    </Register>
    <Register start="+0xE8" size="0" name="ITLINE26" access="ReadOnly" description="interrupt line 26 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SPI2" description="SPI2" />
      <BitField start="14" size="1" name="SPI3" description="SPI3" />
    </Register>
    <Register start="+0xEC" size="0" name="ITLINE27" access="ReadOnly" description="interrupt line 27 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="USART1" description="USART1" />
    </Register>
    <Register start="+0xF0" size="0" name="ITLINE28" access="ReadOnly" description="interrupt line 28 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="USART2" description="USART2" />
    </Register>
    <Register start="+0xF4" size="0" name="ITLINE29" access="ReadOnly" description="interrupt line 29 status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="USART3" description="USART3" />
      <BitField start="1" size="1" name="USART4" description="USART4" />
      <BitField start="3" size="1" name="USART5" description="USART5" />
      <BitField start="4" size="1" name="USART6" description="USART6" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="TAMP" start="0x4000B000" description="Tamper and backup registers">
    <Register start="+0x0" size="0" name="TAMP_CR1" access="Read/Write" description="TAMP control register 1" reset_value="0xFFFF0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TAMP1E" description="Tamper detection on TAMP_IN1 enable">
        <Enum name="B_0x0" start="0x0" description="Tamper detection on TAMP_IN1 is disabled." />
        <Enum name="B_0x1" start="0x1" description="Tamper detection on TAMP_IN1 is enabled." />
      </BitField>
      <BitField start="1" size="1" name="TAMP2E" description="Tamper detection on TAMP_IN2 enable">
        <Enum name="B_0x0" start="0x0" description="Tamper detection on TAMP_IN2 is disabled." />
        <Enum name="B_0x1" start="0x1" description="Tamper detection on TAMP_IN2 is enabled." />
      </BitField>
      <BitField start="2" size="1" name="TAMP3E" description="Tamper detection on TAMP_IN3 enable">
        <Enum name="B_0x0" start="0x0" description="Tamper detection on TAMP_IN3 is disabled." />
        <Enum name="B_0x1" start="0x1" description="Tamper detection on TAMP_IN3 is enabled." />
      </BitField>
      <BitField start="18" size="1" name="ITAMP3E" description="Internal tamper 3 enable: LSE monitoring">
        <Enum name="B_0x0" start="0x0" description="Internal tamper 3 disabled." />
        <Enum name="B_0x1" start="0x1" description="Internal tamper 3 enabled: a tamper is generated when the LSE frequency is below or above thresholds." />
      </BitField>
      <BitField start="19" size="1" name="ITAMP4E" description="Internal tamper 4 enable: HSE monitoring">
        <Enum name="B_0x0" start="0x0" description="Internal tamper 4 disabled." />
        <Enum name="B_0x1" start="0x1" description="Internal tamper 4 enabled. a tamper is generated when the HSE frequency is below or above thresholds." />
      </BitField>
      <BitField start="20" size="1" name="ITAMP5E" description="Internal tamper 5 enable: RTC calendar overflow">
        <Enum name="B_0x0" start="0x0" description="Internal tamper 5 disabled." />
        <Enum name="B_0x1" start="0x1" description="Internal tamper 5 enabled: a tamper is generated when the RTC calendar reaches its maximum value, on the 31st of December 99, at 23:59:59. The calendar is then frozen and cannot overflow." />
      </BitField>
      <BitField start="21" size="1" name="ITAMP6E" description="Internal tamper 6 enable: ST manufacturer readout">
        <Enum name="B_0x0" start="0x0" description="Internal tamper 6 disabled." />
        <Enum name="B_0x1" start="0x1" description="Internal tamper 6 enabled: a tamper is generated in case of ST manufacturer readout." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="TAMP_CR2" access="Read/Write" description="TAMP control register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TAMP1NOER" description="Tamper 1 no erase">
        <Enum name="B_0x0" start="0x0" description="Tamper 1 event erases the backup registers." />
        <Enum name="B_0x1" start="0x1" description="Tamper 1 event does not erase the backup registers." />
      </BitField>
      <BitField start="1" size="1" name="TAMP2NOER" description="Tamper 2 no erase">
        <Enum name="B_0x0" start="0x0" description="Tamper 2 event erases the backup registers." />
        <Enum name="B_0x1" start="0x1" description="Tamper 2 event does not erase the backup registers." />
      </BitField>
      <BitField start="2" size="1" name="TAMP3NOER" description="Tamper 3 no erase">
        <Enum name="B_0x0" start="0x0" description="Tamper 3 event erases the backup registers." />
        <Enum name="B_0x1" start="0x1" description="Tamper 3 event does not erase the backup registers." />
      </BitField>
      <BitField start="16" size="1" name="TAMP1MSK" description="Tamper 1 mask The tamper 1 interrupt must not be enabled when TAMP1MSK is set.">
        <Enum name="B_0x0" start="0x0" description="Tamper 1 event generates a trigger event and TAMP1F must be cleared by software to allow next tamper event detection." />
        <Enum name="B_0x1" start="0x1" description="Tamper 1 event generates a trigger event. TAMP1F is masked and internally cleared by hardware. The backup registers are not erased." />
      </BitField>
      <BitField start="17" size="1" name="TAMP2MSK" description="Tamper 2 mask The tamper 2 interrupt must not be enabled when TAMP2MSK is set.">
        <Enum name="B_0x0" start="0x0" description="Tamper 2 event generates a trigger event and TAMP2F must be cleared by software to allow next tamper event detection." />
        <Enum name="B_0x1" start="0x1" description="Tamper 2 event generates a trigger event. TAMP2F is masked and internally cleared by hardware. The backup registers are not erased." />
      </BitField>
      <BitField start="18" size="1" name="TAMP3MSK" description="Tamper 3 mask The tamper 3 interrupt must not be enabled when TAMP3MSK is set.">
        <Enum name="B_0x0" start="0x0" description="Tamper 3 event generates a trigger event and TAMP3F must be cleared by software to allow next tamper event detection." />
        <Enum name="B_0x1" start="0x1" description="Tamper 3 event generates a trigger event. TAMP3F is masked and internally cleared by hardware. The backup registers are not erased." />
      </BitField>
      <BitField start="24" size="1" name="TAMP1TRG" description="Active level for tamper 1 input (active mode disabled) If TAMPFLT = 00 Tamper 1 input rising edge and high level triggers a tamper detection event. If TAMPFLT = 00 Tamper 1 input falling edge and low level triggers a tamper detection event.">
        <Enum name="B_0x0" start="0x0" description="If TAMPFLT &#xc3;&#xa2;&#xc2;&#x89;&#xc2; 00 Tamper 1 input staying low triggers a tamper detection event." />
        <Enum name="B_0x1" start="0x1" description="If TAMPFLT &#xc3;&#xa2;&#xc2;&#x89;&#xc2; 00 Tamper 1 input staying high triggers a tamper detection event." />
      </BitField>
      <BitField start="25" size="1" name="TAMP2TRG" description="Active level for tamper 2 input (active mode disabled) If TAMPFLT = 00 Tamper 2 input rising edge and high level triggers a tamper detection event. If TAMPFLT = 00 Tamper 2 input falling edge and low level triggers a tamper detection event.">
        <Enum name="B_0x0" start="0x0" description="If TAMPFLT &#xc3;&#xa2;&#xc2;&#x89;&#xc2; 00 Tamper 2 input staying low triggers a tamper detection event." />
        <Enum name="B_0x1" start="0x1" description="If TAMPFLT &#xc3;&#xa2;&#xc2;&#x89;&#xc2; 00 Tamper 2 input staying high triggers a tamper detection event." />
      </BitField>
      <BitField start="26" size="1" name="TAMP3TRG" description="Active level for tamper 3 input (active mode disabled) If TAMPFLT = 00 Tamper 3 input rising edge and high level triggers a tamper detection event. If TAMPFLT = 00 Tamper 3 input falling edge and low level triggers a tamper detection event.">
        <Enum name="B_0x0" start="0x0" description="If TAMPFLT &#xc3;&#xa2;&#xc2;&#x89;&#xc2; 00 Tamper 3 input staying low triggers a tamper detection event." />
        <Enum name="B_0x1" start="0x1" description="If TAMPFLT &#xc3;&#xa2;&#xc2;&#x89;&#xc2; 00 Tamper 3 input staying high triggers a tamper detection event." />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="TAMP_FLTCR" access="Read/Write" description="TAMP filter control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="TAMPFREQ" description="Tamper sampling frequency Determines the frequency at which each of the TAMP_INx inputs are sampled.">
        <Enum name="B_0x0" start="0x0" description="RTCCLK / 32768 (1Hz when RTCCLK = 32768Hz)" />
        <Enum name="B_0x1" start="0x1" description="RTCCLK / 16384 (2Hz when RTCCLK = 32768Hz)" />
        <Enum name="B_0x2" start="0x2" description="RTCCLK / 8192 (4Hz when RTCCLK = 32768Hz)" />
        <Enum name="B_0x3" start="0x3" description="RTCCLK / 4096 (8Hz when RTCCLK = 32768Hz)" />
        <Enum name="B_0x4" start="0x4" description="RTCCLK / 2048 (16Hz when RTCCLK = 32768Hz)" />
        <Enum name="B_0x5" start="0x5" description="RTCCLK / 1024 (32Hz when RTCCLK = 32768Hz)" />
        <Enum name="B_0x6" start="0x6" description="RTCCLK / 512 (64Hz when RTCCLK = 32768Hz)" />
        <Enum name="B_0x7" start="0x7" description="RTCCLK / 256 (128Hz when RTCCLK = 32768Hz)" />
      </BitField>
      <BitField start="3" size="2" name="TAMPFLT" description="TAMP_INx filter count These bits determines the number of consecutive samples at the specified level (TAMP*TRG) needed to activate a tamper event. TAMPFLT is valid for each of the TAMP_INx inputs.">
        <Enum name="B_0x0" start="0x0" description="Tamper event is activated on edge of TAMP_INx input transitions to the active level (no internal pull-up on TAMP_INx input)." />
        <Enum name="B_0x1" start="0x1" description="Tamper event is activated after 2 consecutive samples at the active level." />
        <Enum name="B_0x2" start="0x2" description="Tamper event is activated after 4 consecutive samples at the active level." />
        <Enum name="B_0x3" start="0x3" description="Tamper event is activated after 8 consecutive samples at the active level." />
      </BitField>
      <BitField start="5" size="2" name="TAMPPRCH" description="TAMP_INx precharge duration These bit determines the duration of time during which the pull-up/is activated before each sample. TAMPPRCH is valid for each of the TAMP_INx inputs.">
        <Enum name="B_0x0" start="0x0" description="1 RTCCLK cycle" />
        <Enum name="B_0x1" start="0x1" description="2 RTCCLK cycles" />
        <Enum name="B_0x2" start="0x2" description="4 RTCCLK cycles" />
        <Enum name="B_0x3" start="0x3" description="8 RTCCLK cycles" />
      </BitField>
      <BitField start="7" size="1" name="TAMPPUDIS" description="TAMP_INx pull-up disable This bit determines if each of the TAMPx pins are precharged before each sample.">
        <Enum name="B_0x0" start="0x0" description="Precharge TAMP_INx pins before sampling (enable internal pull-up)" />
        <Enum name="B_0x1" start="0x1" description="Disable precharge of TAMP_INx pins." />
      </BitField>
    </Register>
    <Register start="+0x2C" size="0" name="TAMP_IER" access="Read/Write" description="TAMP interrupt enable register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TAMP1IE" description="Tamper 1 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Tamper 1 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Tamper 1 interrupt enabled." />
      </BitField>
      <BitField start="1" size="1" name="TAMP2IE" description="Tamper 2 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Tamper 2 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Tamper 2 interrupt enabled." />
      </BitField>
      <BitField start="2" size="1" name="TAMP3IE" description="Tamper 3 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Tamper 3 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Tamper 3 interrupt enabled.." />
      </BitField>
      <BitField start="18" size="1" name="ITAMP3IE" description="Internal tamper 3 interrupt enable: LSE monitoring">
        <Enum name="B_0x0" start="0x0" description="Internal tamper 3 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Internal tamper 3 interrupt enabled." />
      </BitField>
      <BitField start="19" size="1" name="ITAMP4IE" description="Internal tamper 4 interrupt enable: HSE monitoring">
        <Enum name="B_0x0" start="0x0" description="Internal tamper 4 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Internal tamper 4 interrupt enabled." />
      </BitField>
      <BitField start="20" size="1" name="ITAMP5IE" description="Internal tamper 5 interrupt enable: RTC calendar overflow">
        <Enum name="B_0x0" start="0x0" description="Internal tamper 5 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Internal tamper 5 interrupt enabled." />
      </BitField>
      <BitField start="21" size="1" name="ITAMP6IE" description="Internal tamper 6 interrupt enable: ST manufacturer readout">
        <Enum name="B_0x0" start="0x0" description="Internal tamper 6 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Internal tamper 6 interrupt enabled." />
      </BitField>
    </Register>
    <Register start="+0x30" size="0" name="TAMP_SR" access="Read/Write" description="TAMP status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TAMP1F" description="TAMP1 detection flag This flag is set by hardware when a tamper detection event is detected on the TAMP1 input." />
      <BitField start="1" size="1" name="TAMP2F" description="TAMP2 detection flag This flag is set by hardware when a tamper detection event is detected on the TAMP2 input." />
      <BitField start="2" size="1" name="TAMP3F" description="TAMP3 detection flag This flag is set by hardware when a tamper detection event is detected on the TAMP3 input." />
      <BitField start="18" size="1" name="ITAMP3F" description="LSE monitoring tamper detection flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 3." />
      <BitField start="19" size="1" name="ITAMP4F" description="HSE monitoring tamper detection flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 4." />
      <BitField start="20" size="1" name="ITAMP5F" description="RTC calendar overflow tamper detection flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 5." />
      <BitField start="21" size="1" name="ITAMP6F" description="ST manufacturer readout tamper detection flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 6." />
    </Register>
    <Register start="+0x34" size="0" name="TAMP_MISR" access="Read/Write" description="TAMP masked interrupt status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="TAMP1MF" description="TAMP1 interrupt masked flag This flag is set by hardware when the tamper 1 interrupt is raised." />
      <BitField start="1" size="1" name="TAMP2MF" description="TAMP2 interrupt masked flag This flag is set by hardware when the tamper 2 interrupt is raised." />
      <BitField start="2" size="1" name="TAMP3MF" description="TAMP3 interrupt masked flag This flag is set by hardware when the tamper 3 interrupt is raised." />
      <BitField start="18" size="1" name="ITAMP3MF" description="LSE monitoring tamper interrupt masked flag This flag is set by hardware when the internal tamper 3 interrupt is raised." />
      <BitField start="19" size="1" name="ITAMP4MF" description="HSE monitoring tamper interrupt masked flag This flag is set by hardware when the internal tamper 4 interrupt is raised." />
      <BitField start="20" size="1" name="ITAMP5MF" description="RTC calendar overflow tamper interrupt masked flag This flag is set by hardware when the internal tamper 5 interrupt is raised." />
      <BitField start="21" size="1" name="ITAMP6MF" description="ST manufacturer readout tamper interrupt masked flag This flag is set by hardware when the internal tamper 6 interrupt is raised." />
    </Register>
    <Register start="+0x3C" size="0" name="TAMP_SCR" access="Read/Write" description="TAMP status clear register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CTAMP1F" description="Clear TAMP1 detection flag Writing 1 in this bit clears the TAMP1F bit in the TAMP_SR register." />
      <BitField start="1" size="1" name="CTAMP2F" description="Clear TAMP2 detection flag Writing 1 in this bit clears the TAMP2F bit in the TAMP_SR register." />
      <BitField start="2" size="1" name="CTAMP3F" description="Clear TAMP3 detection flag Writing 1 in this bit clears the TAMP3F bit in the TAMP_SR register." />
      <BitField start="18" size="1" name="CITAMP3F" description="Clear ITAMP3 detection flag Writing 1 in this bit clears the ITAMP3F bit in the TAMP_SR register." />
      <BitField start="19" size="1" name="CITAMP4F" description="Clear ITAMP4 detection flag Writing 1 in this bit clears the ITAMP4F bit in the TAMP_SR register." />
      <BitField start="20" size="1" name="CITAMP5F" description="Clear ITAMP5 detection flag Writing 1 in this bit clears the ITAMP5F bit in the TAMP_SR register." />
      <BitField start="21" size="1" name="CITAMP6F" description="Clear ITAMP6 detection flag Writing 1 in this bit clears the ITAMP6F bit in the TAMP_SR register." />
    </Register>
    <Register start="+0x100" size="0" name="TAMP_BKP0R" access="Read/Write" description="TAMP backup 0 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="BKP" description="The application can write or read data to and from these registers. They are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode. In the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled." />
    </Register>
    <Register start="+0x104" size="0" name="TAMP_BKP1R" access="Read/Write" description="TAMP backup 1 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="BKP" description="The application can write or read data to and from these registers. They are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode. In the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled." />
    </Register>
    <Register start="+0x108" size="0" name="TAMP_BKP2R" access="Read/Write" description="TAMP backup 2 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="BKP" description="The application can write or read data to and from these registers. They are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode. In the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled." />
    </Register>
    <Register start="+0x10C" size="0" name="TAMP_BKP3R" access="Read/Write" description="TAMP backup 3 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="BKP" description="The application can write or read data to and from these registers. They are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode. In the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled." />
    </Register>
    <Register start="+0x110" size="0" name="TAMP_BKP4R" access="Read/Write" description="TAMP backup 4 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="BKP" description="The application can write or read data to and from these registers. They are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode. In the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled." />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="TIM1" start="0x40012C00" description="Advanced-timers">
    <Register start="+0x0" size="0" name="TIM1_CR1" access="Read/Write" description="control register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CEN" description="Counter enable Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.">
        <Enum name="B_0x0" start="0x0" description="Counter disabled" />
        <Enum name="B_0x1" start="0x1" description="Counter enabled" />
      </BitField>
      <BitField start="1" size="1" name="UDIS" description="Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.">
        <Enum name="B_0x0" start="0x0" description="UEV enabled. The Update (UEV) event is generated by one of the following events:" />
        <Enum name="B_0x1" start="0x1" description="UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller." />
      </BitField>
      <BitField start="2" size="1" name="URS" description="Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller">
        <Enum name="B_0x0" start="0x0" description="Any of the following events generate an update interrupt or DMA request if enabled. These events can be:" />
        <Enum name="B_0x1" start="0x1" description="Only counter overflow/underflow generates an update interrupt or DMA request if enabled." />
      </BitField>
      <BitField start="3" size="1" name="OPM" description="One pulse mode">
        <Enum name="B_0x0" start="0x0" description="Counter is not stopped at update event" />
        <Enum name="B_0x1" start="0x1" description="Counter stops counting at the next update event (clearing the bit CEN)" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="Direction Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode.">
        <Enum name="B_0x0" start="0x0" description="Counter used as upcounter" />
        <Enum name="B_0x1" start="0x1" description="Counter used as downcounter" />
      </BitField>
      <BitField start="5" size="2" name="CMS" description="Center-aligned mode selection Note: Switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1) is not allowed">
        <Enum name="B_0x0" start="0x0" description="Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR)." />
        <Enum name="B_0x1" start="0x1" description="Center-aligned mode 1. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down." />
        <Enum name="B_0x2" start="0x2" description="Center-aligned mode 2. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up." />
        <Enum name="B_0x3" start="0x3" description="Center-aligned mode 3. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down." />
      </BitField>
      <BitField start="7" size="1" name="ARPE" description="Auto-reload preload enable">
        <Enum name="B_0x0" start="0x0" description="TIMx_ARR register is not buffered" />
        <Enum name="B_0x1" start="0x1" description="TIMx_ARR register is buffered" />
      </BitField>
      <BitField start="8" size="2" name="CKD" description="Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (ETR, TIx): Note: tDTS = 1/fDTS, tCK_INT = 1/fCK_INT.">
        <Enum name="B_0x0" start="0x0" description="tDTS=tCK_INT" />
        <Enum name="B_0x1" start="0x1" description="tDTS=2*tCK_INT" />
        <Enum name="B_0x2" start="0x2" description="tDTS=4*tCK_INT" />
        <Enum name="B_0x3" start="0x3" description="Reserved, do not program this value" />
      </BitField>
      <BitField start="11" size="1" name="UIFREMAP" description="UIF status bit remapping">
        <Enum name="B_0x0" start="0x0" description="No remapping. UIF status bit is not copied to TIMx_CNT register bit 31." />
        <Enum name="B_0x1" start="0x1" description="Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="TIM1_CR2" access="Read/Write" description="control register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CCPC" description="Capture/compare preloaded control Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="CCxE, CCxNE and OCxM bits are not preloaded" />
        <Enum name="B_0x1" start="0x1" description="CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when a commutation event (COM) occurs (COMG bit set or rising edge detected on TRGI, depending on the CCUS bit)." />
      </BitField>
      <BitField start="2" size="1" name="CCUS" description="Capture/compare control update selection Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only" />
        <Enum name="B_0x1" start="0x1" description="When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI" />
      </BitField>
      <BitField start="3" size="1" name="CCDS" description="Capture/compare DMA selection">
        <Enum name="B_0x0" start="0x0" description="CCx DMA request sent when CCx event occurs" />
        <Enum name="B_0x1" start="0x1" description="CCx DMA requests sent when update event occurs" />
      </BitField>
      <BitField start="4" size="3" name="MMS" description="Master mode selection These bits allow selected information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows: Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset." />
        <Enum name="B_0x1" start="0x1" description="Enable - the Counter Enable signal CNT_EN is used as trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enable. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register)." />
        <Enum name="B_0x2" start="0x2" description="Update - The update event is selected as trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer." />
        <Enum name="B_0x3" start="0x3" description="Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (TRGO)." />
        <Enum name="B_0x4" start="0x4" description="Compare - OC1REFC signal is used as trigger output (TRGO)" />
        <Enum name="B_0x5" start="0x5" description="Compare - OC2REFC signal is used as trigger output (TRGO)" />
        <Enum name="B_0x6" start="0x6" description="Compare - OC3REFC signal is used as trigger output (TRGO)" />
        <Enum name="B_0x7" start="0x7" description="Compare - OC4REFC signal is used as trigger output (TRGO)" />
      </BitField>
      <BitField start="7" size="1" name="TI1S" description="TI1 selection">
        <Enum name="B_0x0" start="0x0" description="The TIMx_CH1 pin is connected to TI1 input" />
        <Enum name="B_0x1" start="0x1" description="The TIMx_CH1, CH2 and CH3 pins are connected to the TI1 input (XOR combination)" />
      </BitField>
      <BitField start="8" size="1" name="OIS1" description="Output Idle state 1 (OC1 output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="OC1=0 (after a dead-time if OC1N is implemented) when MOE=0" />
        <Enum name="B_0x1" start="0x1" description="OC1=1 (after a dead-time if OC1N is implemented) when MOE=0" />
      </BitField>
      <BitField start="9" size="1" name="OIS1N" description="Output Idle state 1 (OC1N output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="OC1N=0 after a dead-time when MOE=0" />
        <Enum name="B_0x1" start="0x1" description="OC1N=1 after a dead-time when MOE=0" />
      </BitField>
      <BitField start="10" size="1" name="OIS2" description="Output Idle state 2 (OC2 output) Refer to OIS1 bit" />
      <BitField start="11" size="1" name="OIS2N" description="Output Idle state 2 (OC2N output) Refer to OIS1N bit" />
      <BitField start="12" size="1" name="OIS3" description="Output Idle state 3 (OC3 output) Refer to OIS1 bit" />
      <BitField start="13" size="1" name="OIS3N" description="Output Idle state 3 (OC3N output) Refer to OIS1N bit" />
      <BitField start="14" size="1" name="OIS4" description="Output Idle state 4 (OC4 output) Refer to OIS1 bit" />
      <BitField start="16" size="1" name="OIS5" description="Output Idle state 5 (OC5 output) Refer to OIS1 bit" />
      <BitField start="18" size="1" name="OIS6" description="Output Idle state 6 (OC6 output) Refer to OIS1 bit" />
      <BitField start="20" size="4" name="MMS2" description="Master mode selection 2 These bits allow the information to be sent to ADC for synchronization (TRGO2) to be selected. The combination is as follows: Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO2). If the reset is generated by the trigger input (slave mode controller configured in reset mode), the signal on TRGO2 is delayed compared to the actual reset." />
        <Enum name="B_0x1" start="0x1" description="Enable - the Counter Enable signal CNT_EN is used as trigger output (TRGO2). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between the CEN control bit and the trigger input when configured in Gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO2, except if the Master/Slave mode is selected (see the MSM bit description in TIMx_SMCR register)." />
        <Enum name="B_0x2" start="0x2" description="Update - the update event is selected as trigger output (TRGO2). For instance, a master timer can then be used as a prescaler for a slave timer." />
        <Enum name="B_0x3" start="0x3" description="Compare pulse - the trigger output sends a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or compare match occurs (TRGO2)." />
        <Enum name="B_0x4" start="0x4" description="Compare - OC1REFC signal is used as trigger output (TRGO2)" />
        <Enum name="B_0x5" start="0x5" description="Compare - OC2REFC signal is used as trigger output (TRGO2)" />
        <Enum name="B_0x6" start="0x6" description="Compare - OC3REFC signal is used as trigger output (TRGO2)" />
        <Enum name="B_0x7" start="0x7" description="Compare - OC4REFC signal is used as trigger output (TRGO2)" />
        <Enum name="B_0x8" start="0x8" description="Compare - OC5REFC signal is used as trigger output (TRGO2)" />
        <Enum name="B_0x9" start="0x9" description="Compare - OC6REFC signal is used as trigger output (TRGO2)" />
        <Enum name="B_0xA" start="0xA" description="Compare Pulse - OC4REFC rising or falling edges generate pulses on TRGO2" />
        <Enum name="B_0xB" start="0xB" description="Compare Pulse - OC6REFC rising or falling edges generate pulses on TRGO2" />
        <Enum name="B_0xC" start="0xC" description="Compare Pulse - OC4REFC or OC6REFC rising edges generate pulses on TRGO2" />
        <Enum name="B_0xD" start="0xD" description="Compare Pulse - OC4REFC rising or OC6REFC falling edges generate pulses on TRGO2" />
        <Enum name="B_0xE" start="0xE" description="Compare Pulse - OC5REFC or OC6REFC rising edges generate pulses on TRGO2" />
        <Enum name="B_0xF" start="0xF" description="Compare Pulse - OC5REFC rising or OC6REFC falling edges generate pulses on TRGO2" />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="TIM1_SMCR" access="Read/Write" description="slave mode control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="SMS1" description="Slave mode selection When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled - if CEN = '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; then the prescaler is clocked directly by the internal clock." />
        <Enum name="B_0x1" start="0x1" description="Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level." />
        <Enum name="B_0x2" start="0x2" description="Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level." />
        <Enum name="B_0x3" start="0x3" description="Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input." />
        <Enum name="B_0x4" start="0x4" description="Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers." />
        <Enum name="B_0x5" start="0x5" description="Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled." />
        <Enum name="B_0x6" start="0x6" description="Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled." />
        <Enum name="B_0x7" start="0x7" description="External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter." />
        <Enum name="B_0x8" start="0x8" description="Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter, generates an update of the registers and starts the counter.Codes above 1000: Reserved." />
      </BitField>
      <BitField start="3" size="1" name="OCCS" description="OCREF clear selection This bit is used to select the OCREF clear source.">
        <Enum name="B_0x0" start="0x0" description="OCREF_CLR_INT is connected to COMP1 or COMP2 output depending on TIM1_OR1.OCREF_CLR" />
        <Enum name="B_0x1" start="0x1" description="OCREF_CLR_INT is connected to ETRF" />
      </BitField>
      <BitField start="4" size="3" name="TS1" description="Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for more details on ITRx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.">
        <Enum name="B_0x0" start="0x0" description="Internal Trigger 0 (ITR0)" />
        <Enum name="B_0x1" start="0x1" description="Internal Trigger 1 (ITR1)" />
        <Enum name="B_0x2" start="0x2" description="Internal Trigger 2 (ITR2)" />
        <Enum name="B_0x3" start="0x3" description="Internal Trigger 3 (ITR3)" />
        <Enum name="B_0x4" start="0x4" description="TI1 Edge Detector (TI1F_ED)" />
        <Enum name="B_0x5" start="0x5" description="Filtered Timer Input 1 (TI1FP1)" />
        <Enum name="B_0x6" start="0x6" description="Filtered Timer Input 2 (TI2FP2)" />
        <Enum name="B_0x7" start="0x7" description="External Trigger input (ETRF)" />
      </BitField>
      <BitField start="7" size="1" name="MSM" description="Master/slave mode">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event." />
      </BitField>
      <BitField start="8" size="4" name="ETF" description="External trigger filter This bit-field then defines the frequency used to sample ETRP signal and the length of the digital filter applied to ETRP. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:">
        <Enum name="B_0x0" start="0x0" description="No filter, sampling is done at fDTS" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
      <BitField start="12" size="2" name="ETPS" description="External trigger prescaler External trigger signal ETRP frequency must be at most 1/4 of fCK_INT frequency. A prescaler can be enabled to reduce ETRP frequency. It is useful when inputting fast external clocks.">
        <Enum name="B_0x0" start="0x0" description="Prescaler OFF" />
        <Enum name="B_0x1" start="0x1" description="ETRP frequency divided by 2" />
        <Enum name="B_0x2" start="0x2" description="ETRP frequency divided by 4" />
        <Enum name="B_0x3" start="0x3" description="ETRP frequency divided by 8" />
      </BitField>
      <BitField start="14" size="1" name="ECE" description="External clock enable This bit enables External clock mode 2. Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with TRGI connected to ETRF (SMS=111 and TS=00111). It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, TRGI must not be connected to ETRF in this case (TS bits must not be 00111). If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is ETRF.">
        <Enum name="B_0x0" start="0x0" description="External clock mode 2 disabled" />
        <Enum name="B_0x1" start="0x1" description="External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal." />
      </BitField>
      <BitField start="15" size="1" name="ETP" description="External trigger polarity This bit selects whether ETR or ETR is used for trigger operations">
        <Enum name="B_0x0" start="0x0" description="ETR is non-inverted, active at high level or rising edge." />
        <Enum name="B_0x1" start="0x1" description="ETR is inverted, active at low level or falling edge." />
      </BitField>
      <BitField start="16" size="1" name="SMS2" description="Slave mode selection When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled - if CEN = '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; then the prescaler is clocked directly by the internal clock." />
        <Enum name="B_0x1" start="0x1" description="Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level." />
        <Enum name="B_0x2" start="0x2" description="Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level." />
        <Enum name="B_0x3" start="0x3" description="Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input." />
        <Enum name="B_0x4" start="0x4" description="Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers." />
        <Enum name="B_0x5" start="0x5" description="Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled." />
        <Enum name="B_0x6" start="0x6" description="Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled." />
        <Enum name="B_0x7" start="0x7" description="External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter." />
        <Enum name="B_0x8" start="0x8" description="Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter, generates an update of the registers and starts the counter.Codes above 1000: Reserved." />
      </BitField>
      <BitField start="20" size="2" name="TS2" description="Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for more details on ITRx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.">
        <Enum name="B_0x0" start="0x0" description="Internal Trigger 0 (ITR0)" />
        <Enum name="B_0x1" start="0x1" description="Internal Trigger 1 (ITR1)" />
        <Enum name="B_0x2" start="0x2" description="Internal Trigger 2 (ITR2)" />
        <Enum name="B_0x3" start="0x3" description="Internal Trigger 3 (ITR3)" />
        <Enum name="B_0x4" start="0x4" description="TI1 Edge Detector (TI1F_ED)" />
        <Enum name="B_0x5" start="0x5" description="Filtered Timer Input 1 (TI1FP1)" />
        <Enum name="B_0x6" start="0x6" description="Filtered Timer Input 2 (TI2FP2)" />
        <Enum name="B_0x7" start="0x7" description="External Trigger input (ETRF)" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="TIM1_DIER" access="Read/Write" description="DMA/Interrupt enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIE" description="Update interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Update interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Update interrupt enabled" />
      </BitField>
      <BitField start="1" size="1" name="CC1IE" description="Capture/Compare 1 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC1 interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="CC1 interrupt enabled" />
      </BitField>
      <BitField start="2" size="1" name="CC2IE" description="Capture/Compare 2 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC2 interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="CC2 interrupt enabled" />
      </BitField>
      <BitField start="3" size="1" name="CC3IE" description="Capture/Compare 3 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC3 interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="CC3 interrupt enabled" />
      </BitField>
      <BitField start="4" size="1" name="CC4IE" description="Capture/Compare 4 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC4 interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="CC4 interrupt enabled" />
      </BitField>
      <BitField start="5" size="1" name="COMIE" description="COM interrupt enable">
        <Enum name="B_0x0" start="0x0" description="COM interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="COM interrupt enabled" />
      </BitField>
      <BitField start="6" size="1" name="TIE" description="Trigger interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Trigger interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Trigger interrupt enabled" />
      </BitField>
      <BitField start="7" size="1" name="BIE" description="Break interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Break interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Break interrupt enabled" />
      </BitField>
      <BitField start="8" size="1" name="UDE" description="Update DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Update DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="Update DMA request enabled" />
      </BitField>
      <BitField start="9" size="1" name="CC1DE" description="Capture/Compare 1 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC1 DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="CC1 DMA request enabled" />
      </BitField>
      <BitField start="10" size="1" name="CC2DE" description="Capture/Compare 2 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC2 DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="CC2 DMA request enabled" />
      </BitField>
      <BitField start="11" size="1" name="CC3DE" description="Capture/Compare 3 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC3 DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="CC3 DMA request enabled" />
      </BitField>
      <BitField start="12" size="1" name="CC4DE" description="Capture/Compare 4 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC4 DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="CC4 DMA request enabled" />
      </BitField>
      <BitField start="13" size="1" name="COMDE" description="COM DMA request enable">
        <Enum name="B_0x0" start="0x0" description="COM DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="COM DMA request enabled" />
      </BitField>
      <BitField start="14" size="1" name="TDE" description="Trigger DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Trigger DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="Trigger DMA request enabled" />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="TIM1_SR" access="Read/Write" description="status register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIF" description="Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow or underflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer to control register (TIM1_SMCRTIMx_SMCR)N/A), if URS=0 and UDIS=0 in the TIMx_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No update occurred." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt pending. This bit is set by hardware when the registers are updated:" />
      </BitField>
      <BitField start="1" size="1" name="CC1IF" description="Capture/Compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="No compare match / No input capture occurred" />
        <Enum name="B_0x1" start="0x1" description="A compare match or an input capture occurred." />
      </BitField>
      <BitField start="2" size="1" name="CC2IF" description="Capture/Compare 2 interrupt flag Refer to CC1IF description" />
      <BitField start="3" size="1" name="CC3IF" description="Capture/Compare 3 interrupt flag Refer to CC1IF description" />
      <BitField start="4" size="1" name="CC4IF" description="Capture/Compare 4 interrupt flag Refer to CC1IF description" />
      <BitField start="5" size="1" name="COMIF" description="COM interrupt flag This flag is set by hardware on COM event (when Capture/compare Control bits - CCxE, CCxNE, OCxM - have been updated). It is cleared by software.">
        <Enum name="B_0x0" start="0x0" description="No COM event occurred." />
        <Enum name="B_0x1" start="0x1" description="COM interrupt pending." />
      </BitField>
      <BitField start="6" size="1" name="TIF" description="Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on TRGI input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software.">
        <Enum name="B_0x0" start="0x0" description="No trigger event occurred." />
        <Enum name="B_0x1" start="0x1" description="Trigger interrupt pending." />
      </BitField>
      <BitField start="7" size="1" name="BIF" description="Break interrupt flag This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active.">
        <Enum name="B_0x0" start="0x0" description="No break event occurred." />
        <Enum name="B_0x1" start="0x1" description="An active level has been detected on the break input. An interrupt is generated if BIE=1 in the TIMx_DIER register." />
      </BitField>
      <BitField start="8" size="1" name="B2IF" description="Break 2 interrupt flag This flag is set by hardware as soon as the break 2 input goes active. It can be cleared by software if the break 2 input is not active.">
        <Enum name="B_0x0" start="0x0" description="No break event occurred." />
        <Enum name="B_0x1" start="0x1" description="An active level has been detected on the break 2 input. An interrupt is generated if BIE=1 in the TIMx_DIER register." />
      </BitField>
      <BitField start="9" size="1" name="CC1OF" description="Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;.">
        <Enum name="B_0x0" start="0x0" description="No overcapture has been detected." />
        <Enum name="B_0x1" start="0x1" description="The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set" />
      </BitField>
      <BitField start="10" size="1" name="CC2OF" description="Capture/Compare 2 overcapture flag Refer to CC1OF description" />
      <BitField start="11" size="1" name="CC3OF" description="Capture/Compare 3 overcapture flag Refer to CC1OF description" />
      <BitField start="12" size="1" name="CC4OF" description="Capture/Compare 4 overcapture flag Refer to CC1OF description" />
      <BitField start="13" size="1" name="SBIF" description="System Break interrupt flag This flag is set by hardware as soon as the system break input goes active. It can be cleared by software if the system break input is not active. This flag must be reset to re-start PWM operation.">
        <Enum name="B_0x0" start="0x0" description="No break event occurred." />
        <Enum name="B_0x1" start="0x1" description="An active level has been detected on the system break input. An interrupt is generated if BIE=1 in the TIMx_DIER register." />
      </BitField>
      <BitField start="16" size="1" name="CC5IF" description="Compare 5 interrupt flag Refer to CC1IF description (Note: Channel 5 can only be configured as output)" />
      <BitField start="17" size="1" name="CC6IF" description="Compare 6 interrupt flag Refer to CC1IF description (Note: Channel 6 can only be configured as output)" />
    </Register>
    <Register start="+0x14" size="0" name="TIM1_EGR" access="WriteOnly" description="event generation register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UG" description="Update generation This bit can be set by software, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="Reinitialize the counter and generates an update of the registers. The prescaler internal counter is also cleared (the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting)." />
      </BitField>
      <BitField start="1" size="1" name="CC1G" description="Capture/Compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="A capture/compare event is generated on channel 1:" />
      </BitField>
      <BitField start="2" size="1" name="CC2G" description="Capture/Compare 2 generation Refer to CC1G description" />
      <BitField start="3" size="1" name="CC3G" description="Capture/Compare 3 generation Refer to CC1G description" />
      <BitField start="4" size="1" name="CC4G" description="Capture/Compare 4 generation Refer to CC1G description" />
      <BitField start="5" size="1" name="COMG" description="Capture/Compare control update generation This bit can be set by software, it is automatically cleared by hardware Note: This bit acts only on channels having a complementary output.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="When CCPC bit is set, it allows CCxE, CCxNE and OCxM bits to be updated." />
      </BitField>
      <BitField start="6" size="1" name="TG" description="Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled." />
      </BitField>
      <BitField start="7" size="1" name="BG" description="Break generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled." />
      </BitField>
      <BitField start="8" size="1" name="B2G" description="Break 2 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="A break 2 event is generated. MOE bit is cleared and B2IF flag is set. Related interrupt can occur if enabled." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Output" access="Read/Write" description="capture/compare mode register 1 (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1" />
        <Enum name="B_0x2" start="0x2" description="CC1 channel is configured as input, IC1 is mapped on TI2" />
        <Enum name="B_0x3" start="0x3" description="CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="2" size="1" name="OC1FE" description="Output Compare 1 fast enable This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger.">
        <Enum name="B_0x0" start="0x0" description="CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles." />
        <Enum name="B_0x1" start="0x1" description="An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently from the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode." />
      </BitField>
      <BitField start="3" size="1" name="OC1PE" description="Output Compare 1 preload enable Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.">
        <Enum name="B_0x0" start="0x0" description="Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately." />
        <Enum name="B_0x1" start="0x1" description="Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event." />
      </BitField>
      <BitField start="4" size="3" name="OC1M1" description="Output Compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;frozen&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode to &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;PWM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode. Note: On channels having a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated. Note: The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base)." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (OC1REF='0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) as long as TIMx_CNT&gt;TIMx_CCR1 else active (OC1REF=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;)." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT&gt;TIMx_CCR1 else inactive." />
        <Enum name="B_0x8" start="0x8" description="Retrigerrable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update." />
        <Enum name="B_0x9" start="0x9" description="Retrigerrable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update." />
        <Enum name="B_0xC" start="0xC" description="Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF." />
        <Enum name="B_0xD" start="0xD" description="Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF." />
        <Enum name="B_0xE" start="0xE" description="Asymmetric PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down." />
        <Enum name="B_0xF" start="0xF" description="Asymmetric PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down." />
      </BitField>
      <BitField start="7" size="1" name="OC1CE" description="Output Compare 1 clear enable">
        <Enum name="B_0x0" start="0x0" description="OC1Ref is not affected by the ocref_clr_int signal" />
        <Enum name="B_0x1" start="0x1" description="OC1Ref is cleared as soon as a High level is detected on ocref_clr_int signal (OCREF_CLR input or ETRF input)" />
      </BitField>
      <BitField start="8" size="2" name="CC2S" description="Capture/Compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC2 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC2 channel is configured as input, IC2 is mapped on TI2" />
        <Enum name="B_0x2" start="0x2" description="CC2 channel is configured as input, IC2 is mapped on TI1" />
        <Enum name="B_0x3" start="0x3" description="CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="10" size="1" name="OC2FE" description="Output Compare 2 fast enable Refer to OC1FE description." />
      <BitField start="11" size="1" name="OC2PE" description="Output Compare 2 preload enable Refer to OC1PE description." />
      <BitField start="12" size="3" name="OC2M1" description="Output Compare 2 mode Refer to OC1M[3:0] description." />
      <BitField start="15" size="1" name="OC2CE" description="Output Compare 2 clear enable Refer to OC1CE description." />
      <BitField start="16" size="1" name="OC1M2" description="Output Compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;frozen&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode to &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;PWM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode. Note: On channels having a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated. Note: The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base)." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (OC1REF='0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) as long as TIMx_CNT&gt;TIMx_CCR1 else active (OC1REF=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;)." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT&gt;TIMx_CCR1 else inactive." />
        <Enum name="B_0x8" start="0x8" description="Retrigerrable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update." />
        <Enum name="B_0x9" start="0x9" description="Retrigerrable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update." />
        <Enum name="B_0xC" start="0xC" description="Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF." />
        <Enum name="B_0xD" start="0xD" description="Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF." />
        <Enum name="B_0xE" start="0xE" description="Asymmetric PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down." />
        <Enum name="B_0xF" start="0xF" description="Asymmetric PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down." />
      </BitField>
      <BitField start="24" size="1" name="OC2M2" description="Output Compare 2 mode Refer to OC1M[3:0] description." />
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Input" access="Read/Write" description="capture/compare mode register 1 (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 Selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1" />
        <Enum name="B_0x2" start="0x2" description="CC1 channel is configured as input, IC1 is mapped on TI2" />
        <Enum name="B_0x3" start="0x3" description="CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="2" size="2" name="IC1PSC" description="Input capture 1 prescaler This bit-field defines the ratio of the prescaler acting on CC1 input (IC1). The prescaler is reset as soon as CC1E=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (TIMx_CCER register).">
        <Enum name="B_0x0" start="0x0" description="no prescaler, capture is done each time an edge is detected on the capture input" />
        <Enum name="B_0x1" start="0x1" description="capture is done once every 2 events" />
        <Enum name="B_0x2" start="0x2" description="capture is done once every 4 events" />
        <Enum name="B_0x3" start="0x3" description="capture is done once every 8 events" />
      </BitField>
      <BitField start="4" size="4" name="IC1F" description="Input capture 1 filter This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:">
        <Enum name="B_0x0" start="0x0" description="No filter, sampling is done at fDTS" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
      <BitField start="8" size="2" name="CC2S" description="Capture/Compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC2 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC2 channel is configured as input, IC2 is mapped on TI2" />
        <Enum name="B_0x2" start="0x2" description="CC2 channel is configured as input, IC2 is mapped on TI1" />
        <Enum name="B_0x3" start="0x3" description="CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="10" size="2" name="IC2PSC" description="Input capture 2 prescaler Refer to IC1PSC[1:0] description." />
      <BitField start="12" size="4" name="IC2F" description="Input capture 2 filter Refer to IC1F[3:0] description." />
    </Register>
    <Register start="+0x1C" size="0" name="CCMR2_Output" access="Read/Write" description="capture/compare mode register 2 (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC3S" description="Capture/Compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC3 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC3 channel is configured as input, IC3 is mapped on TI3" />
        <Enum name="B_0x2" start="0x2" description="CC3 channel is configured as input, IC3 is mapped on TI4" />
        <Enum name="B_0x3" start="0x3" description="CC3 channel is configured as input, IC3 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="2" size="1" name="OC3FE" description="Output compare 3 fast enable Refer to OC1FE description." />
      <BitField start="3" size="1" name="OC3PE" description="Output compare 3 preload enable Refer to OC1PE description." />
      <BitField start="4" size="3" name="OC3M1" description="Output compare 3 mode Refer to OC1M[3:0] description." />
      <BitField start="7" size="1" name="OC3CE" description="Output compare 3 clear enable Refer to OC1CE description." />
      <BitField start="8" size="2" name="CC4S" description="Capture/Compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC4 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC4 channel is configured as input, IC4 is mapped on TI4" />
        <Enum name="B_0x2" start="0x2" description="CC4 channel is configured as input, IC4 is mapped on TI3" />
        <Enum name="B_0x3" start="0x3" description="CC4 channel is configured as input, IC4 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="10" size="1" name="OC4FE" description="Output compare 4 fast enable Refer to OC1FE description." />
      <BitField start="11" size="1" name="OC4PE" description="Output compare 4 preload enable Refer to OC1PE description." />
      <BitField start="12" size="3" name="OC4M1" description="Output compare 4 mode Refer to OC3M[3:0] description." />
      <BitField start="15" size="1" name="OC4CE" description="Output compare 4 clear enable Refer to OC1CE description." />
      <BitField start="16" size="1" name="OC3M2" description="Output compare 3 mode Refer to OC1M[3:0] description." />
      <BitField start="24" size="1" name="OC4M2" description="Output compare 4 mode Refer to OC3M[3:0] description." />
    </Register>
    <Register start="+0x1C" size="0" name="CCMR2_Input" access="Read/Write" description="capture/compare mode register 2 (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC3S" description="Capture/compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC3 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC3 channel is configured as input, IC3 is mapped on TI3" />
        <Enum name="B_0x2" start="0x2" description="CC3 channel is configured as input, IC3 is mapped on TI4" />
        <Enum name="B_0x3" start="0x3" description="CC3 channel is configured as input, IC3 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="2" size="2" name="IC3PSC" description="Input capture 3 prescaler Refer to IC1PSC[1:0] description." />
      <BitField start="4" size="4" name="IC3F" description="Input capture 3 filter Refer to IC1F[3:0] description." />
      <BitField start="8" size="2" name="CC4S" description="Capture/Compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC4 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC4 channel is configured as input, IC4 is mapped on TI4" />
        <Enum name="B_0x2" start="0x2" description="CC4 channel is configured as input, IC4 is mapped on TI3" />
        <Enum name="B_0x3" start="0x3" description="CC4 channel is configured as input, IC4 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="10" size="2" name="IC4PSC" description="Input capture 4 prescaler Refer to IC1PSC[1:0] description." />
      <BitField start="12" size="4" name="IC4F" description="Input capture 4 filter Refer to IC1F[3:0] description." />
    </Register>
    <Register start="+0x20" size="0" name="TIM1_CCER" access="Read/Write" description="capture/compare enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CC1E" description="Capture/Compare 1 output enable When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to for details. Note: On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1E active bit takes the new value from the preloaded bit only when a Commutation event is generated.">
        <Enum name="B_0x0" start="0x0" description="Capture mode disabled / OC1 is not active (see below)" />
        <Enum name="B_0x1" start="0x1" description="Capture mode enabled / OC1 signal is output on the corresponding output pin" />
      </BitField>
      <BitField start="1" size="1" name="CC1P" description="Capture/Compare 1 output polarity When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0: non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1: inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1: non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0: The configuration is reserved, it must not be used. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated.">
        <Enum name="B_0x0" start="0x0" description="OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)" />
        <Enum name="B_0x1" start="0x1" description="OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)" />
      </BitField>
      <BitField start="2" size="1" name="CC1NE" description="Capture/Compare 1 complementary output enable On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NE active bit takes the new value from the preloaded bit only when a Commutation event is generated.">
        <Enum name="B_0x0" start="0x0" description="Off - OC1N is not active. OC1N level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits." />
        <Enum name="B_0x1" start="0x1" description="On - OC1N signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits." />
      </BitField>
      <BitField start="3" size="1" name="CC1NP" description="Capture/Compare 1 complementary output polarity CC1 channel configured as output: CC1 channel configured as input: This bit is used in conjunction with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer to CC1P description. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; (channel configured as output). On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a Commutation event is generated.">
        <Enum name="B_0x0" start="0x0" description="OC1N active high." />
        <Enum name="B_0x1" start="0x1" description="OC1N active low." />
      </BitField>
      <BitField start="4" size="1" name="CC2E" description="Capture/Compare 2 output enable Refer to CC1E description" />
      <BitField start="5" size="1" name="CC2P" description="Capture/Compare 2 output polarity Refer to CC1P description" />
      <BitField start="6" size="1" name="CC2NE" description="Capture/Compare 2 complementary output enable Refer to CC1NE description" />
      <BitField start="7" size="1" name="CC2NP" description="Capture/Compare 2 complementary output polarity Refer to CC1NP description" />
      <BitField start="8" size="1" name="CC3E" description="Capture/Compare 3 output enable Refer to CC1E description" />
      <BitField start="9" size="1" name="CC3P" description="Capture/Compare 3 output polarity Refer to CC1P description" />
      <BitField start="10" size="1" name="CC3NE" description="Capture/Compare 3 complementary output enable Refer to CC1NE description" />
      <BitField start="11" size="1" name="CC3NP" description="Capture/Compare 3 complementary output polarity Refer to CC1NP description" />
      <BitField start="12" size="1" name="CC4E" description="Capture/Compare 4 output enable Refer to CC1E description" />
      <BitField start="13" size="1" name="CC4P" description="Capture/Compare 4 output polarity Refer to CC1P description" />
      <BitField start="15" size="1" name="CC4NP" description="Capture/Compare 4 complementary output polarity Refer to CC1NP description" />
      <BitField start="16" size="1" name="CC5E" description="Capture/Compare 5 output enable Refer to CC1E description" />
      <BitField start="17" size="1" name="CC5P" description="Capture/Compare 5 output polarity Refer to CC1P description" />
      <BitField start="20" size="1" name="CC6E" description="Capture/Compare 6 output enable Refer to CC1E description" />
      <BitField start="21" size="1" name="CC6P" description="Capture/Compare 6 output polarity Refer to CC1P description" />
    </Register>
    <Register start="+0x24" size="0" name="TIM1_CNT" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CNT" description="Counter value" />
      <BitField start="31" size="1" name="UIFCPY" description="UIF copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in the TIMxCR1 is reset, bit 31 is reserved and read at 0." />
    </Register>
    <Register start="+0x28" size="0" name="TIM1_PSC" access="Read/Write" description="prescaler" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="PSC" description="Prescaler value The counter clock frequency (CK_CNT) is equal to fCK_PSC / (PSC[15:0] + 1). PSC contains the value to be loaded in the active prescaler register at each update event (including when the counter is cleared through UG bit of TIMx_EGR register or through trigger controller when configured in &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;reset mode&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;)." />
    </Register>
    <Register start="+0x2C" size="0" name="TIM1_ARR" access="Read/Write" description="auto-reload register" reset_value="0x0000FFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="ARR" description="Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null." />
    </Register>
    <Register start="+0x30" size="0" name="TIM1_RCR" access="Read/Write" description="repetition counter register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="REP" description="Repetition counter value" />
    </Register>
    <Register start="+0x34" size="0" name="TIM1_CCR1" access="Read/Write" description="capture/compare register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR1" description="Capture/Compare 1 value" />
    </Register>
    <Register start="+0x38" size="0" name="TIM1_CCR2" access="Read/Write" description="capture/compare register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR2" description="Capture/Compare 2 value" />
    </Register>
    <Register start="+0x3C" size="0" name="TIM1_CCR3" access="Read/Write" description="capture/compare register 3" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR3" description="Capture/Compare value" />
    </Register>
    <Register start="+0x40" size="0" name="TIM1_CCR4" access="Read/Write" description="capture/compare register 4" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR4" description="Capture/Compare value" />
    </Register>
    <Register start="+0x44" size="0" name="TIM1_BDTR" access="Read/Write" description="break and dead-time register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="DTG" description="Dead-time generator setup This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration. DTG[7:5]=0xx =&gt; DT=DTG[7:0]x tDTG with tDTG=tDTS. DTG[7:5]=10x =&gt; DT=(64+DTG[5:0])xtDTG with tDTG=2xtDTS. DTG[7:5]=110 =&gt; DT=(32+DTG[4:0])xtDTG with tDTG=8xtDTS. DTG[7:5]=111 =&gt; DT=(32+DTG[4:0])xtDTG with tDTG=16xtDTS. Example if tDTS=125&#xc3;&#x82;&#xc2; ns (8&#xc3;&#x82;&#xc2; MHz), dead-time possible values are: 0 to 15875&#xc3;&#x82;&#xc2; ns by 125&#xc3;&#x82;&#xc2; ns steps, 16&#xc3;&#x82;&#xc2; &#xc3;&#x8e;&#xc2;&#xbc;s to 31750&#xc3;&#x82;&#xc2; ns&#xc3;&#x82;&#xc2; by 250&#xc3;&#x82;&#xc2; ns steps, 32&#xc3;&#x82;&#xc2; &#xc3;&#x8e;&#xc2;&#xbc;s to 63&#xc3;&#x82;&#xc2; &#xc3;&#x8e;&#xc2;&#xbc;s by 1&#xc3;&#x82;&#xc2; &#xc3;&#x8e;&#xc2;&#xbc;s steps, 64&#xc3;&#x82;&#xc2; &#xc3;&#x8e;&#xc2;&#xbc;s to 126&#xc3;&#x82;&#xc2; &#xc3;&#x8e;&#xc2;&#xbc;s by 2&#xc3;&#x82;&#xc2; &#xc3;&#x8e;&#xc2;&#xbc;s steps Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register)." />
      <BitField start="8" size="2" name="LOCK" description="Lock configuration These bits offer a write protection against software errors. Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset.">
        <Enum name="B_0x0" start="0x0" description="LOCK OFF - No bit is write protected." />
        <Enum name="B_0x1" start="0x1" description="LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BK2BID, BKBID, BK2DSRM, BKDSRM, BK2P, BK2E, BK2F[3:0], BKF[3:0], AOE, BKP, BKE, OSSI, OSSR and DTG[7:0] bits in TIMx_BDTR register can no longer be written." />
        <Enum name="B_0x2" start="0x2" description="LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written." />
        <Enum name="B_0x3" start="0x3" description="LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written." />
      </BitField>
      <BitField start="10" size="1" name="OSSI" description="Off-state selection for Idle mode This bit is used when MOE=0 due to a break event or by a software write, on channels configured as outputs. See OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the GPIO logic and which imposes a Hi-Z state)." />
        <Enum name="B_0x1" start="0x1" description="When inactive, OC/OCN outputs are first forced with their inactive level then forced to their idle level after the deadtime. The timer maintains its control over the output." />
      </BitField>
      <BitField start="11" size="1" name="OSSR" description="Off-state selection for Run mode This bit is used when MOE=1 on channels having a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer. See OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the GPIO logic, which forces a Hi-Z state)." />
        <Enum name="B_0x1" start="0x1" description="When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer)." />
      </BitField>
      <BitField start="12" size="1" name="BKE" description="Break enable This bit enables the complete break protection (including all sources connected to bk_acth and BKIN sources, as per ). Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break function disabled" />
        <Enum name="B_0x1" start="0x1" description="Break function enabled" />
      </BitField>
      <BitField start="13" size="1" name="BKP" description="Break polarity Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK is active low" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK is active high" />
      </BitField>
      <BitField start="14" size="1" name="AOE" description="Automatic output enable Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="MOE can be set only by software" />
        <Enum name="B_0x1" start="0x1" description="MOE can be set by software or automatically at the next update event (if none of the break inputs BRK and BRK2 is active)" />
      </BitField>
      <BitField start="15" size="1" name="MOE" description="Main output enable This bit is cleared asynchronously by hardware as soon as one of the break inputs is active (BRK or BRK2). It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output. In response to a break event or if MOE is written to 0: OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit. See OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A).">
        <Enum name="B_0x0" start="0x0" description="In response to a break 2 event. OC and OCN outputs are disabled" />
        <Enum name="B_0x1" start="0x1" description="OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register)." />
      </BitField>
      <BitField start="16" size="4" name="BKF" description="Break filter This bit-field defines the frequency used to sample BRK input and the length of the digital filter applied to BRK. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="No filter, BRK acts asynchronously" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
      <BitField start="20" size="4" name="BK2F" description="Break 2 filter This bit-field defines the frequency used to sample BRK2 input and the length of the digital filter applied to BRK2. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="No filter, BRK2 acts asynchronously" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
      <BitField start="24" size="1" name="BK2E" description="Break 2 enable Note: The BRK2 must only be used with OSSR = OSSI = 1. Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK2 disabled" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK2 enabled" />
      </BitField>
      <BitField start="25" size="1" name="BK2P" description="Break 2 polarity Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK2 is active low" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK2 is active high" />
      </BitField>
      <BitField start="26" size="1" name="BKDSRM" description="Break Disarm This bit is cleared by hardware when no break source is active. The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared. Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK is armed" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK is disarmed" />
      </BitField>
      <BitField start="27" size="1" name="BK2DSRM" description="Break2 Disarm Refer to BKDSRM description" />
      <BitField start="28" size="1" name="BKBID" description="Break Bidirectional In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices. Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK in input mode" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK in bidirectional mode" />
      </BitField>
      <BitField start="29" size="1" name="BK2BID" description="Break2 bidirectional Refer to BKBID description" />
    </Register>
    <Register start="+0x48" size="0" name="TIM1_DCR" access="Read/Write" description="DMA control register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="5" name="DBA" description="DMA base address This 5-bits vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ...">
        <Enum name="B_0x0" start="0x0" description="TIMx_CR1," />
        <Enum name="B_0x1" start="0x1" description="TIMx_CR2," />
        <Enum name="B_0x2" start="0x2" description="TIMx_SMCR," />
      </BitField>
      <BitField start="8" size="5" name="DBL" description="DMA burst length This 5-bit vector defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below). ... Example: Let us consider the following transfer: DBL = 7 bytes &amp; DBA = TIMx_CR1. If DBL = 7 bytes and DBA = TIMx_CR1 represents the address of the byte to be transferred, the address of the transfer should be given by the following equation: (TIMx_CR1 address) + DBA + (DMA index), where DMA index = DBL In this example, 7 bytes are added to (TIMx_CR1 address) + DBA, which gives us the address from/to which the data is copied. In this case, the transfer is done to 7 registers starting from the following address: (TIMx_CR1 address) + DBA According to the configuration of the DMA Data Size, several cases may occur: If the DMA Data Size is configured in half-words, 16-bit data is transferred to each of the 7 registers. If the DMA Data Size is configured in bytes, the data is also transferred to 7 registers: the first register contains the first MSB byte, the second register, the first LSB byte and so on. So with the transfer Timer, one also has to specify the size of data transferred by DMA.">
        <Enum name="B_0x0" start="0x0" description="1 transfer" />
        <Enum name="B_0x1" start="0x1" description="2 transfers" />
        <Enum name="B_0x2" start="0x2" description="3 transfers" />
        <Enum name="B_0x11" start="0x11" description="18 transfers" />
      </BitField>
    </Register>
    <Register start="+0x4C" size="0" name="TIM1_DMAR" access="Read/Write" description="DMA address for full transfer" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="DMAB" description="DMA register for burst accesses A read or write operation to the DMAR register accesses the register located at the address (TIMx_CR1 address) + (DBA + DMA index) x 4 where TIMx_CR1 address is the address of the control register 1, DBA is the DMA base address configured in TIMx_DCR register, DMA index is automatically controlled by the DMA transfer, and ranges from 0 to DBL (DBL configured in TIMx_DCR)." />
    </Register>
    <Register start="+0x50" size="0" name="TIM1_OR1" access="Read/Write" description="option register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OCREF_CLR" description="Ocref_clr source selection This bit selects the ocref_clr input source.">
        <Enum name="B_0x0" start="0x0" description="COMP1 output is connected to the OCREF_CLR input" />
        <Enum name="B_0x1" start="0x1" description="COMP2 output is connected to the OCREF_CLR input" />
      </BitField>
    </Register>
    <Register start="+0x54" size="0" name="CCMR3_Output" access="Read/Write" description="capture/compare mode register 2 (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="2" size="1" name="OC5FE" description="Output compare 5 fast enable" />
      <BitField start="3" size="1" name="OC5PE" description="Output compare 5 preload enable" />
      <BitField start="4" size="3" name="OC5M" description="Output compare 5 mode" />
      <BitField start="7" size="1" name="OC5CE" description="Output compare 5 clear enable" />
      <BitField start="10" size="1" name="OC6FE" description="Output compare 6 fast enable" />
      <BitField start="11" size="1" name="OC6PE" description="Output compare 6 preload enable" />
      <BitField start="12" size="3" name="OC6M" description="Output compare 6 mode" />
      <BitField start="15" size="1" name="OC6CE" description="Output compare 6 clear enable" />
      <BitField start="16" size="1" name="OC5M_bit3" description="Output Compare 5 mode bit 3" />
      <BitField start="24" size="1" name="OC6M_bit3" description="Output Compare 6 mode bit 3" />
    </Register>
    <Register start="+0x58" size="0" name="TIM1_CCR5" access="Read/Write" description="capture/compare register 4" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR5" description="Capture/Compare 5 value CCR5 is the value to be loaded in the actual capture/compare 5 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR3 register (bit OC5PE). Else the preload value is copied in the active capture/compare 5 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on OC5 output." />
      <BitField start="29" size="1" name="GC5C1" description="Group Channel 5 and Channel 1 Distortion on Channel 1 output: This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR1). Note: it is also possible to apply this distortion on combined PWM signals.">
        <Enum name="B_0x0" start="0x0" description="No effect of OC5REF on OC1REFC5" />
        <Enum name="B_0x1" start="0x1" description="OC1REFC is the logical AND of OC1REFC and OC5REF" />
      </BitField>
      <BitField start="30" size="1" name="GC5C2" description="Group Channel 5 and Channel 2 Distortion on Channel 2 output: This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR1). Note: it is also possible to apply this distortion on combined PWM signals.">
        <Enum name="B_0x0" start="0x0" description="No effect of OC5REF on OC2REFC" />
        <Enum name="B_0x1" start="0x1" description="OC2REFC is the logical AND of OC2REFC and OC5REF" />
      </BitField>
      <BitField start="31" size="1" name="GC5C3" description="Group Channel 5 and Channel 3 Distortion on Channel 3 output: This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR2). Note: it is also possible to apply this distortion on combined PWM signals.">
        <Enum name="B_0x0" start="0x0" description="No effect of OC5REF on OC3REFC" />
        <Enum name="B_0x1" start="0x1" description="OC3REFC is the logical AND of OC3REFC and OC5REF" />
      </BitField>
    </Register>
    <Register start="+0x5C" size="0" name="TIM1_CCR6" access="Read/Write" description="capture/compare register 4" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR6" description="Capture/Compare value" />
    </Register>
    <Register start="+0x60" size="0" name="TIM1_AF1" access="Read/Write" description="DMA address for full transfer" reset_value="0x00000001" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BKINE" description="BRK BKIN input enable This bit enables the BKIN alternate function input for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. BKIN input is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="BKIN input disabled" />
        <Enum name="B_0x1" start="0x1" description="BKIN input enabled" />
      </BitField>
      <BitField start="1" size="1" name="BKCMP1E" description="BRK COMP1 enable This bit enables the COMP1 for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. COMP1 output is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP1 input disabled" />
        <Enum name="B_0x1" start="0x1" description="COMP1 input enabled" />
      </BitField>
      <BitField start="2" size="1" name="BKCMP2E" description="BRK COMP2 enable This bit enables the COMP2 for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. COMP2 output is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP2 input disabled" />
        <Enum name="B_0x1" start="0x1" description="COMP2 input enabled" />
      </BitField>
      <BitField start="9" size="1" name="BKINP" description="BRK BKIN input polarity This bit selects the BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="BKIN input polarity is not inverted (active low if BKP=0, active high if BKP=1)" />
        <Enum name="B_0x1" start="0x1" description="BKIN input polarity is inverted (active high if BKP=0, active low if BKP=1)" />
      </BitField>
      <BitField start="10" size="1" name="BKCMP1P" description="BRK COMP1 input polarity This bit selects the COMP1 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP1 input polarity is not inverted (active low if BKP=0, active high if BKP=1)" />
        <Enum name="B_0x1" start="0x1" description="COMP1 input polarity is inverted (active high if BKP=0, active low if BKP=1)" />
      </BitField>
      <BitField start="11" size="1" name="BKCMP2P" description="BRK COMP2 input polarity This bit selects the COMP2 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP2 input polarity is not inverted (active low if BKP=0, active high if BKP=1)" />
        <Enum name="B_0x1" start="0x1" description="COMP2 input polarity is inverted (active high if BKP=0, active low if BKP=1)" />
      </BitField>
      <BitField start="14" size="4" name="ETRSEL" description="ETR source selection These bits select the ETR input source. Others: Reserved Note: These bits can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="ETR legacy mode" />
        <Enum name="B_0x1" start="0x1" description="COMP1 output" />
        <Enum name="B_0x2" start="0x2" description="COMP2 output" />
        <Enum name="B_0x3" start="0x3" description="ADC1 AWD1" />
        <Enum name="B_0x4" start="0x4" description="ADC1 AWD2" />
        <Enum name="B_0x5" start="0x5" description="ADC1 AWD3" />
      </BitField>
    </Register>
    <Register start="+0x64" size="0" name="TIM1_AF2" access="Read/Write" description="DMA address for full transfer" reset_value="0x00000001" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BK2INE" description="BRK2 BKIN input enable This bit enables the BKIN2 alternate function input for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK2 input. BKIN2 input is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="BKIN2 input disabled" />
        <Enum name="B_0x1" start="0x1" description="BKIN2 input enabled" />
      </BitField>
      <BitField start="1" size="1" name="BK2CMP1E" description="BRK2 COMP1 enable This bit enables the COMP1 for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK2 input. COMP1 output is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP1 input disabled" />
        <Enum name="B_0x1" start="0x1" description="COMP1 input enabled" />
      </BitField>
      <BitField start="2" size="1" name="BK2CMP2E" description="BRK2 COMP2 enable This bit enables the COMP2 for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK2 input. COMP2 output is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP2 input disabled" />
        <Enum name="B_0x1" start="0x1" description="COMP2 input enabled" />
      </BitField>
      <BitField start="9" size="1" name="BK2INP" description="BRK2 BKIN2 input polarity This bit selects the BKIN2 alternate function input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="BKIN2 input polarity is not inverted (active low if BK2P=0, active high if BK2P=1)" />
        <Enum name="B_0x1" start="0x1" description="BKIN2 input polarity is inverted (active high if BK2P=0, active low if BK2P=1)" />
      </BitField>
      <BitField start="10" size="1" name="BK2CMP1P" description="BRK2 COMP1 input polarity This bit selects the COMP1 input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP1 input polarity is not inverted (active low if BK2P=0, active high if BK2P=1)" />
        <Enum name="B_0x1" start="0x1" description="COMP1 input polarity is inverted (active high if BK2P=0, active low if BK2P=1)" />
      </BitField>
      <BitField start="11" size="1" name="BK2CMP2P" description="BRK2 COMP2 input polarity This bit selects the COMP2 input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP2 input polarity is not inverted (active low if BK2P=0, active high if BK2P=1)" />
        <Enum name="B_0x1" start="0x1" description="COMP2 input polarity is inverted (active high if BK2P=0, active low if BK2P=1)" />
      </BitField>
    </Register>
    <Register start="+0x68" size="0" name="TIM1_TISEL" access="Read/Write" description="TIM1 timer input selection register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="TI1SEL" description="selects TI1[0] to TI1[15] input Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM1_CH1 input" />
        <Enum name="B_0x1" start="0x1" description="COMP1 output" />
      </BitField>
      <BitField start="8" size="4" name="TI2SEL" description="selects TI2[0] to TI2[15] input Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM1_CH2 input" />
        <Enum name="B_0x1" start="0x1" description="COMP2 output" />
      </BitField>
      <BitField start="16" size="4" name="TI3SEL" description="selects TI3[0] to TI3[15] input Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM1_CH3 input" />
      </BitField>
      <BitField start="24" size="4" name="TI4SEL" description="selects TI4[0] to TI4[15] input Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM1_CH4 input" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="TIM3" start="0x40000400" description="General-purpose-timers">
    <Register start="+0x0" size="0" name="CR1" access="Read/Write" description="control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CEN" description="Counter enable Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. CEN is cleared automatically in one-pulse mode, when an update event occurs.">
        <Enum name="B_0x0" start="0x0" description="Counter disabled" />
        <Enum name="B_0x1" start="0x1" description="Counter enabled" />
      </BitField>
      <BitField start="1" size="1" name="UDIS" description="Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.">
        <Enum name="B_0x0" start="0x0" description="UEV enabled. The Update (UEV) event is generated by one of the following events:" />
        <Enum name="B_0x1" start="0x1" description="UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller." />
      </BitField>
      <BitField start="2" size="1" name="URS" description="Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller">
        <Enum name="B_0x0" start="0x0" description="Any of the following events generate an update interrupt or DMA request if enabled. These events can be:" />
        <Enum name="B_0x1" start="0x1" description="Only counter overflow/underflow generates an update interrupt or DMA request if enabled." />
      </BitField>
      <BitField start="3" size="1" name="OPM" description="One-pulse mode">
        <Enum name="B_0x0" start="0x0" description="Counter is not stopped at update event" />
        <Enum name="B_0x1" start="0x1" description="Counter stops counting at the next update event (clearing the bit CEN)" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="Direction Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode.">
        <Enum name="B_0x0" start="0x0" description="Counter used as upcounter" />
        <Enum name="B_0x1" start="0x1" description="Counter used as downcounter" />
      </BitField>
      <BitField start="5" size="2" name="CMS" description="Center-aligned mode selection Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1)">
        <Enum name="B_0x0" start="0x0" description="Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR)." />
        <Enum name="B_0x1" start="0x1" description="Center-aligned mode 1. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down." />
        <Enum name="B_0x2" start="0x2" description="Center-aligned mode 2. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up." />
        <Enum name="B_0x3" start="0x3" description="Center-aligned mode 3. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down." />
      </BitField>
      <BitField start="7" size="1" name="ARPE" description="Auto-reload preload enable">
        <Enum name="B_0x0" start="0x0" description="TIMx_ARR register is not buffered" />
        <Enum name="B_0x1" start="0x1" description="TIMx_ARR register is buffered" />
      </BitField>
      <BitField start="8" size="2" name="CKD" description="Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and sampling clock used by the digital filters (ETR, TIx),">
        <Enum name="B_0x0" start="0x0" description="tDTS = tCK_INT" />
        <Enum name="B_0x1" start="0x1" description="tDTS = 2 &#xc3;&#x83;&#xc2;&#x97; tCK_INT" />
        <Enum name="B_0x2" start="0x2" description="tDTS = 4 &#xc3;&#x83;&#xc2;&#x97; tCK_INT" />
      </BitField>
      <BitField start="11" size="1" name="UIFREMAP" description="UIF status bit remapping">
        <Enum name="B_0x0" start="0x0" description="No remapping. UIF status bit is not copied to TIMx_CNT register bit 31." />
        <Enum name="B_0x1" start="0x1" description="Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="3" size="1" name="CCDS" description="Capture/compare DMA selection">
        <Enum name="B_0x0" start="0x0" description="CCx DMA request sent when CCx event occurs" />
        <Enum name="B_0x1" start="0x1" description="CCx DMA requests sent when update event occurs" />
      </BitField>
      <BitField start="4" size="3" name="MMS" description="Master mode selection These bits permit to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows: When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset." />
        <Enum name="B_0x1" start="0x1" description="Enable - the Counter enable signal, CNT_EN, is used as trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode." />
        <Enum name="B_0x2" start="0x2" description="Update - The update event is selected as trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer." />
        <Enum name="B_0x3" start="0x3" description="Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (TRGO)" />
        <Enum name="B_0x4" start="0x4" description="Compare - OC1REFC signal is used as trigger output (TRGO)" />
        <Enum name="B_0x5" start="0x5" description="Compare - OC2REFC signal is used as trigger output (TRGO)" />
        <Enum name="B_0x6" start="0x6" description="Compare - OC3REFC signal is used as trigger output (TRGO)" />
        <Enum name="B_0x7" start="0x7" description="Compare - OC4REFC signal is used as trigger output (TRGO)" />
      </BitField>
      <BitField start="7" size="1" name="TI1S" description="TI1 selection">
        <Enum name="B_0x0" start="0x0" description="The TIMx_CH1 pin is connected to TI1 input" />
        <Enum name="B_0x1" start="0x1" description="The TIMx_CH1, CH2 and CH3 pins are connected to the TI1 input (XOR combination) See also" />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="SMCR" access="Read/Write" description="slave mode control register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="SMS1" description="Slave mode selection When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description. reinitializes the counter, generates an update of the registers and starts the counter. Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled - if CEN = '1 then the prescaler is clocked directly by the internal clock." />
        <Enum name="B_0x1" start="0x1" description="Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level." />
        <Enum name="B_0x2" start="0x2" description="Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level." />
        <Enum name="B_0x3" start="0x3" description="Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input." />
        <Enum name="B_0x4" start="0x4" description="Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers." />
        <Enum name="B_0x5" start="0x5" description="Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled." />
        <Enum name="B_0x6" start="0x6" description="Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled." />
        <Enum name="B_0x7" start="0x7" description="External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter." />
        <Enum name="B_0x8" start="0x8" description="Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI)" />
      </BitField>
      <BitField start="3" size="1" name="OCCS" description="OCREF clear selection This bit is used to select the OCREF clear source">
        <Enum name="B_0x0" start="0x0" description="OCREF_CLR_INT is connected to COMP1 or COMP2 output depending on TIMx_OR1.OCREF_CLR" />
        <Enum name="B_0x1" start="0x1" description="OCREF_CLR_INT is connected to ETRF" />
      </BitField>
      <BitField start="4" size="3" name="TS1" description="Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for more details on ITRx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.">
        <Enum name="B_0x0" start="0x0" description="Internal Trigger 0 (ITR0)" />
        <Enum name="B_0x1" start="0x1" description="Internal Trigger 1 (ITR1)" />
        <Enum name="B_0x2" start="0x2" description="Internal Trigger 2 (ITR2)" />
        <Enum name="B_0x3" start="0x3" description="Internal Trigger 3 (ITR3)" />
        <Enum name="B_0x4" start="0x4" description="TI1 Edge Detector (TI1F_ED)" />
        <Enum name="B_0x5" start="0x5" description="Filtered Timer Input 1 (TI1FP1)" />
        <Enum name="B_0x6" start="0x6" description="Filtered Timer Input 2 (TI2FP2)" />
        <Enum name="B_0x7" start="0x7" description="External Trigger input (ETRF)" />
        <Enum name="B_0x8" start="0x8" description="Internal Trigger 4 (ITR4)" />
        <Enum name="B_0x9" start="0x9" description="Internal Trigger 5 (ITR5)" />
        <Enum name="B_0xA" start="0xA" description="Internal Trigger 6 (ITR6)" />
        <Enum name="B_0xB" start="0xB" description="Internal Trigger 7 (ITR7)" />
        <Enum name="B_0xC" start="0xC" description="Internal Trigger 8 (ITR8)" />
      </BitField>
      <BitField start="7" size="1" name="MSM" description="Master/Slave mode">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event." />
      </BitField>
      <BitField start="8" size="4" name="ETF" description="External trigger filter This bit-field then defines the frequency used to sample ETRP signal and the length of the digital filter applied to ETRP. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:">
        <Enum name="B_0x0" start="0x0" description="No filter, sampling is done at fDTS" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
      <BitField start="12" size="2" name="ETPS" description="External trigger prescaler External trigger signal ETRP frequency must be at most 1/4 of CK_INT frequency. A prescaler can be enabled to reduce ETRP frequency. It is useful when inputting fast external clocks.">
        <Enum name="B_0x0" start="0x0" description="Prescaler OFF" />
        <Enum name="B_0x1" start="0x1" description="ETRP frequency divided by 2" />
        <Enum name="B_0x2" start="0x2" description="ETRP frequency divided by 4" />
        <Enum name="B_0x3" start="0x3" description="ETRP frequency divided by 8" />
      </BitField>
      <BitField start="14" size="1" name="ECE" description="External clock enable This bit enables External clock mode 2. Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with TRGI connected to ETRF (SMS=111 and TS=00111). It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, TRGI must not be connected to ETRF in this case (TS bits must not be 00111). If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is ETRF.">
        <Enum name="B_0x0" start="0x0" description="External clock mode 2 disabled" />
        <Enum name="B_0x1" start="0x1" description="External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal." />
      </BitField>
      <BitField start="15" size="1" name="ETP" description="External trigger polarity This bit selects whether ETR or ETR is used for trigger operations">
        <Enum name="B_0x0" start="0x0" description="ETR is non-inverted, active at high level or rising edge" />
        <Enum name="B_0x1" start="0x1" description="ETR is inverted, active at low level or falling edge" />
      </BitField>
      <BitField start="16" size="1" name="SMS2" description="Slave mode selection When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description. reinitializes the counter, generates an update of the registers and starts the counter. Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled - if CEN = '1 then the prescaler is clocked directly by the internal clock." />
        <Enum name="B_0x1" start="0x1" description="Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level." />
        <Enum name="B_0x2" start="0x2" description="Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level." />
        <Enum name="B_0x3" start="0x3" description="Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input." />
        <Enum name="B_0x4" start="0x4" description="Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers." />
        <Enum name="B_0x5" start="0x5" description="Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled." />
        <Enum name="B_0x6" start="0x6" description="Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled." />
        <Enum name="B_0x7" start="0x7" description="External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter." />
        <Enum name="B_0x8" start="0x8" description="Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI)" />
      </BitField>
      <BitField start="20" size="2" name="TS2" description="Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for more details on ITRx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.">
        <Enum name="B_0x0" start="0x0" description="Internal Trigger 0 (ITR0)" />
        <Enum name="B_0x1" start="0x1" description="Internal Trigger 1 (ITR1)" />
        <Enum name="B_0x2" start="0x2" description="Internal Trigger 2 (ITR2)" />
        <Enum name="B_0x3" start="0x3" description="Internal Trigger 3 (ITR3)" />
        <Enum name="B_0x4" start="0x4" description="TI1 Edge Detector (TI1F_ED)" />
        <Enum name="B_0x5" start="0x5" description="Filtered Timer Input 1 (TI1FP1)" />
        <Enum name="B_0x6" start="0x6" description="Filtered Timer Input 2 (TI2FP2)" />
        <Enum name="B_0x7" start="0x7" description="External Trigger input (ETRF)" />
        <Enum name="B_0x8" start="0x8" description="Internal Trigger 4 (ITR4)" />
        <Enum name="B_0x9" start="0x9" description="Internal Trigger 5 (ITR5)" />
        <Enum name="B_0xA" start="0xA" description="Internal Trigger 6 (ITR6)" />
        <Enum name="B_0xB" start="0xB" description="Internal Trigger 7 (ITR7)" />
        <Enum name="B_0xC" start="0xC" description="Internal Trigger 8 (ITR8)" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DIER" access="Read/Write" description="DMA/Interrupt enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIE" description="Update interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Update interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt enabled." />
      </BitField>
      <BitField start="1" size="1" name="CC1IE" description="Capture/Compare 1 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC1 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="CC1 interrupt enabled." />
      </BitField>
      <BitField start="2" size="1" name="CC2IE" description="Capture/Compare 2 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC2 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="CC2 interrupt enabled." />
      </BitField>
      <BitField start="3" size="1" name="CC3IE" description="Capture/Compare 3 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC3 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="CC3 interrupt enabled." />
      </BitField>
      <BitField start="4" size="1" name="CC4IE" description="Capture/Compare 4 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC4 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="CC4 interrupt enabled." />
      </BitField>
      <BitField start="6" size="1" name="TIE" description="Trigger interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Trigger interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Trigger interrupt enabled." />
      </BitField>
      <BitField start="8" size="1" name="UDE" description="Update DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Update DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="Update DMA request enabled." />
      </BitField>
      <BitField start="9" size="1" name="CC1DE" description="Capture/Compare 1 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC1 DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="CC1 DMA request enabled." />
      </BitField>
      <BitField start="10" size="1" name="CC2DE" description="Capture/Compare 2 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC2 DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="CC2 DMA request enabled." />
      </BitField>
      <BitField start="11" size="1" name="CC3DE" description="Capture/Compare 3 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC3 DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="CC3 DMA request enabled." />
      </BitField>
      <BitField start="12" size="1" name="CC4DE" description="Capture/Compare 4 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC4 DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="CC4 DMA request enabled." />
      </BitField>
      <BitField start="14" size="1" name="TDE" description="Trigger DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Trigger DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="Trigger DMA request enabled." />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="SR" access="Read/Write" description="status register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIF" description="Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow or underflow and if UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer to the synchro control register description), if URS=0 and UDIS=0 in the TIMx_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No update occurred" />
        <Enum name="B_0x1" start="0x1" description="Update interrupt pending. This bit is set by hardware when the registers are updated:" />
      </BitField>
      <BitField start="1" size="1" name="CC1IF" description="Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="No compare match / No input capture occurred" />
        <Enum name="B_0x1" start="0x1" description="A compare match or an input capture occurred" />
      </BitField>
      <BitField start="2" size="1" name="CC2IF" description="Capture/Compare 2 interrupt flag Refer to CC1IF description" />
      <BitField start="3" size="1" name="CC3IF" description="Capture/Compare 3 interrupt flag Refer to CC1IF description" />
      <BitField start="4" size="1" name="CC4IF" description="Capture/Compare 4 interrupt flag Refer to CC1IF description" />
      <BitField start="6" size="1" name="TIF" description="Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on TRGI input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software.">
        <Enum name="B_0x0" start="0x0" description="No trigger event occurred." />
        <Enum name="B_0x1" start="0x1" description="Trigger interrupt pending." />
      </BitField>
      <BitField start="9" size="1" name="CC1OF" description="Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;.">
        <Enum name="B_0x0" start="0x0" description="No overcapture has been detected." />
        <Enum name="B_0x1" start="0x1" description="The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set" />
      </BitField>
      <BitField start="10" size="1" name="CC2OF" description="Capture/compare 2 overcapture flag refer to CC1OF description" />
      <BitField start="11" size="1" name="CC3OF" description="Capture/Compare 3 overcapture flag refer to CC1OF description" />
      <BitField start="12" size="1" name="CC4OF" description="Capture/Compare 4 overcapture flag refer to CC1OF description" />
    </Register>
    <Register start="+0x14" size="0" name="EGR" access="WriteOnly" description="event generation register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UG" description="Update generation This bit can be set by software, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting)." />
      </BitField>
      <BitField start="1" size="1" name="CC1G" description="Capture/compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="A capture/compare event is generated on channel 1:" />
      </BitField>
      <BitField start="2" size="1" name="CC2G" description="Capture/compare 2 generation Refer to CC1G description" />
      <BitField start="3" size="1" name="CC3G" description="Capture/compare 3 generation Refer to CC1G description" />
      <BitField start="4" size="1" name="CC4G" description="Capture/compare 4 generation Refer to CC1G description" />
      <BitField start="6" size="1" name="TG" description="Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Output" access="Read/Write" description="capture/compare mode register 1 (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1" />
        <Enum name="B_0x2" start="0x2" description="CC1 channel is configured as input, IC1 is mapped on TI2" />
        <Enum name="B_0x3" start="0x3" description="CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="2" size="1" name="OC1FE" description="Output compare 1 fast enable" />
      <BitField start="3" size="1" name="OC1PE" description="Output compare 1 preload enable Note: The PWM mode can be used without validating the preload register only in one-pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.">
        <Enum name="B_0x0" start="0x0" description="Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately." />
        <Enum name="B_0x1" start="0x1" description="Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event." />
      </BitField>
      <BitField start="4" size="3" name="OC1M1" description="Output compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;frozen&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode to &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;PWM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode. Note: The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base)." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (OC1REF='0) as long as TIMx_CNT&gt;TIMx_CCR1 else active (OC1REF=1)." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT&gt;TIMx_CCR1 else inactive." />
        <Enum name="B_0x8" start="0x8" description="Retriggerable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update." />
        <Enum name="B_0x9" start="0x9" description="Retriggerable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update." />
        <Enum name="B_0xC" start="0xC" description="Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF." />
        <Enum name="B_0xD" start="0xD" description="Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF." />
        <Enum name="B_0xE" start="0xE" description="Asymmetric PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down." />
        <Enum name="B_0xF" start="0xF" description="Asymmetric PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down." />
      </BitField>
      <BitField start="7" size="1" name="OC1CE" description="Output compare 1 clear enable">
        <Enum name="B_0x0" start="0x0" description="OC1Ref is not affected by the ETRF input" />
        <Enum name="B_0x1" start="0x1" description="OC1Ref is cleared as soon as a High level is detected on ETRF input" />
      </BitField>
      <BitField start="8" size="2" name="CC2S" description="Capture/compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC2 channel is configured as output." />
        <Enum name="B_0x1" start="0x1" description="CC2 channel is configured as input, IC2 is mapped on TI2." />
        <Enum name="B_0x2" start="0x2" description="CC2 channel is configured as input, IC2 is mapped on TI1." />
        <Enum name="B_0x3" start="0x3" description="CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="10" size="1" name="OC2FE" description="Output compare 2 fast enable" />
      <BitField start="11" size="1" name="OC2PE" description="Output compare 2 preload enable" />
      <BitField start="12" size="3" name="OC2M" description="Output compare 2 mode" />
      <BitField start="15" size="1" name="OC2CE" description="Output compare 2 clear enable" />
      <BitField start="16" size="1" name="OC1M_3" description="Output Compare 1 mode - bit 3" />
      <BitField start="24" size="1" name="OC2M_3" description="Output Compare 2 mode - bit 3" />
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Input" access="Read/Write" description="capture/compare mode register 1 (input mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 selection" />
      <BitField start="2" size="2" name="IC1PSC" description="Input capture 1 prescaler" />
      <BitField start="4" size="4" name="IC1F" description="Input capture 1 filter" />
      <BitField start="8" size="2" name="CC2S" description="Capture/compare 2 selection" />
      <BitField start="10" size="2" name="IC2PSC" description="Input capture 2 prescaler" />
      <BitField start="12" size="4" name="IC2F" description="Input capture 2 filter" />
    </Register>
    <Register start="+0x1C" size="0" name="CCMR2_Output" access="Read/Write" description="capture/compare mode register 2 (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC3S" description="Capture/Compare 3 selection" />
      <BitField start="2" size="1" name="OC3FE" description="Output compare 3 fast enable" />
      <BitField start="3" size="1" name="OC3PE" description="Output compare 3 preload enable" />
      <BitField start="4" size="3" name="OC3M" description="Output compare 3 mode" />
      <BitField start="7" size="1" name="OC3CE" description="Output compare 3 clear enable" />
      <BitField start="8" size="2" name="CC4S" description="Capture/Compare 4 selection" />
      <BitField start="10" size="1" name="OC4FE" description="Output compare 4 fast enable" />
      <BitField start="11" size="1" name="OC4PE" description="Output compare 4 preload enable" />
      <BitField start="12" size="3" name="OC4M" description="Output compare 4 mode" />
      <BitField start="15" size="1" name="OC4CE" description="Output compare 4 clear enable" />
      <BitField start="16" size="1" name="OC3M_3" description="Output Compare 3 mode - bit 3" />
      <BitField start="24" size="1" name="OC4M_3" description="Output Compare 4 mode - bit 3" />
    </Register>
    <Register start="+0x1C" size="0" name="CCMR2_Input" access="Read/Write" description="capture/compare mode register 2 (input mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC3S" description="Capture/Compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = 0 in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC3 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC3 channel is configured as input, IC3 is mapped on TI3" />
        <Enum name="B_0x2" start="0x2" description="CC3 channel is configured as input, IC3 is mapped on TI4" />
        <Enum name="B_0x3" start="0x3" description="CC3 channel is configured as input, IC3 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="2" size="2" name="IC3PSC" description="Input capture 3 prescaler" />
      <BitField start="4" size="4" name="IC3F" description="Input capture 3 filter" />
      <BitField start="8" size="2" name="CC4S" description="Capture/Compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = 0 in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC4 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC4 channel is configured as input, IC4 is mapped on TI4" />
        <Enum name="B_0x2" start="0x2" description="CC4 channel is configured as input, IC4 is mapped on TI3" />
        <Enum name="B_0x3" start="0x3" description="CC4 channel is configured as input, IC4 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="10" size="2" name="IC4PSC" description="Input capture 4 prescaler" />
      <BitField start="12" size="4" name="IC4F" description="Input capture 4 filter" />
    </Register>
    <Register start="+0x20" size="0" name="CCER" access="Read/Write" description="capture/compare enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CC1E" description="Capture/Compare 1 output enable.">
        <Enum name="B_0x0" start="0x0" description="Capture mode disabled / OC1 is not active" />
        <Enum name="B_0x1" start="0x1" description="Capture mode enabled / OC1 signal is output on the corresponding output pin" />
      </BitField>
      <BitField start="1" size="1" name="CC1P" description="Capture/Compare 1 output Polarity. When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0: non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1: inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1: non-inverted/both edges. The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0: This configuration is reserved, it must not be used.">
        <Enum name="B_0x0" start="0x0" description="OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)" />
        <Enum name="B_0x1" start="0x1" description="OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)" />
      </BitField>
      <BitField start="3" size="1" name="CC1NP" description="Capture/Compare 1 output Polarity. CC1 channel configured as output: CC1NP must be kept cleared in this case. CC1 channel configured as input: This bit is used in conjunction with CC1P to define TI1FP1/TI2FP1 polarity. refer to CC1P description." />
      <BitField start="4" size="1" name="CC2E" description="Capture/Compare 2 output enable. Refer to CC1E description" />
      <BitField start="5" size="1" name="CC2P" description="Capture/Compare 2 output Polarity. refer to CC1P description" />
      <BitField start="7" size="1" name="CC2NP" description="Capture/Compare 2 output Polarity. Refer to CC1NP description" />
      <BitField start="8" size="1" name="CC3E" description="Capture/Compare 3 output enable. Refer to CC1E description" />
      <BitField start="9" size="1" name="CC3P" description="Capture/Compare 3 output Polarity. Refer to CC1P description" />
      <BitField start="11" size="1" name="CC3NP" description="Capture/Compare 3 output Polarity. Refer to CC1NP description" />
      <BitField start="12" size="1" name="CC4E" description="Capture/Compare 4 output enable. refer to CC1E description" />
      <BitField start="13" size="1" name="CC4P" description="Capture/Compare 4 output Polarity. Refer to CC1P description" />
      <BitField start="15" size="1" name="CC4NP" description="Capture/Compare 4 output Polarity. Refer to CC1NP description" />
    </Register>
    <Register start="+0x24" size="0" name="CNT" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CNT_L" description="Low counter value" />
      <BitField start="16" size="16" name="CNT_H" description="High counter value (TIM2 only)" />
    </Register>
    <Register start="+0x24" size="0" name="CNT_ALTERNATE5" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="31" name="CNT" description="Most significant part counter value (TIM2) nullLeast significant part of counter value" />
      <BitField start="31" size="1" name="UIFCPY" description="UIF Copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register" />
    </Register>
    <Register start="+0x28" size="0" name="PSC" access="Read/Write" description="prescaler" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="PSC" description="Prescaler value" />
    </Register>
    <Register start="+0x2C" size="0" name="ARR" access="Read/Write" description="auto-reload register" reset_value="0xFFFFFFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="ARR" description="High auto-reload value (TIM2) nullLow Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null." />
    </Register>
    <Register start="+0x34" size="0" name="CCR1" access="Read/Write" description="capture/compare register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="CCR1" description="High Capture/Compare 1 value (TIM2) nullLow Capture/Compare 1 value If channel CC1 is configured as output: CCR1 is the value to be loaded in the actual capture/compare 1 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on OC1 output. If channel CC1is configured as input: CCR1 is the counter value transferred by the last input capture 1 event (IC1). The TIMx_CCR1 register is read-only and cannot be programmed." />
    </Register>
    <Register start="+0x38" size="0" name="CCR2" access="Read/Write" description="capture/compare register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="CCR2" description="High Capture/Compare 2 value (TIM2) nullLow Capture/Compare 2 value If channel CC2 is configured as output: CCR2 is the value to be loaded in the actual capture/compare 2 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC2PE). Else the preload value is copied in the active capture/compare 2 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC2 output. If channel CC2 is configured as input: CCR2 is the counter value transferred by the last input capture 2 event (IC2). The TIMx_CCR2 register is read-only and cannot be programmed." />
    </Register>
    <Register start="+0x3C" size="0" name="CCR3" access="Read/Write" description="capture/compare register 3" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="CCR3" description="High Capture/Compare 3 value (TIM2) nullLow Capture/Compare value If channel CC3 is configured as output: CCR3 is the value to be loaded in the actual capture/compare 3 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC3PE). Else the preload value is copied in the active capture/compare 3 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC3 output. If channel CC3is configured as input: CCR3 is the counter value transferred by the last input capture 3 event (IC3). The TIMx_CCR3 register is read-only and cannot be programmed." />
    </Register>
    <Register start="+0x40" size="0" name="CCR4" access="Read/Write" description="capture/compare register 4" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="CCR4" description="High Capture/Compare 4 value (TIM2) nullLow Capture/Compare value if CC4 channel is configured as output (CC4S bits): CCR4 is the value to be loaded in the actual capture/compare 4 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC4PE). Else the preload value is copied in the active capture/compare 4 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC4 output. if CC4 channel is configured as input (CC4S bits in TIMx_CCMR4 register): CCR4 is the counter value transferred by the last input capture 4 event (IC4). The TIMx_CCR4 register is read-only and cannot be programmed." />
    </Register>
    <Register start="+0x48" size="0" name="DCR" access="Read/Write" description="DMA control register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="5" name="DBA" description="DMA base address This 5-bit vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ... Example: Let us consider the following transfer: DBL = 7 transfers &amp; DBA = TIMx_CR1. In this case the transfer is done to/from 7 registers starting from the TIMx_CR1 address.">
        <Enum name="B_0x0" start="0x0" description="TIMx_CR1" />
        <Enum name="B_0x1" start="0x1" description="TIMx_CR2" />
        <Enum name="B_0x2" start="0x2" description="TIMx_SMCR" />
      </BitField>
      <BitField start="8" size="5" name="DBL" description="DMA burst length This 5-bit vector defines the number of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address). ...">
        <Enum name="B_0x0" start="0x0" description="1 transfer," />
        <Enum name="B_0x1" start="0x1" description="2 transfers," />
        <Enum name="B_0x2" start="0x2" description="3 transfers," />
        <Enum name="B_0x11" start="0x11" description="18 transfers." />
      </BitField>
    </Register>
    <Register start="+0x4C" size="0" name="DMAR" access="Read/Write" description="DMA address for full transfer" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="DMAB" description="DMA register for burst accesses" />
    </Register>
    <Register start="+0x50" size="0" name="OR1" access="Read/Write" description="TIM option register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OCREF_CLR" description="Ocref_clr source selection This bit selects the ocref_clr input source.">
        <Enum name="B_0x0" start="0x0" description="COMP1 output is connected to the OCREF_CLR input" />
        <Enum name="B_0x1" start="0x1" description="COMP2 output is connected to the OCREF_CLR input" />
      </BitField>
    </Register>
    <Register start="+0x60" size="0" name="AF1" access="Read/Write" description="TIM alternate function option register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="14" size="4" name="ETRSEL" description="ETR source selection These bits select the ETR input source. Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="ETR legacy mode" />
        <Enum name="B_0x1" start="0x1" description="COMP1" />
        <Enum name="B_0x2" start="0x2" description="COMP2" />
        <Enum name="B_0x3" start="0x3" description="LSE" />
      </BitField>
    </Register>
    <Register start="+0x68" size="0" name="TISEL" access="Read/Write" description="TIM alternate function option register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="TI1SEL" description="TI1[0] to TI1[15] input selection These bits select the TI1[0] to TI1[15] input source. Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM2_CH1 input" />
        <Enum name="B_0x1" start="0x1" description="COMP1 output" />
      </BitField>
      <BitField start="8" size="4" name="TI2SEL" description="TI2[0] to TI2[15] input selection These bits select the TI2[0] to TI2[15] input source. Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM2_CH2 input" />
        <Enum name="B_0x1" start="0x1" description="COMP2 output" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="TIM4" start="0x40000800" description="General-purpose-timers">
    <Register start="+0x0" size="0" name="CR1" access="Read/Write" description="control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CEN" description="Counter enable Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. CEN is cleared automatically in one-pulse mode, when an update event occurs.">
        <Enum name="B_0x0" start="0x0" description="Counter disabled" />
        <Enum name="B_0x1" start="0x1" description="Counter enabled" />
      </BitField>
      <BitField start="1" size="1" name="UDIS" description="Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.">
        <Enum name="B_0x0" start="0x0" description="UEV enabled. The Update (UEV) event is generated by one of the following events:" />
        <Enum name="B_0x1" start="0x1" description="UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller." />
      </BitField>
      <BitField start="2" size="1" name="URS" description="Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller">
        <Enum name="B_0x0" start="0x0" description="Any of the following events generate an update interrupt or DMA request if enabled. These events can be:" />
        <Enum name="B_0x1" start="0x1" description="Only counter overflow/underflow generates an update interrupt or DMA request if enabled." />
      </BitField>
      <BitField start="3" size="1" name="OPM" description="One-pulse mode">
        <Enum name="B_0x0" start="0x0" description="Counter is not stopped at update event" />
        <Enum name="B_0x1" start="0x1" description="Counter stops counting at the next update event (clearing the bit CEN)" />
      </BitField>
      <BitField start="4" size="1" name="DIR" description="Direction Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode.">
        <Enum name="B_0x0" start="0x0" description="Counter used as upcounter" />
        <Enum name="B_0x1" start="0x1" description="Counter used as downcounter" />
      </BitField>
      <BitField start="5" size="2" name="CMS" description="Center-aligned mode selection Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1)">
        <Enum name="B_0x0" start="0x0" description="Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR)." />
        <Enum name="B_0x1" start="0x1" description="Center-aligned mode 1. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down." />
        <Enum name="B_0x2" start="0x2" description="Center-aligned mode 2. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up." />
        <Enum name="B_0x3" start="0x3" description="Center-aligned mode 3. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down." />
      </BitField>
      <BitField start="7" size="1" name="ARPE" description="Auto-reload preload enable">
        <Enum name="B_0x0" start="0x0" description="TIMx_ARR register is not buffered" />
        <Enum name="B_0x1" start="0x1" description="TIMx_ARR register is buffered" />
      </BitField>
      <BitField start="8" size="2" name="CKD" description="Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and sampling clock used by the digital filters (ETR, TIx),">
        <Enum name="B_0x0" start="0x0" description="tDTS = tCK_INT" />
        <Enum name="B_0x1" start="0x1" description="tDTS = 2 &#xc3;&#x83;&#xc2;&#x97; tCK_INT" />
        <Enum name="B_0x2" start="0x2" description="tDTS = 4 &#xc3;&#x83;&#xc2;&#x97; tCK_INT" />
      </BitField>
      <BitField start="11" size="1" name="UIFREMAP" description="UIF status bit remapping">
        <Enum name="B_0x0" start="0x0" description="No remapping. UIF status bit is not copied to TIMx_CNT register bit 31." />
        <Enum name="B_0x1" start="0x1" description="Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="3" size="1" name="CCDS" description="Capture/compare DMA selection">
        <Enum name="B_0x0" start="0x0" description="CCx DMA request sent when CCx event occurs" />
        <Enum name="B_0x1" start="0x1" description="CCx DMA requests sent when update event occurs" />
      </BitField>
      <BitField start="4" size="3" name="MMS" description="Master mode selection These bits permit to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows: When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset." />
        <Enum name="B_0x1" start="0x1" description="Enable - the Counter enable signal, CNT_EN, is used as trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode." />
        <Enum name="B_0x2" start="0x2" description="Update - The update event is selected as trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer." />
        <Enum name="B_0x3" start="0x3" description="Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (TRGO)" />
        <Enum name="B_0x4" start="0x4" description="Compare - OC1REFC signal is used as trigger output (TRGO)" />
        <Enum name="B_0x5" start="0x5" description="Compare - OC2REFC signal is used as trigger output (TRGO)" />
        <Enum name="B_0x6" start="0x6" description="Compare - OC3REFC signal is used as trigger output (TRGO)" />
        <Enum name="B_0x7" start="0x7" description="Compare - OC4REFC signal is used as trigger output (TRGO)" />
      </BitField>
      <BitField start="7" size="1" name="TI1S" description="TI1 selection">
        <Enum name="B_0x0" start="0x0" description="The TIMx_CH1 pin is connected to TI1 input" />
        <Enum name="B_0x1" start="0x1" description="The TIMx_CH1, CH2 and CH3 pins are connected to the TI1 input (XOR combination) See also" />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="SMCR" access="Read/Write" description="slave mode control register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="SMS1" description="Slave mode selection When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description. reinitializes the counter, generates an update of the registers and starts the counter. Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled - if CEN = '1 then the prescaler is clocked directly by the internal clock." />
        <Enum name="B_0x1" start="0x1" description="Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level." />
        <Enum name="B_0x2" start="0x2" description="Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level." />
        <Enum name="B_0x3" start="0x3" description="Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input." />
        <Enum name="B_0x4" start="0x4" description="Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers." />
        <Enum name="B_0x5" start="0x5" description="Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled." />
        <Enum name="B_0x6" start="0x6" description="Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled." />
        <Enum name="B_0x7" start="0x7" description="External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter." />
        <Enum name="B_0x8" start="0x8" description="Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI)" />
      </BitField>
      <BitField start="3" size="1" name="OCCS" description="OCREF clear selection This bit is used to select the OCREF clear source">
        <Enum name="B_0x0" start="0x0" description="OCREF_CLR_INT is connected to COMP1 or COMP2 output depending on TIMx_OR1.OCREF_CLR" />
        <Enum name="B_0x1" start="0x1" description="OCREF_CLR_INT is connected to ETRF" />
      </BitField>
      <BitField start="4" size="3" name="TS1" description="Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for more details on ITRx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.">
        <Enum name="B_0x0" start="0x0" description="Internal Trigger 0 (ITR0)" />
        <Enum name="B_0x1" start="0x1" description="Internal Trigger 1 (ITR1)" />
        <Enum name="B_0x2" start="0x2" description="Internal Trigger 2 (ITR2)" />
        <Enum name="B_0x3" start="0x3" description="Internal Trigger 3 (ITR3)" />
        <Enum name="B_0x4" start="0x4" description="TI1 Edge Detector (TI1F_ED)" />
        <Enum name="B_0x5" start="0x5" description="Filtered Timer Input 1 (TI1FP1)" />
        <Enum name="B_0x6" start="0x6" description="Filtered Timer Input 2 (TI2FP2)" />
        <Enum name="B_0x7" start="0x7" description="External Trigger input (ETRF)" />
        <Enum name="B_0x8" start="0x8" description="Internal Trigger 4 (ITR4)" />
        <Enum name="B_0x9" start="0x9" description="Internal Trigger 5 (ITR5)" />
        <Enum name="B_0xA" start="0xA" description="Internal Trigger 6 (ITR6)" />
        <Enum name="B_0xB" start="0xB" description="Internal Trigger 7 (ITR7)" />
        <Enum name="B_0xC" start="0xC" description="Internal Trigger 8 (ITR8)" />
      </BitField>
      <BitField start="7" size="1" name="MSM" description="Master/Slave mode">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event." />
      </BitField>
      <BitField start="8" size="4" name="ETF" description="External trigger filter This bit-field then defines the frequency used to sample ETRP signal and the length of the digital filter applied to ETRP. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:">
        <Enum name="B_0x0" start="0x0" description="No filter, sampling is done at fDTS" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
      <BitField start="12" size="2" name="ETPS" description="External trigger prescaler External trigger signal ETRP frequency must be at most 1/4 of CK_INT frequency. A prescaler can be enabled to reduce ETRP frequency. It is useful when inputting fast external clocks.">
        <Enum name="B_0x0" start="0x0" description="Prescaler OFF" />
        <Enum name="B_0x1" start="0x1" description="ETRP frequency divided by 2" />
        <Enum name="B_0x2" start="0x2" description="ETRP frequency divided by 4" />
        <Enum name="B_0x3" start="0x3" description="ETRP frequency divided by 8" />
      </BitField>
      <BitField start="14" size="1" name="ECE" description="External clock enable This bit enables External clock mode 2. Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with TRGI connected to ETRF (SMS=111 and TS=00111). It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, TRGI must not be connected to ETRF in this case (TS bits must not be 00111). If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is ETRF.">
        <Enum name="B_0x0" start="0x0" description="External clock mode 2 disabled" />
        <Enum name="B_0x1" start="0x1" description="External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal." />
      </BitField>
      <BitField start="15" size="1" name="ETP" description="External trigger polarity This bit selects whether ETR or ETR is used for trigger operations">
        <Enum name="B_0x0" start="0x0" description="ETR is non-inverted, active at high level or rising edge" />
        <Enum name="B_0x1" start="0x1" description="ETR is inverted, active at low level or falling edge" />
      </BitField>
      <BitField start="16" size="1" name="SMS2" description="Slave mode selection When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description. reinitializes the counter, generates an update of the registers and starts the counter. Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled - if CEN = '1 then the prescaler is clocked directly by the internal clock." />
        <Enum name="B_0x1" start="0x1" description="Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level." />
        <Enum name="B_0x2" start="0x2" description="Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level." />
        <Enum name="B_0x3" start="0x3" description="Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input." />
        <Enum name="B_0x4" start="0x4" description="Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers." />
        <Enum name="B_0x5" start="0x5" description="Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled." />
        <Enum name="B_0x6" start="0x6" description="Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled." />
        <Enum name="B_0x7" start="0x7" description="External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter." />
        <Enum name="B_0x8" start="0x8" description="Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI)" />
      </BitField>
      <BitField start="20" size="2" name="TS2" description="Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for more details on ITRx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.">
        <Enum name="B_0x0" start="0x0" description="Internal Trigger 0 (ITR0)" />
        <Enum name="B_0x1" start="0x1" description="Internal Trigger 1 (ITR1)" />
        <Enum name="B_0x2" start="0x2" description="Internal Trigger 2 (ITR2)" />
        <Enum name="B_0x3" start="0x3" description="Internal Trigger 3 (ITR3)" />
        <Enum name="B_0x4" start="0x4" description="TI1 Edge Detector (TI1F_ED)" />
        <Enum name="B_0x5" start="0x5" description="Filtered Timer Input 1 (TI1FP1)" />
        <Enum name="B_0x6" start="0x6" description="Filtered Timer Input 2 (TI2FP2)" />
        <Enum name="B_0x7" start="0x7" description="External Trigger input (ETRF)" />
        <Enum name="B_0x8" start="0x8" description="Internal Trigger 4 (ITR4)" />
        <Enum name="B_0x9" start="0x9" description="Internal Trigger 5 (ITR5)" />
        <Enum name="B_0xA" start="0xA" description="Internal Trigger 6 (ITR6)" />
        <Enum name="B_0xB" start="0xB" description="Internal Trigger 7 (ITR7)" />
        <Enum name="B_0xC" start="0xC" description="Internal Trigger 8 (ITR8)" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DIER" access="Read/Write" description="DMA/Interrupt enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIE" description="Update interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Update interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt enabled." />
      </BitField>
      <BitField start="1" size="1" name="CC1IE" description="Capture/Compare 1 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC1 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="CC1 interrupt enabled." />
      </BitField>
      <BitField start="2" size="1" name="CC2IE" description="Capture/Compare 2 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC2 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="CC2 interrupt enabled." />
      </BitField>
      <BitField start="3" size="1" name="CC3IE" description="Capture/Compare 3 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC3 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="CC3 interrupt enabled." />
      </BitField>
      <BitField start="4" size="1" name="CC4IE" description="Capture/Compare 4 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC4 interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="CC4 interrupt enabled." />
      </BitField>
      <BitField start="6" size="1" name="TIE" description="Trigger interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Trigger interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Trigger interrupt enabled." />
      </BitField>
      <BitField start="8" size="1" name="UDE" description="Update DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Update DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="Update DMA request enabled." />
      </BitField>
      <BitField start="9" size="1" name="CC1DE" description="Capture/Compare 1 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC1 DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="CC1 DMA request enabled." />
      </BitField>
      <BitField start="10" size="1" name="CC2DE" description="Capture/Compare 2 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC2 DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="CC2 DMA request enabled." />
      </BitField>
      <BitField start="11" size="1" name="CC3DE" description="Capture/Compare 3 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC3 DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="CC3 DMA request enabled." />
      </BitField>
      <BitField start="12" size="1" name="CC4DE" description="Capture/Compare 4 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC4 DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="CC4 DMA request enabled." />
      </BitField>
      <BitField start="14" size="1" name="TDE" description="Trigger DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Trigger DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="Trigger DMA request enabled." />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="SR" access="Read/Write" description="status register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIF" description="Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow or underflow and if UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer to the synchro control register description), if URS=0 and UDIS=0 in the TIMx_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No update occurred" />
        <Enum name="B_0x1" start="0x1" description="Update interrupt pending. This bit is set by hardware when the registers are updated:" />
      </BitField>
      <BitField start="1" size="1" name="CC1IF" description="Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="No compare match / No input capture occurred" />
        <Enum name="B_0x1" start="0x1" description="A compare match or an input capture occurred" />
      </BitField>
      <BitField start="2" size="1" name="CC2IF" description="Capture/Compare 2 interrupt flag Refer to CC1IF description" />
      <BitField start="3" size="1" name="CC3IF" description="Capture/Compare 3 interrupt flag Refer to CC1IF description" />
      <BitField start="4" size="1" name="CC4IF" description="Capture/Compare 4 interrupt flag Refer to CC1IF description" />
      <BitField start="6" size="1" name="TIF" description="Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on TRGI input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software.">
        <Enum name="B_0x0" start="0x0" description="No trigger event occurred." />
        <Enum name="B_0x1" start="0x1" description="Trigger interrupt pending." />
      </BitField>
      <BitField start="9" size="1" name="CC1OF" description="Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;.">
        <Enum name="B_0x0" start="0x0" description="No overcapture has been detected." />
        <Enum name="B_0x1" start="0x1" description="The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set" />
      </BitField>
      <BitField start="10" size="1" name="CC2OF" description="Capture/compare 2 overcapture flag refer to CC1OF description" />
      <BitField start="11" size="1" name="CC3OF" description="Capture/Compare 3 overcapture flag refer to CC1OF description" />
      <BitField start="12" size="1" name="CC4OF" description="Capture/Compare 4 overcapture flag refer to CC1OF description" />
    </Register>
    <Register start="+0x14" size="0" name="EGR" access="WriteOnly" description="event generation register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UG" description="Update generation This bit can be set by software, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting)." />
      </BitField>
      <BitField start="1" size="1" name="CC1G" description="Capture/compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="A capture/compare event is generated on channel 1:" />
      </BitField>
      <BitField start="2" size="1" name="CC2G" description="Capture/compare 2 generation Refer to CC1G description" />
      <BitField start="3" size="1" name="CC3G" description="Capture/compare 3 generation Refer to CC1G description" />
      <BitField start="4" size="1" name="CC4G" description="Capture/compare 4 generation Refer to CC1G description" />
      <BitField start="6" size="1" name="TG" description="Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Output" access="Read/Write" description="capture/compare mode register 1 (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1" />
        <Enum name="B_0x2" start="0x2" description="CC1 channel is configured as input, IC1 is mapped on TI2" />
        <Enum name="B_0x3" start="0x3" description="CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="2" size="1" name="OC1FE" description="Output compare 1 fast enable" />
      <BitField start="3" size="1" name="OC1PE" description="Output compare 1 preload enable Note: The PWM mode can be used without validating the preload register only in one-pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.">
        <Enum name="B_0x0" start="0x0" description="Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately." />
        <Enum name="B_0x1" start="0x1" description="Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event." />
      </BitField>
      <BitField start="4" size="3" name="OC1M1" description="Output compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;frozen&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode to &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;PWM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode. Note: The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base)." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (OC1REF='0) as long as TIMx_CNT&gt;TIMx_CCR1 else active (OC1REF=1)." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT&gt;TIMx_CCR1 else inactive." />
        <Enum name="B_0x8" start="0x8" description="Retriggerable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update." />
        <Enum name="B_0x9" start="0x9" description="Retriggerable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update." />
        <Enum name="B_0xC" start="0xC" description="Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF." />
        <Enum name="B_0xD" start="0xD" description="Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF." />
        <Enum name="B_0xE" start="0xE" description="Asymmetric PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down." />
        <Enum name="B_0xF" start="0xF" description="Asymmetric PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down." />
      </BitField>
      <BitField start="7" size="1" name="OC1CE" description="Output compare 1 clear enable">
        <Enum name="B_0x0" start="0x0" description="OC1Ref is not affected by the ETRF input" />
        <Enum name="B_0x1" start="0x1" description="OC1Ref is cleared as soon as a High level is detected on ETRF input" />
      </BitField>
      <BitField start="8" size="2" name="CC2S" description="Capture/compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC2 channel is configured as output." />
        <Enum name="B_0x1" start="0x1" description="CC2 channel is configured as input, IC2 is mapped on TI2." />
        <Enum name="B_0x2" start="0x2" description="CC2 channel is configured as input, IC2 is mapped on TI1." />
        <Enum name="B_0x3" start="0x3" description="CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="10" size="1" name="OC2FE" description="Output compare 2 fast enable" />
      <BitField start="11" size="1" name="OC2PE" description="Output compare 2 preload enable" />
      <BitField start="12" size="3" name="OC2M" description="Output compare 2 mode" />
      <BitField start="15" size="1" name="OC2CE" description="Output compare 2 clear enable" />
      <BitField start="16" size="1" name="OC1M_3" description="Output Compare 1 mode - bit 3" />
      <BitField start="24" size="1" name="OC2M_3" description="Output Compare 2 mode - bit 3" />
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Input" access="Read/Write" description="capture/compare mode register 1 (input mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 selection" />
      <BitField start="2" size="2" name="IC1PSC" description="Input capture 1 prescaler" />
      <BitField start="4" size="4" name="IC1F" description="Input capture 1 filter" />
      <BitField start="8" size="2" name="CC2S" description="Capture/compare 2 selection" />
      <BitField start="10" size="2" name="IC2PSC" description="Input capture 2 prescaler" />
      <BitField start="12" size="4" name="IC2F" description="Input capture 2 filter" />
    </Register>
    <Register start="+0x1C" size="0" name="CCMR2_Output" access="Read/Write" description="capture/compare mode register 2 (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC3S" description="Capture/Compare 3 selection" />
      <BitField start="2" size="1" name="OC3FE" description="Output compare 3 fast enable" />
      <BitField start="3" size="1" name="OC3PE" description="Output compare 3 preload enable" />
      <BitField start="4" size="3" name="OC3M" description="Output compare 3 mode" />
      <BitField start="7" size="1" name="OC3CE" description="Output compare 3 clear enable" />
      <BitField start="8" size="2" name="CC4S" description="Capture/Compare 4 selection" />
      <BitField start="10" size="1" name="OC4FE" description="Output compare 4 fast enable" />
      <BitField start="11" size="1" name="OC4PE" description="Output compare 4 preload enable" />
      <BitField start="12" size="3" name="OC4M" description="Output compare 4 mode" />
      <BitField start="15" size="1" name="OC4CE" description="Output compare 4 clear enable" />
      <BitField start="16" size="1" name="OC3M_3" description="Output Compare 3 mode - bit 3" />
      <BitField start="24" size="1" name="OC4M_3" description="Output Compare 4 mode - bit 3" />
    </Register>
    <Register start="+0x1C" size="0" name="CCMR2_Input" access="Read/Write" description="capture/compare mode register 2 (input mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC3S" description="Capture/Compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = 0 in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC3 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC3 channel is configured as input, IC3 is mapped on TI3" />
        <Enum name="B_0x2" start="0x2" description="CC3 channel is configured as input, IC3 is mapped on TI4" />
        <Enum name="B_0x3" start="0x3" description="CC3 channel is configured as input, IC3 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="2" size="2" name="IC3PSC" description="Input capture 3 prescaler" />
      <BitField start="4" size="4" name="IC3F" description="Input capture 3 filter" />
      <BitField start="8" size="2" name="CC4S" description="Capture/Compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = 0 in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC4 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC4 channel is configured as input, IC4 is mapped on TI4" />
        <Enum name="B_0x2" start="0x2" description="CC4 channel is configured as input, IC4 is mapped on TI3" />
        <Enum name="B_0x3" start="0x3" description="CC4 channel is configured as input, IC4 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="10" size="2" name="IC4PSC" description="Input capture 4 prescaler" />
      <BitField start="12" size="4" name="IC4F" description="Input capture 4 filter" />
    </Register>
    <Register start="+0x20" size="0" name="CCER" access="Read/Write" description="capture/compare enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CC1E" description="Capture/Compare 1 output enable.">
        <Enum name="B_0x0" start="0x0" description="Capture mode disabled / OC1 is not active" />
        <Enum name="B_0x1" start="0x1" description="Capture mode enabled / OC1 signal is output on the corresponding output pin" />
      </BitField>
      <BitField start="1" size="1" name="CC1P" description="Capture/Compare 1 output Polarity. When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0: non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1: inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1: non-inverted/both edges. The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0: This configuration is reserved, it must not be used.">
        <Enum name="B_0x0" start="0x0" description="OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)" />
        <Enum name="B_0x1" start="0x1" description="OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)" />
      </BitField>
      <BitField start="3" size="1" name="CC1NP" description="Capture/Compare 1 output Polarity. CC1 channel configured as output: CC1NP must be kept cleared in this case. CC1 channel configured as input: This bit is used in conjunction with CC1P to define TI1FP1/TI2FP1 polarity. refer to CC1P description." />
      <BitField start="4" size="1" name="CC2E" description="Capture/Compare 2 output enable. Refer to CC1E description" />
      <BitField start="5" size="1" name="CC2P" description="Capture/Compare 2 output Polarity. refer to CC1P description" />
      <BitField start="7" size="1" name="CC2NP" description="Capture/Compare 2 output Polarity. Refer to CC1NP description" />
      <BitField start="8" size="1" name="CC3E" description="Capture/Compare 3 output enable. Refer to CC1E description" />
      <BitField start="9" size="1" name="CC3P" description="Capture/Compare 3 output Polarity. Refer to CC1P description" />
      <BitField start="11" size="1" name="CC3NP" description="Capture/Compare 3 output Polarity. Refer to CC1NP description" />
      <BitField start="12" size="1" name="CC4E" description="Capture/Compare 4 output enable. refer to CC1E description" />
      <BitField start="13" size="1" name="CC4P" description="Capture/Compare 4 output Polarity. Refer to CC1P description" />
      <BitField start="15" size="1" name="CC4NP" description="Capture/Compare 4 output Polarity. Refer to CC1NP description" />
    </Register>
    <Register start="+0x24" size="0" name="CNT" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CNT_L" description="Low counter value" />
      <BitField start="16" size="16" name="CNT_H" description="High counter value (TIM2 only)" />
    </Register>
    <Register start="+0x24" size="0" name="CNT_ALTERNATE5" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="31" name="CNT" description="Most significant part counter value (TIM2) nullLeast significant part of counter value" />
      <BitField start="31" size="1" name="UIFCPY" description="UIF Copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register" />
    </Register>
    <Register start="+0x28" size="0" name="PSC" access="Read/Write" description="prescaler" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="PSC" description="Prescaler value" />
    </Register>
    <Register start="+0x2C" size="0" name="ARR" access="Read/Write" description="auto-reload register" reset_value="0xFFFFFFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="ARR" description="High auto-reload value (TIM2) nullLow Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null." />
    </Register>
    <Register start="+0x34" size="0" name="CCR1" access="Read/Write" description="capture/compare register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="CCR1" description="High Capture/Compare 1 value (TIM2) nullLow Capture/Compare 1 value If channel CC1 is configured as output: CCR1 is the value to be loaded in the actual capture/compare 1 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on OC1 output. If channel CC1is configured as input: CCR1 is the counter value transferred by the last input capture 1 event (IC1). The TIMx_CCR1 register is read-only and cannot be programmed." />
    </Register>
    <Register start="+0x38" size="0" name="CCR2" access="Read/Write" description="capture/compare register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="CCR2" description="High Capture/Compare 2 value (TIM2) nullLow Capture/Compare 2 value If channel CC2 is configured as output: CCR2 is the value to be loaded in the actual capture/compare 2 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC2PE). Else the preload value is copied in the active capture/compare 2 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC2 output. If channel CC2 is configured as input: CCR2 is the counter value transferred by the last input capture 2 event (IC2). The TIMx_CCR2 register is read-only and cannot be programmed." />
    </Register>
    <Register start="+0x3C" size="0" name="CCR3" access="Read/Write" description="capture/compare register 3" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="CCR3" description="High Capture/Compare 3 value (TIM2) nullLow Capture/Compare value If channel CC3 is configured as output: CCR3 is the value to be loaded in the actual capture/compare 3 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC3PE). Else the preload value is copied in the active capture/compare 3 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC3 output. If channel CC3is configured as input: CCR3 is the counter value transferred by the last input capture 3 event (IC3). The TIMx_CCR3 register is read-only and cannot be programmed." />
    </Register>
    <Register start="+0x40" size="0" name="CCR4" access="Read/Write" description="capture/compare register 4" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="32" name="CCR4" description="High Capture/Compare 4 value (TIM2) nullLow Capture/Compare value if CC4 channel is configured as output (CC4S bits): CCR4 is the value to be loaded in the actual capture/compare 4 register (preload value). It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC4PE). Else the preload value is copied in the active capture/compare 4 register when an update event occurs. The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC4 output. if CC4 channel is configured as input (CC4S bits in TIMx_CCMR4 register): CCR4 is the counter value transferred by the last input capture 4 event (IC4). The TIMx_CCR4 register is read-only and cannot be programmed." />
    </Register>
    <Register start="+0x48" size="0" name="DCR" access="Read/Write" description="DMA control register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="5" name="DBA" description="DMA base address This 5-bit vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ... Example: Let us consider the following transfer: DBL = 7 transfers &amp; DBA = TIMx_CR1. In this case the transfer is done to/from 7 registers starting from the TIMx_CR1 address.">
        <Enum name="B_0x0" start="0x0" description="TIMx_CR1" />
        <Enum name="B_0x1" start="0x1" description="TIMx_CR2" />
        <Enum name="B_0x2" start="0x2" description="TIMx_SMCR" />
      </BitField>
      <BitField start="8" size="5" name="DBL" description="DMA burst length This 5-bit vector defines the number of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address). ...">
        <Enum name="B_0x0" start="0x0" description="1 transfer," />
        <Enum name="B_0x1" start="0x1" description="2 transfers," />
        <Enum name="B_0x2" start="0x2" description="3 transfers," />
        <Enum name="B_0x11" start="0x11" description="18 transfers." />
      </BitField>
    </Register>
    <Register start="+0x4C" size="0" name="DMAR" access="Read/Write" description="DMA address for full transfer" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="DMAB" description="DMA register for burst accesses" />
    </Register>
    <Register start="+0x50" size="0" name="OR1" access="Read/Write" description="TIM option register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="OCREF_CLR" description="Ocref_clr source selection This bit selects the ocref_clr input source.">
        <Enum name="B_0x0" start="0x0" description="COMP1 output is connected to the OCREF_CLR input" />
        <Enum name="B_0x1" start="0x1" description="COMP2 output is connected to the OCREF_CLR input" />
      </BitField>
    </Register>
    <Register start="+0x60" size="0" name="AF1" access="Read/Write" description="TIM alternate function option register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="14" size="4" name="ETRSEL" description="ETR source selection These bits select the ETR input source. Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="ETR legacy mode" />
        <Enum name="B_0x1" start="0x1" description="COMP1" />
        <Enum name="B_0x2" start="0x2" description="COMP2" />
        <Enum name="B_0x3" start="0x3" description="LSE" />
      </BitField>
    </Register>
    <Register start="+0x68" size="0" name="TISEL" access="Read/Write" description="TIM alternate function option register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="TI1SEL" description="TI1[0] to TI1[15] input selection These bits select the TI1[0] to TI1[15] input source. Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM2_CH1 input" />
        <Enum name="B_0x1" start="0x1" description="COMP1 output" />
      </BitField>
      <BitField start="8" size="4" name="TI2SEL" description="TI2[0] to TI2[15] input selection These bits select the TI2[0] to TI2[15] input source. Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM2_CH2 input" />
        <Enum name="B_0x1" start="0x1" description="COMP2 output" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="TIM6" start="0x40001000" description="Basic timers">
    <Register start="+0x0" size="0" name="CR1" access="Read/Write" description="control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CEN" description="Counter enable Note: Gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. CEN is cleared automatically in one-pulse mode, when an update event occurs.">
        <Enum name="B_0x0" start="0x0" description="Counter disabled" />
        <Enum name="B_0x1" start="0x1" description="Counter enabled" />
      </BitField>
      <BitField start="1" size="1" name="UDIS" description="Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.">
        <Enum name="B_0x0" start="0x0" description="UEV enabled. The Update (UEV) event is generated by one of the following events:" />
        <Enum name="B_0x1" start="0x1" description="UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller." />
      </BitField>
      <BitField start="2" size="1" name="URS" description="Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller">
        <Enum name="B_0x0" start="0x0" description="Any of the following events generates an update interrupt or DMA request if enabled. These events can be:" />
        <Enum name="B_0x1" start="0x1" description="Only counter overflow/underflow generates an update interrupt or DMA request if enabled." />
      </BitField>
      <BitField start="3" size="1" name="OPM" description="One-pulse mode">
        <Enum name="B_0x0" start="0x0" description="Counter is not stopped at update event" />
        <Enum name="B_0x1" start="0x1" description="Counter stops counting at the next update event (clearing the CEN bit)." />
      </BitField>
      <BitField start="7" size="1" name="ARPE" description="Auto-reload preload enable">
        <Enum name="B_0x0" start="0x0" description="TIMx_ARR register is not buffered." />
        <Enum name="B_0x1" start="0x1" description="TIMx_ARR register is buffered." />
      </BitField>
      <BitField start="11" size="1" name="UIFREMAP" description="UIF status bit remapping">
        <Enum name="B_0x0" start="0x0" description="No remapping. UIF status bit is not copied to TIMx_CNT register bit 31." />
        <Enum name="B_0x1" start="0x1" description="Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="4" size="3" name="MMS" description="Master mode selection These bits are used to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows: When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in the TIMx_SMCR register). Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Reset - the UG bit from the TIMx_EGR register is used as a trigger output (TRGO). If reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset." />
        <Enum name="B_0x1" start="0x1" description="Enable - the Counter enable signal, CNT_EN, is used as a trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic OR between CEN control bit and the trigger input when configured in gated mode." />
        <Enum name="B_0x2" start="0x2" description="Update - The update event is selected as a trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer." />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DIER" access="Read/Write" description="DMA/Interrupt enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIE" description="Update interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Update interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt enabled." />
      </BitField>
      <BitField start="8" size="1" name="UDE" description="Update DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Update DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="Update DMA request enabled." />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="SR" access="Read/Write" description="status register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIF" description="Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow or underflow regarding the repetition counter value and if UDIS = 0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in the TIMx_EGR register, if URS&#xc2; =&#xc2; 0 and UDIS&#xc2; =&#xc2; 0 in the TIMx_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No update occurred." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt pending. This bit is set by hardware when the registers are updated:" />
      </BitField>
    </Register>
    <Register start="+0x14" size="0" name="EGR" access="WriteOnly" description="event generation register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UG" description="Update generation This bit can be set by software, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action." />
        <Enum name="B_0x1" start="0x1" description="Re-initializes the timer counter and generates an update of the registers. Note that the prescaler counter is cleared too (but the prescaler ratio is not affected)." />
      </BitField>
    </Register>
    <Register start="+0x24" size="0" name="CNT" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CNT" description="Counter value" />
      <BitField start="31" size="1" name="UIFCPY" description="UIF Copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in TIMx_CR1 is reset, bit 31 is reserved and read as 0." />
    </Register>
    <Register start="+0x28" size="0" name="PSC" access="Read/Write" description="prescaler" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="PSC" description="Prescaler value" />
    </Register>
    <Register start="+0x2C" size="0" name="ARR" access="Read/Write" description="auto-reload register" reset_value="0x0000FFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="ARR" description="Prescaler value" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="TIM7" start="0x40001400" description="Basic timers">
    <Register start="+0x0" size="0" name="CR1" access="Read/Write" description="control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CEN" description="Counter enable Note: Gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. CEN is cleared automatically in one-pulse mode, when an update event occurs.">
        <Enum name="B_0x0" start="0x0" description="Counter disabled" />
        <Enum name="B_0x1" start="0x1" description="Counter enabled" />
      </BitField>
      <BitField start="1" size="1" name="UDIS" description="Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.">
        <Enum name="B_0x0" start="0x0" description="UEV enabled. The Update (UEV) event is generated by one of the following events:" />
        <Enum name="B_0x1" start="0x1" description="UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller." />
      </BitField>
      <BitField start="2" size="1" name="URS" description="Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller">
        <Enum name="B_0x0" start="0x0" description="Any of the following events generates an update interrupt or DMA request if enabled. These events can be:" />
        <Enum name="B_0x1" start="0x1" description="Only counter overflow/underflow generates an update interrupt or DMA request if enabled." />
      </BitField>
      <BitField start="3" size="1" name="OPM" description="One-pulse mode">
        <Enum name="B_0x0" start="0x0" description="Counter is not stopped at update event" />
        <Enum name="B_0x1" start="0x1" description="Counter stops counting at the next update event (clearing the CEN bit)." />
      </BitField>
      <BitField start="7" size="1" name="ARPE" description="Auto-reload preload enable">
        <Enum name="B_0x0" start="0x0" description="TIMx_ARR register is not buffered." />
        <Enum name="B_0x1" start="0x1" description="TIMx_ARR register is buffered." />
      </BitField>
      <BitField start="11" size="1" name="UIFREMAP" description="UIF status bit remapping">
        <Enum name="B_0x0" start="0x0" description="No remapping. UIF status bit is not copied to TIMx_CNT register bit 31." />
        <Enum name="B_0x1" start="0x1" description="Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="4" size="3" name="MMS" description="Master mode selection These bits are used to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows: When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in the TIMx_SMCR register). Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Reset - the UG bit from the TIMx_EGR register is used as a trigger output (TRGO). If reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset." />
        <Enum name="B_0x1" start="0x1" description="Enable - the Counter enable signal, CNT_EN, is used as a trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic OR between CEN control bit and the trigger input when configured in gated mode." />
        <Enum name="B_0x2" start="0x2" description="Update - The update event is selected as a trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer." />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DIER" access="Read/Write" description="DMA/Interrupt enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIE" description="Update interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Update interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt enabled." />
      </BitField>
      <BitField start="8" size="1" name="UDE" description="Update DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Update DMA request disabled." />
        <Enum name="B_0x1" start="0x1" description="Update DMA request enabled." />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="SR" access="Read/Write" description="status register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIF" description="Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow or underflow regarding the repetition counter value and if UDIS = 0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in the TIMx_EGR register, if URS&#xc2; =&#xc2; 0 and UDIS&#xc2; =&#xc2; 0 in the TIMx_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No update occurred." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt pending. This bit is set by hardware when the registers are updated:" />
      </BitField>
    </Register>
    <Register start="+0x14" size="0" name="EGR" access="WriteOnly" description="event generation register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UG" description="Update generation This bit can be set by software, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action." />
        <Enum name="B_0x1" start="0x1" description="Re-initializes the timer counter and generates an update of the registers. Note that the prescaler counter is cleared too (but the prescaler ratio is not affected)." />
      </BitField>
    </Register>
    <Register start="+0x24" size="0" name="CNT" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CNT" description="Counter value" />
      <BitField start="31" size="1" name="UIFCPY" description="UIF Copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in TIMx_CR1 is reset, bit 31 is reserved and read as 0." />
    </Register>
    <Register start="+0x28" size="0" name="PSC" access="Read/Write" description="prescaler" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="PSC" description="Prescaler value" />
    </Register>
    <Register start="+0x2C" size="0" name="ARR" access="Read/Write" description="auto-reload register" reset_value="0x0000FFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="ARR" description="Prescaler value" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="TIM14" start="0x40002000" description="General purpose timers">
    <Register start="+0x0" size="0" name="CR1" access="Read/Write" description="control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CEN" description="Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.">
        <Enum name="B_0x0" start="0x0" description="Counter disabled" />
        <Enum name="B_0x1" start="0x1" description="Counter enabled" />
      </BitField>
      <BitField start="1" size="1" name="UDIS" description="Update disable This bit is set and cleared by software to enable/disable update interrupt (UEV) event generation. Counter overflow Setting the UG bit. Buffered registers are then loaded with their preload values.">
        <Enum name="B_0x0" start="0x0" description="UEV enabled. An UEV is generated by one of the following events:" />
        <Enum name="B_0x1" start="0x1" description="UEV disabled. No UEV is generated, shadow registers keep their value (ARR, PSC, CCRx). The counter and the prescaler are reinitialized if the UG bit is set." />
      </BitField>
      <BitField start="2" size="1" name="URS" description="Update request source This bit is set and cleared by software to select the update interrupt (UEV) sources. Counter overflow Setting the UG bit">
        <Enum name="B_0x0" start="0x0" description="Any of the following events generate an UEV if enabled:" />
        <Enum name="B_0x1" start="0x1" description="Only counter overflow generates an UEV if enabled." />
      </BitField>
      <BitField start="3" size="1" name="OPM" description="One-pulse mode">
        <Enum name="B_0x0" start="0x0" description="Counter is not stopped on the update event" />
        <Enum name="B_0x1" start="0x1" description="Counter stops counting on the next update event (clearing the CEN bit)." />
      </BitField>
      <BitField start="7" size="1" name="ARPE" description="Auto-reload preload enable">
        <Enum name="B_0x0" start="0x0" description="TIMx_ARR register is not buffered" />
        <Enum name="B_0x1" start="0x1" description="TIMx_ARR register is buffered" />
      </BitField>
      <BitField start="8" size="2" name="CKD" description="Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and sampling clock used by the digital filters (TIx),">
        <Enum name="B_0x0" start="0x0" description="tDTS = tCK_INT" />
        <Enum name="B_0x1" start="0x1" description="tDTS = 2 &#xc3;&#x83;&#xc2;&#x97; tCK_INT" />
        <Enum name="B_0x2" start="0x2" description="tDTS = 4 &#xc3;&#x83;&#xc2;&#x97; tCK_INT" />
      </BitField>
      <BitField start="11" size="1" name="UIFREMAP" description="UIF status bit remapping">
        <Enum name="B_0x0" start="0x0" description="No remapping. UIF status bit is not copied to TIMx_CNT register bit 31." />
        <Enum name="B_0x1" start="0x1" description="Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31." />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DIER" access="Read/Write" description="DMA/Interrupt enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIE" description="Update interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Update interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Update interrupt enabled" />
      </BitField>
      <BitField start="1" size="1" name="CC1IE" description="Capture/Compare 1 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC1 interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="CC1 interrupt enabled" />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="SR" access="Read/Write" description="status register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIF" description="Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow and if UDIS=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; and UDIS=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in the TIMx_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No update occurred." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt pending. This bit is set by hardware when the registers are updated:" />
      </BitField>
      <BitField start="1" size="1" name="CC1IF" description="Capture/compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="No compare match / No input capture occurred" />
        <Enum name="B_0x1" start="0x1" description="A compare match or an input capture occurred." />
      </BitField>
      <BitField start="9" size="1" name="CC1OF" description="Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;.">
        <Enum name="B_0x0" start="0x0" description="No overcapture has been detected." />
        <Enum name="B_0x1" start="0x1" description="The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set" />
      </BitField>
    </Register>
    <Register start="+0x14" size="0" name="EGR" access="WriteOnly" description="event generation register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UG" description="Update generation This bit can be set by software, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared." />
      </BitField>
      <BitField start="1" size="1" name="CC1G" description="Capture/compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="A capture/compare event is generated on channel 1:" />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Output" access="Read/Write" description="capture/compare mode register 1 (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output." />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1." />
      </BitField>
      <BitField start="2" size="1" name="OC1FE" description="Output compare 1 fast enable This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger.">
        <Enum name="B_0x0" start="0x0" description="CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles." />
        <Enum name="B_0x1" start="0x1" description="An active edge on the trigger input acts like a compare match on CC1 output. OC is then set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode." />
      </BitField>
      <BitField start="3" size="1" name="OC1PE" description="Output compare 1 preload enable Note: The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.">
        <Enum name="B_0x0" start="0x0" description="Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately." />
        <Enum name="B_0x1" start="0x1" description="Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event." />
      </BitField>
      <BitField start="4" size="3" name="OC1M1" description="Output compare 1 mode (refer to bit 16 for OC1M[3]) These bits define the behavior of the output reference signal OC1REF from which OC1 is derived. OC1REF is active high whereas OC1 active level depends on CC1P bit. Others: Reserved Note: In PWM mode 1 or 2, the OCREF level changes when the result of the comparison changes or when the output compare mode switches from frozen to PWM mode. Note: The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen. The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT = TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - Channel 1 is active as long as TIMx_CNT &lt; TIMx_CCR1 else inactive." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT &lt; TIMx_CCR1 else active" />
      </BitField>
      <BitField start="16" size="1" name="OC1M2" description="Output compare 1 mode (refer to bit 16 for OC1M[3]) These bits define the behavior of the output reference signal OC1REF from which OC1 is derived. OC1REF is active high whereas OC1 active level depends on CC1P bit. Others: Reserved Note: In PWM mode 1 or 2, the OCREF level changes when the result of the comparison changes or when the output compare mode switches from frozen to PWM mode. Note: The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen. The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT = TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - Channel 1 is active as long as TIMx_CNT &lt; TIMx_CCR1 else inactive." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT &lt; TIMx_CCR1 else active" />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Input" access="Read/Write" description="capture/compare mode register 1 (input mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1" />
      </BitField>
      <BitField start="2" size="2" name="IC1PSC" description="Input capture 1 prescaler This bit-field defines the ratio of the prescaler acting on CC1 input (IC1). The prescaler is reset as soon as CC1E=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (TIMx_CCER register).">
        <Enum name="B_0x0" start="0x0" description="no prescaler, capture is done each time an edge is detected on the capture input" />
        <Enum name="B_0x1" start="0x1" description="capture is done once every 2 events" />
        <Enum name="B_0x2" start="0x2" description="capture is done once every 4 events" />
        <Enum name="B_0x3" start="0x3" description="capture is done once every 8 events" />
      </BitField>
      <BitField start="4" size="4" name="IC1F" description="Input capture 1 filter This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:">
        <Enum name="B_0x0" start="0x0" description="No filter, sampling is done at fDTS" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="CCER" access="Read/Write" description="capture/compare enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CC1E" description="Capture/Compare 1 output enable.">
        <Enum name="B_0x0" start="0x0" description="Capture mode disabled / OC1 is not active" />
        <Enum name="B_0x1" start="0x1" description="Capture mode enabled / OC1 signal is output on the corresponding output pin" />
      </BitField>
      <BitField start="1" size="1" name="CC1P" description="Capture/Compare 1 output Polarity. When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0: non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1: inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1: non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0: This configuration is reserved, it must not be used.">
        <Enum name="B_0x0" start="0x0" description="OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)" />
        <Enum name="B_0x1" start="0x1" description="OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)" />
      </BitField>
      <BitField start="3" size="1" name="CC1NP" description="Capture/Compare 1 complementary output Polarity. CC1 channel configured as output: CC1NP must be kept cleared. CC1 channel configured as input: CC1NP bit is used in conjunction with CC1P to define TI1FP1 polarity (refer to CC1P description)." />
    </Register>
    <Register start="+0x24" size="0" name="CNT" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CNT" description="low counter value" />
      <BitField start="31" size="1" name="UIFCPY" description="UIF Copy" />
    </Register>
    <Register start="+0x28" size="0" name="PSC" access="Read/Write" description="prescaler" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="PSC" description="Prescaler value" />
    </Register>
    <Register start="+0x2C" size="0" name="ARR" access="Read/Write" description="auto-reload register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="ARR" description="Low Auto-reload value" />
    </Register>
    <Register start="+0x34" size="0" name="CCR1" access="Read/Write" description="capture/compare register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR1" description="Low Capture/Compare 1 value" />
    </Register>
    <Register start="+0x68" size="0" name="TISEL" access="Read/Write" description="TIM timer input selection register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="TI1SEL" description="selects TI1[0] to TI1[15] input Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM14_CH1 input" />
        <Enum name="B_0x1" start="0x1" description="RTC CLK" />
        <Enum name="B_0x2" start="0x2" description="HSE/32" />
        <Enum name="B_0x3" start="0x3" description="MCO" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="TIM15" start="0x40014000" description="General purpose timers">
    <Register start="+0x0" size="0" name="CR1" access="Read/Write" description="control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CEN" description="Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.">
        <Enum name="B_0x0" start="0x0" description="Counter disabled" />
        <Enum name="B_0x1" start="0x1" description="Counter enabled" />
      </BitField>
      <BitField start="1" size="1" name="UDIS" description="Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.">
        <Enum name="B_0x0" start="0x0" description="UEV enabled. The Update (UEV) event is generated by one of the following events:" />
        <Enum name="B_0x1" start="0x1" description="UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller." />
      </BitField>
      <BitField start="2" size="1" name="URS" description="Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller">
        <Enum name="B_0x0" start="0x0" description="Any of the following events generate an update interrupt if enabled. These events can be:" />
        <Enum name="B_0x1" start="0x1" description="Only counter overflow/underflow generates an update interrupt if enabled" />
      </BitField>
      <BitField start="3" size="1" name="OPM" description="One-pulse mode">
        <Enum name="B_0x0" start="0x0" description="Counter is not stopped at update event" />
        <Enum name="B_0x1" start="0x1" description="Counter stops counting at the next update event (clearing the bit CEN)" />
      </BitField>
      <BitField start="7" size="1" name="ARPE" description="Auto-reload preload enable">
        <Enum name="B_0x0" start="0x0" description="TIMx_ARR register is not buffered" />
        <Enum name="B_0x1" start="0x1" description="TIMx_ARR register is buffered" />
      </BitField>
      <BitField start="8" size="2" name="CKD" description="Clock division This bitfield indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS) used by the dead-time generators and the digital filters (TIx)">
        <Enum name="B_0x0" start="0x0" description="tDTS = tCK_INT" />
        <Enum name="B_0x1" start="0x1" description="tDTS = 2*tCK_INT" />
        <Enum name="B_0x2" start="0x2" description="tDTS = 4*tCK_INT" />
        <Enum name="B_0x3" start="0x3" description="Reserved, do not program this value" />
      </BitField>
      <BitField start="11" size="1" name="UIFREMAP" description="UIF status bit remapping">
        <Enum name="B_0x0" start="0x0" description="No remapping. UIF status bit is not copied to TIMx_CNT register bit 31." />
        <Enum name="B_0x1" start="0x1" description="Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CCPC" description="Capture/compare preloaded control Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="CCxE, CCxNE and OCxM bits are not preloaded" />
        <Enum name="B_0x1" start="0x1" description="CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when a commutation event (COM) occurs (COMG bit set or rising edge detected on TRGI, depending on the CCUS bit)." />
      </BitField>
      <BitField start="2" size="1" name="CCUS" description="Capture/compare control update selection Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only." />
        <Enum name="B_0x1" start="0x1" description="When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI." />
      </BitField>
      <BitField start="3" size="1" name="CCDS" description="Capture/compare DMA selection">
        <Enum name="B_0x0" start="0x0" description="CCx DMA request sent when CCx event occurs" />
        <Enum name="B_0x1" start="0x1" description="CCx DMA requests sent when update event occurs" />
      </BitField>
      <BitField start="4" size="3" name="MMS" description="Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows:">
        <Enum name="B_0x0" start="0x0" description="Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset." />
        <Enum name="B_0x1" start="0x1" description="Enable - the Counter Enable signal CNT_EN is used as trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enable. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register)." />
        <Enum name="B_0x2" start="0x2" description="Update - The update event is selected as trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer." />
        <Enum name="B_0x3" start="0x3" description="Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (TRGO)." />
        <Enum name="B_0x4" start="0x4" description="Compare - OC1REFC signal is used as trigger output (TRGO)." />
        <Enum name="B_0x5" start="0x5" description="Compare - OC2REFC signal is used as trigger output (TRGO)." />
      </BitField>
      <BitField start="7" size="1" name="TI1S" description="TI1 selection">
        <Enum name="B_0x0" start="0x0" description="The TIMx_CH1 pin is connected to TI1 input" />
        <Enum name="B_0x1" start="0x1" description="The TIMx_CH1, CH2 pins are connected to the TI1 input (XOR combination)" />
      </BitField>
      <BitField start="8" size="1" name="OIS1" description="Output Idle state 1 (OC1 output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIM15_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="OC1=0 (after a dead-time if OC1N is implemented) when MOE=0" />
        <Enum name="B_0x1" start="0x1" description="OC1=1 (after a dead-time if OC1N is implemented) when MOE=0" />
      </BitField>
      <BitField start="9" size="1" name="OIS1N" description="Output Idle state 1 (OC1N output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIM15_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="OC1N=0 after a dead-time when MOE=0" />
        <Enum name="B_0x1" start="0x1" description="OC1N=1 after a dead-time when MOE=0" />
      </BitField>
      <BitField start="10" size="1" name="OIS2" description="Output idle state 2 (OC2 output) Note: This bit cannot be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in the TIM15_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="OC2=0 when MOE=0" />
        <Enum name="B_0x1" start="0x1" description="OC2=1 when MOE=0" />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="SMCR" access="Read/Write" description="slave mode control register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="3" name="SMS1" description="Slave mode selection When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Other codes: reserved. Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00100&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled - if CEN = '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; then the prescaler is clocked directly by the internal clock." />
        <Enum name="B_0x4" start="0x4" description="Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers." />
        <Enum name="B_0x5" start="0x5" description="Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled." />
        <Enum name="B_0x6" start="0x6" description="Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled." />
        <Enum name="B_0x7" start="0x7" description="External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter." />
        <Enum name="B_0x8" start="0x8" description="Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter, generates an update of the registers and starts the counter." />
      </BitField>
      <BitField start="4" size="3" name="TS1" description="Trigger selection This bit field selects the trigger input to be used to synchronize the counter. Other: Reserved See for more details on ITRx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.">
        <Enum name="B_0x0" start="0x0" description="Internal Trigger 0 (ITR0)" />
        <Enum name="B_0x1" start="0x1" description="Internal Trigger 1 (ITR1)" />
        <Enum name="B_0x2" start="0x2" description="Internal Trigger 2 (ITR2)" />
        <Enum name="B_0x3" start="0x3" description="Internal Trigger 3 (ITR3)" />
        <Enum name="B_0x4" start="0x4" description="TI1 Edge Detector (TI1F_ED)" />
        <Enum name="B_0x5" start="0x5" description="Filtered Timer Input 1 (TI1FP1)" />
        <Enum name="B_0x6" start="0x6" description="Filtered Timer Input 2 (TI2FP2)" />
      </BitField>
      <BitField start="7" size="1" name="MSM" description="Master/slave mode">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event." />
      </BitField>
      <BitField start="16" size="1" name="SMS2" description="Slave mode selection When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Other codes: reserved. Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00100&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled - if CEN = '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; then the prescaler is clocked directly by the internal clock." />
        <Enum name="B_0x4" start="0x4" description="Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers." />
        <Enum name="B_0x5" start="0x5" description="Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled." />
        <Enum name="B_0x6" start="0x6" description="Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled." />
        <Enum name="B_0x7" start="0x7" description="External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter." />
        <Enum name="B_0x8" start="0x8" description="Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter, generates an update of the registers and starts the counter." />
      </BitField>
      <BitField start="20" size="2" name="TS2" description="Trigger selection This bit field selects the trigger input to be used to synchronize the counter. Other: Reserved See for more details on ITRx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.">
        <Enum name="B_0x0" start="0x0" description="Internal Trigger 0 (ITR0)" />
        <Enum name="B_0x1" start="0x1" description="Internal Trigger 1 (ITR1)" />
        <Enum name="B_0x2" start="0x2" description="Internal Trigger 2 (ITR2)" />
        <Enum name="B_0x3" start="0x3" description="Internal Trigger 3 (ITR3)" />
        <Enum name="B_0x4" start="0x4" description="TI1 Edge Detector (TI1F_ED)" />
        <Enum name="B_0x5" start="0x5" description="Filtered Timer Input 1 (TI1FP1)" />
        <Enum name="B_0x6" start="0x6" description="Filtered Timer Input 2 (TI2FP2)" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DIER" access="Read/Write" description="DMA/Interrupt enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIE" description="Update interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Update interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Update interrupt enabled" />
      </BitField>
      <BitField start="1" size="1" name="CC1IE" description="Capture/Compare 1 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC1 interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="CC1 interrupt enabled" />
      </BitField>
      <BitField start="2" size="1" name="CC2IE" description="Capture/Compare 2 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC2 interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="CC2 interrupt enabled" />
      </BitField>
      <BitField start="5" size="1" name="COMIE" description="COM interrupt enable">
        <Enum name="B_0x0" start="0x0" description="COM interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="COM interrupt enabled" />
      </BitField>
      <BitField start="6" size="1" name="TIE" description="Trigger interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Trigger interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Trigger interrupt enabled" />
      </BitField>
      <BitField start="7" size="1" name="BIE" description="Break interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Break interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Break interrupt enabled" />
      </BitField>
      <BitField start="8" size="1" name="UDE" description="Update DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Update DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="Update DMA request enabled" />
      </BitField>
      <BitField start="9" size="1" name="CC1DE" description="Capture/Compare 1 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC1 DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="CC1 DMA request enabled" />
      </BitField>
      <BitField start="10" size="1" name="CC2DE" description="Capture/Compare 2 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC2 DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="CC2 DMA request enabled" />
      </BitField>
      <BitField start="13" size="1" name="COMDE" description="COM DMA request enable">
        <Enum name="B_0x0" start="0x0" description="COM DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="COM DMA request enabled" />
      </BitField>
      <BitField start="14" size="1" name="TDE" description="Trigger DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Trigger DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="Trigger DMA request enabled" />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="SR" access="Read/Write" description="status register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIF" description="Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer to control register (TIM15_SMCR)), if URS=0 and UDIS=0 in the TIMx_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No update occurred." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt pending. This bit is set by hardware when the registers are updated:" />
      </BitField>
      <BitField start="1" size="1" name="CC1IF" description="Capture/Compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="No compare match / No input capture occurred" />
        <Enum name="B_0x1" start="0x1" description="A compare match or an input capture occurred" />
      </BitField>
      <BitField start="2" size="1" name="CC2IF" description="Capture/Compare 2 interrupt flag refer to CC1IF description" />
      <BitField start="5" size="1" name="COMIF" description="COM interrupt flag This flag is set by hardware on a COM event (once the capture/compare control bits &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93;CCxE, CCxNE, OCxM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; have been updated). It is cleared by software.">
        <Enum name="B_0x0" start="0x0" description="No COM event occurred" />
        <Enum name="B_0x1" start="0x1" description="COM interrupt pending" />
      </BitField>
      <BitField start="6" size="1" name="TIF" description="Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on TRGI input when the slave mode controller is enabled in all modes but gated mode, both edges in case gated mode is selected). It is set when the counter starts or stops when gated mode is selected. It is cleared by software.">
        <Enum name="B_0x0" start="0x0" description="No trigger event occurred" />
        <Enum name="B_0x1" start="0x1" description="Trigger interrupt pending" />
      </BitField>
      <BitField start="7" size="1" name="BIF" description="Break interrupt flag This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active.">
        <Enum name="B_0x0" start="0x0" description="No break event occurred" />
        <Enum name="B_0x1" start="0x1" description="An active level has been detected on the break input" />
      </BitField>
      <BitField start="9" size="1" name="CC1OF" description="Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;.">
        <Enum name="B_0x0" start="0x0" description="No overcapture has been detected" />
        <Enum name="B_0x1" start="0x1" description="The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set" />
      </BitField>
      <BitField start="10" size="1" name="CC2OF" description="Capture/Compare 2 overcapture flag Refer to CC1OF description" />
    </Register>
    <Register start="+0x14" size="0" name="EGR" access="WriteOnly" description="event generation register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UG" description="Update generation This bit can be set by software, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected)." />
      </BitField>
      <BitField start="1" size="1" name="CC1G" description="Capture/Compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="A capture/compare event is generated on channel 1:" />
      </BitField>
      <BitField start="2" size="1" name="CC2G" description="Capture/Compare 2 generation Refer to CC1G description" />
      <BitField start="5" size="1" name="COMG" description="Capture/Compare control update generation This bit can be set by software, it is automatically cleared by hardware. Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="When the CCPC bit is set, it is possible to update the CCxE, CCxNE and OCxM bits" />
      </BitField>
      <BitField start="6" size="1" name="TG" description="Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled" />
      </BitField>
      <BitField start="7" size="1" name="BG" description="Break generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Output" access="Read/Write" description="capture/compare mode register (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output." />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1." />
        <Enum name="B_0x2" start="0x2" description="CC1 channel is configured as input, IC1 is mapped on TI2." />
        <Enum name="B_0x3" start="0x3" description="CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="2" size="1" name="OC1FE" description="Output Compare 1 fast enable This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger.">
        <Enum name="B_0x0" start="0x0" description="CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles." />
        <Enum name="B_0x1" start="0x1" description="An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode." />
      </BitField>
      <BitField start="3" size="1" name="OC1PE" description="Output Compare 1 preload enable Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.">
        <Enum name="B_0x0" start="0x0" description="Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately." />
        <Enum name="B_0x1" start="0x1" description="Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event." />
      </BitField>
      <BitField start="4" size="3" name="OC1M1" description="Output Compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;frozen&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode to &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;PWM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode. On channels that have a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated. The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active." />
        <Enum name="B_0x8" start="0x8" description="Retrigerrable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update." />
        <Enum name="B_0x9" start="0x9" description="Retrigerrable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update." />
        <Enum name="B_0xC" start="0xC" description="Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF." />
        <Enum name="B_0xD" start="0xD" description="Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF." />
      </BitField>
      <BitField start="8" size="2" name="CC2S" description="Capture/Compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC2 channel is configured as output." />
        <Enum name="B_0x1" start="0x1" description="CC2 channel is configured as input, IC2 is mapped on TI2." />
        <Enum name="B_0x2" start="0x2" description="CC2 channel is configured as input, IC2 is mapped on TI1." />
        <Enum name="B_0x3" start="0x3" description="CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="10" size="1" name="OC2FE" description="Output Compare 2 fast enable" />
      <BitField start="11" size="1" name="OC2PE" description="Output Compare 2 preload enable" />
      <BitField start="12" size="3" name="OC2M1" description="Output Compare 2 mode" />
      <BitField start="16" size="1" name="OC1M2" description="Output Compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;frozen&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode to &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;PWM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode. On channels that have a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated. The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active." />
        <Enum name="B_0x8" start="0x8" description="Retrigerrable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update." />
        <Enum name="B_0x9" start="0x9" description="Retrigerrable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update." />
        <Enum name="B_0xC" start="0xC" description="Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF." />
        <Enum name="B_0xD" start="0xD" description="Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF." />
      </BitField>
      <BitField start="24" size="1" name="OC2M2" description="Output Compare 2 mode" />
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Input" access="Read/Write" description="capture/compare mode register 1 (input mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 Selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1" />
        <Enum name="B_0x2" start="0x2" description="CC1 channel is configured as input, IC1 is mapped on TI2" />
        <Enum name="B_0x3" start="0x3" description="CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="2" size="2" name="IC1PSC" description="Input capture 1 prescaler This bit-field defines the ratio of the prescaler acting on CC1 input (IC1). The prescaler is reset as soon as CC1E=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (TIMx_CCER register).">
        <Enum name="B_0x0" start="0x0" description="no prescaler, capture is done each time an edge is detected on the capture input" />
        <Enum name="B_0x1" start="0x1" description="capture is done once every 2 events" />
        <Enum name="B_0x2" start="0x2" description="capture is done once every 4 events" />
        <Enum name="B_0x3" start="0x3" description="capture is done once every 8 events" />
      </BitField>
      <BitField start="4" size="4" name="IC1F" description="Input capture 1 filter This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:">
        <Enum name="B_0x0" start="0x0" description="No filter, sampling is done at fDTS" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
      <BitField start="8" size="2" name="CC2S" description="Capture/Compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC2 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC2 channel is configured as input, IC2 is mapped on TI2" />
        <Enum name="B_0x2" start="0x2" description="CC2 channel is configured as input, IC2 is mapped on TI1" />
        <Enum name="B_0x3" start="0x3" description="CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)" />
      </BitField>
      <BitField start="10" size="2" name="IC2PSC" description="Input capture 2 prescaler" />
      <BitField start="12" size="4" name="IC2F" description="Input capture 2 filter" />
    </Register>
    <Register start="+0x20" size="0" name="CCER" access="Read/Write" description="capture/compare enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CC1E" description="Capture/Compare 1 output enable When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to for details.">
        <Enum name="B_0x0" start="0x0" description="Capture mode disabled / OC1 is not active (see below)" />
        <Enum name="B_0x1" start="0x1" description="Capture mode enabled / OC1 signal is output on the corresponding output pin" />
      </BitField>
      <BitField start="1" size="1" name="CC1P" description="Capture/Compare 1 output polarity When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0: non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1: inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1: non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0: this configuration is reserved, it must not be used. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated.">
        <Enum name="B_0x0" start="0x0" description="OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)" />
        <Enum name="B_0x1" start="0x1" description="OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)" />
      </BitField>
      <BitField start="2" size="1" name="CC1NE" description="Capture/Compare 1 complementary output enable">
        <Enum name="B_0x0" start="0x0" description="Off - OC1N is not active. OC1N level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits." />
        <Enum name="B_0x1" start="0x1" description="On - OC1N signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits." />
      </BitField>
      <BitField start="3" size="1" name="CC1NP" description="Capture/Compare 1 complementary output polarity CC1 channel configured as output: CC1 channel configured as input: This bit is used in conjunction with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer to CC1P description. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; (the channel is configured in output). On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a Commutation event is generated.">
        <Enum name="B_0x0" start="0x0" description="OC1N active high" />
        <Enum name="B_0x1" start="0x1" description="OC1N active low" />
      </BitField>
      <BitField start="4" size="1" name="CC2E" description="Capture/Compare 2 output enable Refer to CC1E description" />
      <BitField start="5" size="1" name="CC2P" description="Capture/Compare 2 output polarity Refer to CC1P description" />
      <BitField start="7" size="1" name="CC2NP" description="Capture/Compare 2 complementary output polarity Refer to CC1NP description" />
    </Register>
    <Register start="+0x24" size="0" name="CNT" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CNT" description="counter value" />
      <BitField start="31" size="1" name="UIFCPY" description="UIF Copy" />
    </Register>
    <Register start="+0x28" size="0" name="PSC" access="Read/Write" description="prescaler" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="PSC" description="Prescaler value" />
    </Register>
    <Register start="+0x2C" size="0" name="ARR" access="Read/Write" description="auto-reload register" reset_value="0x0000FFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="ARR" description="Auto-reload value" />
    </Register>
    <Register start="+0x30" size="0" name="RCR" access="Read/Write" description="repetition counter register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="REP" description="Repetition counter value" />
    </Register>
    <Register start="+0x34" size="0" name="CCR1" access="Read/Write" description="capture/compare register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR1" description="Capture/Compare 1 value" />
    </Register>
    <Register start="+0x38" size="0" name="CCR2" access="Read/Write" description="capture/compare register 2" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR2" description="Capture/Compare 2 value" />
    </Register>
    <Register start="+0x44" size="0" name="BDTR" access="Read/Write" description="break and dead-time register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="DTG" description="Dead-time generator setup This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration. DTG[7:5]=0xx =&gt; DT=DTG[7:0]x tdtg with tdtg=tDTS DTG[7:5]=10x =&gt; DT=(64+DTG[5:0])xtdtg with Tdtg=2xtDTS DTG[7:5]=110 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=8xtDTS DTG[7:5]=111 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=16xtDTS Example if TDTS=125ns (8MHz), dead-time possible values are: 0 to 15875 ns by 125 ns steps, 16 &#xc3;&#x82;&#xc2;&#xb5;s to 31750 ns by 250 ns steps, 32 &#xc3;&#x82;&#xc2;&#xb5;s to 63 &#xc3;&#x82;&#xc2;&#xb5;s by 1 &#xc3;&#x82;&#xc2;&#xb5;s steps, 64 &#xc3;&#x82;&#xc2;&#xb5;s to 126 &#xc3;&#x82;&#xc2;&#xb5;s by 2 &#xc3;&#x82;&#xc2;&#xb5;s steps Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register)." />
      <BitField start="8" size="2" name="LOCK" description="Lock configuration These bits offer a write protection against software errors. Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset.">
        <Enum name="B_0x0" start="0x0" description="LOCK OFF - No bit is write protected" />
        <Enum name="B_0x1" start="0x1" description="LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written" />
        <Enum name="B_0x2" start="0x2" description="LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written." />
        <Enum name="B_0x3" start="0x3" description="LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written." />
      </BitField>
      <BitField start="10" size="1" name="OSSI" description="Off-state selection for Idle mode This bit is used when MOE=0 on channels configured as outputs. See OC/OCN enable description for more details (enable register (TIM15_CCER) on page&#xc3;&#x82;&#xc2; 818). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="When inactive, OC/OCN outputs are disabled (OC/OCN enable output signal=0)" />
        <Enum name="B_0x1" start="0x1" description="When inactive, OC/OCN outputs are forced first with their idle level as soon as CCxE=1 or CCxNE=1. OC/OCN enable output signal=1)" />
      </BitField>
      <BitField start="11" size="1" name="OSSR" description="Off-state selection for Run mode This bit is used when MOE=1 on channels that have a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer. See OC/OCN enable description for more details (enable register (TIM15_CCER) on page&#xc3;&#x82;&#xc2; 818). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the AFIO logic, which forces a Hi-Z state)" />
        <Enum name="B_0x1" start="0x1" description="When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer)." />
      </BitField>
      <BitField start="12" size="1" name="BKE" description="Break enable 1; Break inputs (BRK and CCS clock failure event) enabled This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break inputs (BRK and CCS clock failure event) disabled" />
      </BitField>
      <BitField start="13" size="1" name="BKP" description="Break polarity Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK is active low" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK is active high" />
      </BitField>
      <BitField start="14" size="1" name="AOE" description="Automatic output enable Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="MOE can be set only by software" />
        <Enum name="B_0x1" start="0x1" description="MOE can be set by software or automatically at the next update event (if the break input is not be active)" />
      </BitField>
      <BitField start="15" size="1" name="MOE" description="Main output enable This bit is cleared asynchronously by hardware as soon as the break input is active. It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output. See OC/OCN enable description for more details (enable register (TIM15_CCER) on page&#xc3;&#x82;&#xc2; 818).">
        <Enum name="B_0x0" start="0x0" description="OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit." />
        <Enum name="B_0x1" start="0x1" description="OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register)" />
      </BitField>
      <BitField start="16" size="4" name="BKF" description="Break filter This bit-field defines the frequency used to sample the BRK input signal and the length of the digital filter applied to BRK. The digital filter is made of an event counter in which N events are needed to validate a transition on the output: Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="No filter, BRK acts asynchronously" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
      <BitField start="26" size="1" name="BKDSRM" description="Break Disarm This bit is cleared by hardware when no break source is active. The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared. Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK is armed" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK is disarmed" />
      </BitField>
      <BitField start="28" size="1" name="BKBID" description="Break Bidirectional In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices. Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK in input mode" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK in bidirectional mode" />
      </BitField>
    </Register>
    <Register start="+0x48" size="0" name="DCR" access="Read/Write" description="DMA control register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="5" name="DBA" description="DMA base address This 5-bit field defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ...">
        <Enum name="B_0x0" start="0x0" description="TIMx_CR1," />
        <Enum name="B_0x1" start="0x1" description="TIMx_CR2," />
        <Enum name="B_0x2" start="0x2" description="TIMx_SMCR," />
      </BitField>
      <BitField start="8" size="5" name="DBL" description="DMA burst length This 5-bit field defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address). ...">
        <Enum name="B_0x0" start="0x0" description="1 transfer," />
        <Enum name="B_0x1" start="0x1" description="2 transfers," />
        <Enum name="B_0x2" start="0x2" description="3 transfers," />
        <Enum name="B_0x11" start="0x11" description="18 transfers." />
      </BitField>
    </Register>
    <Register start="+0x4C" size="0" name="DMAR" access="Read/Write" description="DMA address for full transfer" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="DMAB" description="DMA register for burst accesses" />
    </Register>
    <Register start="+0x60" size="0" name="AF1" access="Read/Write" description="TIM15 alternate register 1" reset_value="0x00000001" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BKINE" description="BRK BKIN input enable This bit enables the BKIN alternate function input for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. BKIN input is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="BKIN input disabled" />
        <Enum name="B_0x1" start="0x1" description="BKIN input enabled" />
      </BitField>
      <BitField start="1" size="1" name="BKCMP1E" description="BRK COMP1 enable This bit enables the COMP1 for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. COMP1 output is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP1 input disabled" />
        <Enum name="B_0x1" start="0x1" description="COMP1 input enabled" />
      </BitField>
      <BitField start="2" size="1" name="BKCMP2E" description="BRK COMP2 enable This bit enables the COMP2 for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. COMP2 output is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP2 input disabled" />
        <Enum name="B_0x1" start="0x1" description="COMP2 input enabled" />
      </BitField>
      <BitField start="9" size="1" name="BKINP" description="BRK BKIN input polarity This bit selects the BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="BKIN input is active low" />
        <Enum name="B_0x1" start="0x1" description="BKIN input is active high" />
      </BitField>
      <BitField start="10" size="1" name="BKCMP1P" description="BRK COMP1 input polarity This bit selects the COMP1 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP1 input is active low" />
        <Enum name="B_0x1" start="0x1" description="COMP1 input is active high" />
      </BitField>
      <BitField start="11" size="1" name="BKCMP2P" description="BRK COMP2 input polarity This bit selects the COMP2 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP2 input is active low" />
        <Enum name="B_0x1" start="0x1" description="COMP2 input is active high" />
      </BitField>
    </Register>
    <Register start="+0x68" size="0" name="TISEL" access="Read/Write" description="input selection register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="TI1SEL" description="selects TI1[0] to TI1[15] input Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM15_CH1 input" />
        <Enum name="B_0x1" start="0x1" description="TIM2_IC1" />
        <Enum name="B_0x2" start="0x2" description="TIM3_IC1" />
      </BitField>
      <BitField start="8" size="4" name="TI2SEL" description="selects TI2[0] to TI2[15] input Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM15_CH2 input" />
        <Enum name="B_0x1" start="0x1" description="TIM2_IC2" />
        <Enum name="B_0x2" start="0x2" description="TIM3_IC2" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="TIM16" start="0x40014400" description="General purpose timers">
    <Register start="+0x0" size="0" name="CR1" access="Read/Write" description="control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CEN" description="Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.">
        <Enum name="B_0x0" start="0x0" description="Counter disabled" />
        <Enum name="B_0x1" start="0x1" description="Counter enabled" />
      </BitField>
      <BitField start="1" size="1" name="UDIS" description="Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.">
        <Enum name="B_0x0" start="0x0" description="UEV enabled. The Update (UEV) event is generated by one of the following events:" />
        <Enum name="B_0x1" start="0x1" description="UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller." />
      </BitField>
      <BitField start="2" size="1" name="URS" description="Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller">
        <Enum name="B_0x0" start="0x0" description="Any of the following events generate an update interrupt or DMA request if enabled. These events can be:" />
        <Enum name="B_0x1" start="0x1" description="Only counter overflow/underflow generates an update interrupt or DMA request if enabled." />
      </BitField>
      <BitField start="3" size="1" name="OPM" description="One pulse mode">
        <Enum name="B_0x0" start="0x0" description="Counter is not stopped at update event" />
        <Enum name="B_0x1" start="0x1" description="Counter stops counting at the next update event (clearing the bit CEN)" />
      </BitField>
      <BitField start="7" size="1" name="ARPE" description="Auto-reload preload enable">
        <Enum name="B_0x0" start="0x0" description="TIMx_ARR register is not buffered" />
        <Enum name="B_0x1" start="0x1" description="TIMx_ARR register is buffered" />
      </BitField>
      <BitField start="8" size="2" name="CKD" description="Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (TIx),">
        <Enum name="B_0x0" start="0x0" description="tDTS=tCK_INT" />
        <Enum name="B_0x1" start="0x1" description="tDTS=2*tCK_INT" />
        <Enum name="B_0x2" start="0x2" description="tDTS=4*tCK_INT" />
        <Enum name="B_0x3" start="0x3" description="Reserved, do not program this value" />
      </BitField>
      <BitField start="11" size="1" name="UIFREMAP" description="UIF status bit remapping">
        <Enum name="B_0x0" start="0x0" description="No remapping. UIF status bit is not copied to TIMx_CNT register bit 31." />
        <Enum name="B_0x1" start="0x1" description="Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CCPC" description="Capture/compare preloaded control Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="CCxE, CCxNE and OCxM bits are not preloaded" />
        <Enum name="B_0x1" start="0x1" description="CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when COM bit is set." />
      </BitField>
      <BitField start="2" size="1" name="CCUS" description="Capture/compare control update selection Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only." />
        <Enum name="B_0x1" start="0x1" description="When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI." />
      </BitField>
      <BitField start="3" size="1" name="CCDS" description="Capture/compare DMA selection">
        <Enum name="B_0x0" start="0x0" description="CCx DMA request sent when CCx event occurs" />
        <Enum name="B_0x1" start="0x1" description="CCx DMA requests sent when update event occurs" />
      </BitField>
      <BitField start="8" size="1" name="OIS1" description="Output Idle state 1 (OC1 output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="OC1=0 (after a dead-time if OC1N is implemented) when MOE=0" />
        <Enum name="B_0x1" start="0x1" description="OC1=1 (after a dead-time if OC1N is implemented) when MOE=0" />
      </BitField>
      <BitField start="9" size="1" name="OIS1N" description="Output Idle state 1 (OC1N output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="OC1N=0 after a dead-time when MOE=0" />
        <Enum name="B_0x1" start="0x1" description="OC1N=1 after a dead-time when MOE=0" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DIER" access="Read/Write" description="DMA/Interrupt enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIE" description="Update interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Update interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Update interrupt enabled" />
      </BitField>
      <BitField start="1" size="1" name="CC1IE" description="Capture/Compare 1 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC1 interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="CC1 interrupt enabled" />
      </BitField>
      <BitField start="5" size="1" name="COMIE" description="COM interrupt enable">
        <Enum name="B_0x0" start="0x0" description="COM interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="COM interrupt enabled" />
      </BitField>
      <BitField start="7" size="1" name="BIE" description="Break interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Break interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Break interrupt enabled" />
      </BitField>
      <BitField start="8" size="1" name="UDE" description="Update DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Update DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="Update DMA request enabled" />
      </BitField>
      <BitField start="9" size="1" name="CC1DE" description="Capture/Compare 1 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC1 DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="CC1 DMA request enabled" />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="SR" access="Read/Write" description="status register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIF" description="Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No update occurred." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt pending. This bit is set by hardware when the registers are updated:" />
      </BitField>
      <BitField start="1" size="1" name="CC1IF" description="Capture/Compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="No compare match / No input capture occurred" />
        <Enum name="B_0x1" start="0x1" description="A compare match or an input capture occurred" />
      </BitField>
      <BitField start="5" size="1" name="COMIF" description="COM interrupt flag This flag is set by hardware on a COM event (once the capture/compare control bits &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93;CCxE, CCxNE, OCxM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; have been updated). It is cleared by software.">
        <Enum name="B_0x0" start="0x0" description="No COM event occurred" />
        <Enum name="B_0x1" start="0x1" description="COM interrupt pending" />
      </BitField>
      <BitField start="7" size="1" name="BIF" description="Break interrupt flag This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active.">
        <Enum name="B_0x0" start="0x0" description="No break event occurred" />
        <Enum name="B_0x1" start="0x1" description="An active level has been detected on the break input" />
      </BitField>
      <BitField start="9" size="1" name="CC1OF" description="Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;.">
        <Enum name="B_0x0" start="0x0" description="No overcapture has been detected" />
        <Enum name="B_0x1" start="0x1" description="The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set" />
      </BitField>
    </Register>
    <Register start="+0x14" size="0" name="EGR" access="WriteOnly" description="event generation register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UG" description="Update generation This bit can be set by software, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action." />
        <Enum name="B_0x1" start="0x1" description="Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected)." />
      </BitField>
      <BitField start="1" size="1" name="CC1G" description="Capture/Compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.">
        <Enum name="B_0x0" start="0x0" description="No action." />
        <Enum name="B_0x1" start="0x1" description="A capture/compare event is generated on channel 1:" />
      </BitField>
      <BitField start="5" size="1" name="COMG" description="Capture/Compare control update generation This bit can be set by software, it is automatically cleared by hardware. Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="When the CCPC bit is set, it is possible to update the CCxE, CCxNE and OCxM bits" />
      </BitField>
      <BitField start="7" size="1" name="BG" description="Break generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action." />
        <Enum name="B_0x1" start="0x1" description="A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Output" access="Read/Write" description="capture/compare mode register (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Others: Reserved Note: CC1S bits are writable only when the channel is OFF (CC1E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1" />
      </BitField>
      <BitField start="2" size="1" name="OC1FE" description="Output Compare 1 fast enable This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger.">
        <Enum name="B_0x0" start="0x0" description="CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles." />
        <Enum name="B_0x1" start="0x1" description="An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode." />
      </BitField>
      <BitField start="3" size="1" name="OC1PE" description="Output Compare 1 preload enable Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.">
        <Enum name="B_0x0" start="0x0" description="Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately." />
        <Enum name="B_0x1" start="0x1" description="Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event." />
      </BitField>
      <BitField start="4" size="3" name="OC1M1" description="Output Compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. All other values: Reserved Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). In PWM mode 1 or 2, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;frozen&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode to &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;PWM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode. The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active." />
      </BitField>
      <BitField start="16" size="1" name="OC1M2" description="Output Compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. All other values: Reserved Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). In PWM mode 1 or 2, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;frozen&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode to &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;PWM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode. The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Input" access="Read/Write" description="capture/compare mode register 1 (input mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 Selection This bit-field defines the direction of the channel (input/output) as well as the used input. Others: Reserved Note: CC1S bits are writable only when the channel is OFF (CC1E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1" />
      </BitField>
      <BitField start="2" size="2" name="IC1PSC" description="Input capture 1 prescaler This bit-field defines the ratio of the prescaler acting on CC1 input (IC1). The prescaler is reset as soon as CC1E=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (TIMx_CCER register).">
        <Enum name="B_0x0" start="0x0" description="no prescaler, capture is done each time an edge is detected on the capture input." />
        <Enum name="B_0x1" start="0x1" description="capture is done once every 2 events" />
        <Enum name="B_0x2" start="0x2" description="capture is done once every 4 events" />
        <Enum name="B_0x3" start="0x3" description="capture is done once every 8 events" />
      </BitField>
      <BitField start="4" size="4" name="IC1F" description="Input capture 1 filter This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:">
        <Enum name="B_0x0" start="0x0" description="No filter, sampling is done at fDTS" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="CCER" access="Read/Write" description="capture/compare enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CC1E" description="Capture/Compare 1 output enable When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to for details.">
        <Enum name="B_0x0" start="0x0" description="Capture mode disabled / OC1 is not active (see below)" />
        <Enum name="B_0x1" start="0x1" description="Capture mode enabled / OC1 signal is output on the corresponding output pin" />
      </BitField>
      <BitField start="1" size="1" name="CC1P" description="Capture/Compare 1 output polarity When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0: non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1: inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1: non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0: this configuration is reserved, it must not be used. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated.">
        <Enum name="B_0x0" start="0x0" description="OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)" />
        <Enum name="B_0x1" start="0x1" description="OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)" />
      </BitField>
      <BitField start="2" size="1" name="CC1NE" description="Capture/Compare 1 complementary output enable">
        <Enum name="B_0x0" start="0x0" description="Off - OC1N is not active. OC1N level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits." />
        <Enum name="B_0x1" start="0x1" description="On - OC1N signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits." />
      </BitField>
      <BitField start="3" size="1" name="CC1NP" description="Capture/Compare 1 complementary output polarity CC1 channel configured as output: CC1 channel configured as input: This bit is used in conjunction with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer to the description of CC1P. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; (the channel is configured in output). On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a commutation event is generated.">
        <Enum name="B_0x0" start="0x0" description="OC1N active high" />
        <Enum name="B_0x1" start="0x1" description="OC1N active low" />
      </BitField>
    </Register>
    <Register start="+0x24" size="0" name="CNT" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CNT" description="counter value" />
      <BitField start="31" size="1" name="UIFCPY" description="UIF Copy" />
    </Register>
    <Register start="+0x28" size="0" name="PSC" access="Read/Write" description="prescaler" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="PSC" description="Prescaler value" />
    </Register>
    <Register start="+0x2C" size="0" name="ARR" access="Read/Write" description="auto-reload register" reset_value="0x0000FFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="ARR" description="Auto-reload value" />
    </Register>
    <Register start="+0x30" size="0" name="RCR" access="Read/Write" description="repetition counter register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="REP" description="Repetition counter value" />
    </Register>
    <Register start="+0x34" size="0" name="CCR1" access="Read/Write" description="capture/compare register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR1" description="Capture/Compare 1 value" />
    </Register>
    <Register start="+0x44" size="0" name="BDTR" access="Read/Write" description="break and dead-time register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="DTG" description="Dead-time generator setup This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration. DTG[7:5]=0xx =&gt; DT=DTG[7:0]x tdtg with tdtg=tDTS DTG[7:5]=10x =&gt; DT=(64+DTG[5:0])xtdtg with Tdtg=2xtDTS DTG[7:5]=110 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=8xtDTS DTG[7:5]=111 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=16xtDTS Example if TDTS=125ns (8MHz), dead-time possible values are: 0 to 15875 ns by 125 ns steps, 16 &#xc3;&#x82;&#xc2;&#xb5;s to 31750 ns by 250 ns steps, 32 &#xc3;&#x82;&#xc2;&#xb5;s to 63 &#xc3;&#x82;&#xc2;&#xb5;s by 1 &#xc3;&#x82;&#xc2;&#xb5;s steps, 64 &#xc3;&#x82;&#xc2;&#xb5;s to 126 &#xc3;&#x82;&#xc2;&#xb5;s by 2 &#xc3;&#x82;&#xc2;&#xb5;s steps Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register)." />
      <BitField start="8" size="2" name="LOCK" description="Lock configuration These bits offer a write protection against software errors. Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset.">
        <Enum name="B_0x0" start="0x0" description="LOCK OFF - No bit is write protected" />
        <Enum name="B_0x1" start="0x1" description="LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written." />
        <Enum name="B_0x2" start="0x2" description="LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written." />
        <Enum name="B_0x3" start="0x3" description="LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written." />
      </BitField>
      <BitField start="10" size="1" name="OSSI" description="Off-state selection for Idle mode This bit is used when MOE=0 on channels configured as outputs. See OC/OCN enable description for more details (enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page&#xc3;&#x82;&#xc2; 846). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="When inactive, OC/OCN outputs are disabled (OC/OCN enable output signal=0)" />
        <Enum name="B_0x1" start="0x1" description="When inactive, OC/OCN outputs are forced first with their idle level as soon as CCxE=1 or CCxNE=1. OC/OCN enable output signal=1)" />
      </BitField>
      <BitField start="11" size="1" name="OSSR" description="Off-state selection for Run mode This bit is used when MOE=1 on channels that have a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer. See OC/OCN enable description for more details (enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page&#xc3;&#x82;&#xc2; 846). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the AFIO logic, which forces a Hi-Z state)" />
        <Enum name="B_0x1" start="0x1" description="When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer)." />
      </BitField>
      <BitField start="12" size="1" name="BKE" description="Break enable 1; Break inputs (BRK and CCS clock failure event) enabled Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break inputs (BRK and CCS clock failure event) disabled" />
      </BitField>
      <BitField start="13" size="1" name="BKP" description="Break polarity Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK is active low" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK is active high" />
      </BitField>
      <BitField start="14" size="1" name="AOE" description="Automatic output enable Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="MOE can be set only by software" />
        <Enum name="B_0x1" start="0x1" description="MOE can be set by software or automatically at the next update event (if the break input is not be active)" />
      </BitField>
      <BitField start="15" size="1" name="MOE" description="Main output enable This bit is cleared asynchronously by hardware as soon as the break input is active. It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output. enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page&#xc3;&#x82;&#xc2; 846).">
        <Enum name="B_0x0" start="0x0" description="OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit." />
        <Enum name="B_0x1" start="0x1" description="OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register)See OC/OCN enable description for more details (" />
      </BitField>
      <BitField start="16" size="4" name="BKF" description="Break filter This bit-field defines the frequency used to sample BRK input and the length of the digital filter applied to BRK. The digital filter is made of an event counter in which N events are needed to validate a transition on the output: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="No filter, BRK acts asynchronously" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
      <BitField start="26" size="1" name="BKDSRM" description="Break Disarm This bit is cleared by hardware when no break source is active. The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared. Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK is armed" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK is disarmed" />
      </BitField>
      <BitField start="28" size="1" name="BKBID" description="Break Bidirectional In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices. Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK in input mode" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK in bidirectional mode" />
      </BitField>
    </Register>
    <Register start="+0x48" size="0" name="DCR" access="Read/Write" description="DMA control register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="5" name="DBA" description="DMA base address This 5-bit field defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ... Example: Let us consider the following transfer: DBL = 7 transfers and DBA = TIMx_CR1. In this case the transfer is done to/from 7 registers starting from the TIMx_CR1 address.">
        <Enum name="B_0x0" start="0x0" description="TIMx_CR1," />
        <Enum name="B_0x1" start="0x1" description="TIMx_CR2," />
        <Enum name="B_0x2" start="0x2" description="TIMx_SMCR," />
      </BitField>
      <BitField start="8" size="5" name="DBL" description="DMA burst length This 5-bit field defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below). ...">
        <Enum name="B_0x0" start="0x0" description="1 transfer," />
        <Enum name="B_0x1" start="0x1" description="2 transfers," />
        <Enum name="B_0x2" start="0x2" description="3 transfers," />
        <Enum name="B_0x11" start="0x11" description="18 transfers." />
      </BitField>
    </Register>
    <Register start="+0x4C" size="0" name="DMAR" access="Read/Write" description="DMA address for full transfer" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="DMAB" description="DMA register for burst accesses" />
    </Register>
    <Register start="+0x60" size="0" name="AF1" access="Read/Write" description="TIM17 option register 1" reset_value="0x00000001" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BKINE" description="BRK BKIN input enable This bit enables the BKIN alternate function input for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. BKIN input is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="BKIN input disabled" />
        <Enum name="B_0x1" start="0x1" description="BKIN input enabled" />
      </BitField>
      <BitField start="1" size="1" name="BKCMP1E" description="BRK COMP1 enable This bit enables the COMP1 for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. COMP1 output is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP1 input disabled" />
        <Enum name="B_0x1" start="0x1" description="COMP1 input enabled" />
      </BitField>
      <BitField start="2" size="1" name="BKCMP2E" description="BRK COMP2 enable This bit enables the COMP2 for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. COMP2 output is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP2 input disabled" />
        <Enum name="B_0x1" start="0x1" description="COMP2 input enabled" />
      </BitField>
      <BitField start="9" size="1" name="BKINP" description="BRK BKIN input polarity This bit selects the BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="BKIN input is active low" />
        <Enum name="B_0x1" start="0x1" description="BKIN input is active high" />
      </BitField>
      <BitField start="10" size="1" name="BKCMP1P" description="BRK COMP1 input polarity This bit selects the COMP1 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP1 input is active low" />
        <Enum name="B_0x1" start="0x1" description="COMP1 input is active high" />
      </BitField>
      <BitField start="11" size="1" name="BKCMP2P" description="BRK COMP2 input polarity This bit selects the COMP2 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP2 input is active low" />
        <Enum name="B_0x1" start="0x1" description="COMP2 input is active high" />
      </BitField>
    </Register>
    <Register start="+0x68" size="0" name="TISEL" access="Read/Write" description="input selection register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="TI1SEL" description="selects TI1[0] to TI1[15] input Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM16_CH1 input" />
        <Enum name="B_0x1" start="0x1" description="LSI" />
        <Enum name="B_0x2" start="0x2" description="LSE" />
        <Enum name="B_0x3" start="0x3" description="RTC wakeup" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="TIM17" start="0x40014800" description="General purpose timers">
    <Register start="+0x0" size="0" name="CR1" access="Read/Write" description="control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CEN" description="Counter enable Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.">
        <Enum name="B_0x0" start="0x0" description="Counter disabled" />
        <Enum name="B_0x1" start="0x1" description="Counter enabled" />
      </BitField>
      <BitField start="1" size="1" name="UDIS" description="Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.">
        <Enum name="B_0x0" start="0x0" description="UEV enabled. The Update (UEV) event is generated by one of the following events:" />
        <Enum name="B_0x1" start="0x1" description="UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller." />
      </BitField>
      <BitField start="2" size="1" name="URS" description="Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller">
        <Enum name="B_0x0" start="0x0" description="Any of the following events generate an update interrupt or DMA request if enabled. These events can be:" />
        <Enum name="B_0x1" start="0x1" description="Only counter overflow/underflow generates an update interrupt or DMA request if enabled." />
      </BitField>
      <BitField start="3" size="1" name="OPM" description="One pulse mode">
        <Enum name="B_0x0" start="0x0" description="Counter is not stopped at update event" />
        <Enum name="B_0x1" start="0x1" description="Counter stops counting at the next update event (clearing the bit CEN)" />
      </BitField>
      <BitField start="7" size="1" name="ARPE" description="Auto-reload preload enable">
        <Enum name="B_0x0" start="0x0" description="TIMx_ARR register is not buffered" />
        <Enum name="B_0x1" start="0x1" description="TIMx_ARR register is buffered" />
      </BitField>
      <BitField start="8" size="2" name="CKD" description="Clock division This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (TIx),">
        <Enum name="B_0x0" start="0x0" description="tDTS=tCK_INT" />
        <Enum name="B_0x1" start="0x1" description="tDTS=2*tCK_INT" />
        <Enum name="B_0x2" start="0x2" description="tDTS=4*tCK_INT" />
        <Enum name="B_0x3" start="0x3" description="Reserved, do not program this value" />
      </BitField>
      <BitField start="11" size="1" name="UIFREMAP" description="UIF status bit remapping">
        <Enum name="B_0x0" start="0x0" description="No remapping. UIF status bit is not copied to TIMx_CNT register bit 31." />
        <Enum name="B_0x1" start="0x1" description="Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CCPC" description="Capture/compare preloaded control Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="CCxE, CCxNE and OCxM bits are not preloaded" />
        <Enum name="B_0x1" start="0x1" description="CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when COM bit is set." />
      </BitField>
      <BitField start="2" size="1" name="CCUS" description="Capture/compare control update selection Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only." />
        <Enum name="B_0x1" start="0x1" description="When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI." />
      </BitField>
      <BitField start="3" size="1" name="CCDS" description="Capture/compare DMA selection">
        <Enum name="B_0x0" start="0x0" description="CCx DMA request sent when CCx event occurs" />
        <Enum name="B_0x1" start="0x1" description="CCx DMA requests sent when update event occurs" />
      </BitField>
      <BitField start="8" size="1" name="OIS1" description="Output Idle state 1 (OC1 output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="OC1=0 (after a dead-time if OC1N is implemented) when MOE=0" />
        <Enum name="B_0x1" start="0x1" description="OC1=1 (after a dead-time if OC1N is implemented) when MOE=0" />
      </BitField>
      <BitField start="9" size="1" name="OIS1N" description="Output Idle state 1 (OC1N output) Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="OC1N=0 after a dead-time when MOE=0" />
        <Enum name="B_0x1" start="0x1" description="OC1N=1 after a dead-time when MOE=0" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="DIER" access="Read/Write" description="DMA/Interrupt enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIE" description="Update interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Update interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Update interrupt enabled" />
      </BitField>
      <BitField start="1" size="1" name="CC1IE" description="Capture/Compare 1 interrupt enable">
        <Enum name="B_0x0" start="0x0" description="CC1 interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="CC1 interrupt enabled" />
      </BitField>
      <BitField start="5" size="1" name="COMIE" description="COM interrupt enable">
        <Enum name="B_0x0" start="0x0" description="COM interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="COM interrupt enabled" />
      </BitField>
      <BitField start="7" size="1" name="BIE" description="Break interrupt enable">
        <Enum name="B_0x0" start="0x0" description="Break interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="Break interrupt enabled" />
      </BitField>
      <BitField start="8" size="1" name="UDE" description="Update DMA request enable">
        <Enum name="B_0x0" start="0x0" description="Update DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="Update DMA request enabled" />
      </BitField>
      <BitField start="9" size="1" name="CC1DE" description="Capture/Compare 1 DMA request enable">
        <Enum name="B_0x0" start="0x0" description="CC1 DMA request disabled" />
        <Enum name="B_0x1" start="0x1" description="CC1 DMA request enabled" />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="SR" access="Read/Write" description="status register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UIF" description="Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No update occurred." />
        <Enum name="B_0x1" start="0x1" description="Update interrupt pending. This bit is set by hardware when the registers are updated:" />
      </BitField>
      <BitField start="1" size="1" name="CC1IF" description="Capture/Compare 1 interrupt flag This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only). If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description. If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="No compare match / No input capture occurred" />
        <Enum name="B_0x1" start="0x1" description="A compare match or an input capture occurred" />
      </BitField>
      <BitField start="5" size="1" name="COMIF" description="COM interrupt flag This flag is set by hardware on a COM event (once the capture/compare control bits &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93;CCxE, CCxNE, OCxM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; have been updated). It is cleared by software.">
        <Enum name="B_0x0" start="0x0" description="No COM event occurred" />
        <Enum name="B_0x1" start="0x1" description="COM interrupt pending" />
      </BitField>
      <BitField start="7" size="1" name="BIF" description="Break interrupt flag This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active.">
        <Enum name="B_0x0" start="0x0" description="No break event occurred" />
        <Enum name="B_0x1" start="0x1" description="An active level has been detected on the break input" />
      </BitField>
      <BitField start="9" size="1" name="CC1OF" description="Capture/Compare 1 overcapture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;.">
        <Enum name="B_0x0" start="0x0" description="No overcapture has been detected" />
        <Enum name="B_0x1" start="0x1" description="The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set" />
      </BitField>
    </Register>
    <Register start="+0x14" size="0" name="EGR" access="WriteOnly" description="event generation register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UG" description="Update generation This bit can be set by software, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action." />
        <Enum name="B_0x1" start="0x1" description="Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected)." />
      </BitField>
      <BitField start="1" size="1" name="CC1G" description="Capture/Compare 1 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware. If channel CC1 is configured as output: CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled. If channel CC1 is configured as input: The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.">
        <Enum name="B_0x0" start="0x0" description="No action." />
        <Enum name="B_0x1" start="0x1" description="A capture/compare event is generated on channel 1:" />
      </BitField>
      <BitField start="5" size="1" name="COMG" description="Capture/Compare control update generation This bit can be set by software, it is automatically cleared by hardware. Note: This bit acts only on channels that have a complementary output.">
        <Enum name="B_0x0" start="0x0" description="No action" />
        <Enum name="B_0x1" start="0x1" description="When the CCPC bit is set, it is possible to update the CCxE, CCxNE and OCxM bits" />
      </BitField>
      <BitField start="7" size="1" name="BG" description="Break generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No action." />
        <Enum name="B_0x1" start="0x1" description="A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Output" access="Read/Write" description="capture/compare mode register (output mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Others: Reserved Note: CC1S bits are writable only when the channel is OFF (CC1E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1" />
      </BitField>
      <BitField start="2" size="1" name="OC1FE" description="Output Compare 1 fast enable This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger.">
        <Enum name="B_0x0" start="0x0" description="CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles." />
        <Enum name="B_0x1" start="0x1" description="An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode." />
      </BitField>
      <BitField start="3" size="1" name="OC1PE" description="Output Compare 1 preload enable Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.">
        <Enum name="B_0x0" start="0x0" description="Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately." />
        <Enum name="B_0x1" start="0x1" description="Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event." />
      </BitField>
      <BitField start="4" size="3" name="OC1M1" description="Output Compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. All other values: Reserved Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). In PWM mode 1 or 2, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;frozen&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode to &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;PWM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode. The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active." />
      </BitField>
      <BitField start="16" size="1" name="OC1M2" description="Output Compare 1 mode These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits. All other values: Reserved Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (the channel is configured in output). In PWM mode 1 or 2, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;frozen&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode to &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;PWM&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; mode. The OC1M[3] bit is not contiguous, located in bit 16.">
        <Enum name="B_0x0" start="0x0" description="Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs." />
        <Enum name="B_0x1" start="0x1" description="Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x2" start="0x2" description="Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1)." />
        <Enum name="B_0x3" start="0x3" description="Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1." />
        <Enum name="B_0x4" start="0x4" description="Force inactive level - OC1REF is forced low." />
        <Enum name="B_0x5" start="0x5" description="Force active level - OC1REF is forced high." />
        <Enum name="B_0x6" start="0x6" description="PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive." />
        <Enum name="B_0x7" start="0x7" description="PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="CCMR1_Input" access="Read/Write" description="capture/compare mode register 1 (input mode)" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="2" name="CC1S" description="Capture/Compare 1 Selection This bit-field defines the direction of the channel (input/output) as well as the used input. Others: Reserved Note: CC1S bits are writable only when the channel is OFF (CC1E = '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; in TIMx_CCER).">
        <Enum name="B_0x0" start="0x0" description="CC1 channel is configured as output" />
        <Enum name="B_0x1" start="0x1" description="CC1 channel is configured as input, IC1 is mapped on TI1" />
      </BitField>
      <BitField start="2" size="2" name="IC1PSC" description="Input capture 1 prescaler This bit-field defines the ratio of the prescaler acting on CC1 input (IC1). The prescaler is reset as soon as CC1E=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; (TIMx_CCER register).">
        <Enum name="B_0x0" start="0x0" description="no prescaler, capture is done each time an edge is detected on the capture input." />
        <Enum name="B_0x1" start="0x1" description="capture is done once every 2 events" />
        <Enum name="B_0x2" start="0x2" description="capture is done once every 4 events" />
        <Enum name="B_0x3" start="0x3" description="capture is done once every 8 events" />
      </BitField>
      <BitField start="4" size="4" name="IC1F" description="Input capture 1 filter This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:">
        <Enum name="B_0x0" start="0x0" description="No filter, sampling is done at fDTS" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="CCER" access="Read/Write" description="capture/compare enable register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="CC1E" description="Capture/Compare 1 output enable When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to for details.">
        <Enum name="B_0x0" start="0x0" description="Capture mode disabled / OC1 is not active (see below)" />
        <Enum name="B_0x1" start="0x1" description="Capture mode enabled / OC1 signal is output on the corresponding output pin" />
      </BitField>
      <BitField start="1" size="1" name="CC1P" description="Capture/Compare 1 output polarity When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations. CC1NP=0, CC1P=0: non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode). CC1NP=0, CC1P=1: inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode). CC1NP=1, CC1P=1: non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode. CC1NP=1, CC1P=0: this configuration is reserved, it must not be used. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register). On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated.">
        <Enum name="B_0x0" start="0x0" description="OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)" />
        <Enum name="B_0x1" start="0x1" description="OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)" />
      </BitField>
      <BitField start="2" size="1" name="CC1NE" description="Capture/Compare 1 complementary output enable">
        <Enum name="B_0x0" start="0x0" description="Off - OC1N is not active. OC1N level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits." />
        <Enum name="B_0x1" start="0x1" description="On - OC1N signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits." />
      </BitField>
      <BitField start="3" size="1" name="CC1NP" description="Capture/Compare 1 complementary output polarity CC1 channel configured as output: CC1 channel configured as input: This bit is used in conjunction with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer to the description of CC1P. Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; (the channel is configured in output). On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a commutation event is generated.">
        <Enum name="B_0x0" start="0x0" description="OC1N active high" />
        <Enum name="B_0x1" start="0x1" description="OC1N active low" />
      </BitField>
    </Register>
    <Register start="+0x24" size="0" name="CNT" access="Read/Write" description="counter" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CNT" description="counter value" />
      <BitField start="31" size="1" name="UIFCPY" description="UIF Copy" />
    </Register>
    <Register start="+0x28" size="0" name="PSC" access="Read/Write" description="prescaler" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="PSC" description="Prescaler value" />
    </Register>
    <Register start="+0x2C" size="0" name="ARR" access="Read/Write" description="auto-reload register" reset_value="0x0000FFFF" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="ARR" description="Auto-reload value" />
    </Register>
    <Register start="+0x30" size="0" name="RCR" access="Read/Write" description="repetition counter register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="REP" description="Repetition counter value" />
    </Register>
    <Register start="+0x34" size="0" name="CCR1" access="Read/Write" description="capture/compare register 1" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="CCR1" description="Capture/Compare 1 value" />
    </Register>
    <Register start="+0x44" size="0" name="BDTR" access="Read/Write" description="break and dead-time register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="DTG" description="Dead-time generator setup This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration. DTG[7:5]=0xx =&gt; DT=DTG[7:0]x tdtg with tdtg=tDTS DTG[7:5]=10x =&gt; DT=(64+DTG[5:0])xtdtg with Tdtg=2xtDTS DTG[7:5]=110 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=8xtDTS DTG[7:5]=111 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=16xtDTS Example if TDTS=125ns (8MHz), dead-time possible values are: 0 to 15875 ns by 125 ns steps, 16 &#xc3;&#x82;&#xc2;&#xb5;s to 31750 ns by 250 ns steps, 32 &#xc3;&#x82;&#xc2;&#xb5;s to 63 &#xc3;&#x82;&#xc2;&#xb5;s by 1 &#xc3;&#x82;&#xc2;&#xb5;s steps, 64 &#xc3;&#x82;&#xc2;&#xb5;s to 126 &#xc3;&#x82;&#xc2;&#xb5;s by 2 &#xc3;&#x82;&#xc2;&#xb5;s steps Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register)." />
      <BitField start="8" size="2" name="LOCK" description="Lock configuration These bits offer a write protection against software errors. Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset.">
        <Enum name="B_0x0" start="0x0" description="LOCK OFF - No bit is write protected" />
        <Enum name="B_0x1" start="0x1" description="LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written." />
        <Enum name="B_0x2" start="0x2" description="LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written." />
        <Enum name="B_0x3" start="0x3" description="LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written." />
      </BitField>
      <BitField start="10" size="1" name="OSSI" description="Off-state selection for Idle mode This bit is used when MOE=0 on channels configured as outputs. See OC/OCN enable description for more details (enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page&#xc3;&#x82;&#xc2; 846). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="When inactive, OC/OCN outputs are disabled (OC/OCN enable output signal=0)" />
        <Enum name="B_0x1" start="0x1" description="When inactive, OC/OCN outputs are forced first with their idle level as soon as CCxE=1 or CCxNE=1. OC/OCN enable output signal=1)" />
      </BitField>
      <BitField start="11" size="1" name="OSSR" description="Off-state selection for Run mode This bit is used when MOE=1 on channels that have a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer. See OC/OCN enable description for more details (enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page&#xc3;&#x82;&#xc2; 846). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the AFIO logic, which forces a Hi-Z state)" />
        <Enum name="B_0x1" start="0x1" description="When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer)." />
      </BitField>
      <BitField start="12" size="1" name="BKE" description="Break enable 1; Break inputs (BRK and CCS clock failure event) enabled Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break inputs (BRK and CCS clock failure event) disabled" />
      </BitField>
      <BitField start="13" size="1" name="BKP" description="Break polarity Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK is active low" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK is active high" />
      </BitField>
      <BitField start="14" size="1" name="AOE" description="Automatic output enable Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="MOE can be set only by software" />
        <Enum name="B_0x1" start="0x1" description="MOE can be set by software or automatically at the next update event (if the break input is not be active)" />
      </BitField>
      <BitField start="15" size="1" name="MOE" description="Main output enable This bit is cleared asynchronously by hardware as soon as the break input is active. It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output. enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on page&#xc3;&#x82;&#xc2; 846).">
        <Enum name="B_0x0" start="0x0" description="OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit." />
        <Enum name="B_0x1" start="0x1" description="OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register)See OC/OCN enable description for more details (" />
      </BitField>
      <BitField start="16" size="4" name="BKF" description="Break filter This bit-field defines the frequency used to sample BRK input and the length of the digital filter applied to BRK. The digital filter is made of an event counter in which N events are needed to validate a transition on the output: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="No filter, BRK acts asynchronously" />
        <Enum name="B_0x1" start="0x1" description="fSAMPLING=fCK_INT, N=2" />
        <Enum name="B_0x2" start="0x2" description="fSAMPLING=fCK_INT, N=4" />
        <Enum name="B_0x3" start="0x3" description="fSAMPLING=fCK_INT, N=8" />
        <Enum name="B_0x4" start="0x4" description="fSAMPLING=fDTS/2, N=6" />
        <Enum name="B_0x5" start="0x5" description="fSAMPLING=fDTS/2, N=8" />
        <Enum name="B_0x6" start="0x6" description="fSAMPLING=fDTS/4, N=6" />
        <Enum name="B_0x7" start="0x7" description="fSAMPLING=fDTS/4, N=8" />
        <Enum name="B_0x8" start="0x8" description="fSAMPLING=fDTS/8, N=6" />
        <Enum name="B_0x9" start="0x9" description="fSAMPLING=fDTS/8, N=8" />
        <Enum name="B_0xA" start="0xA" description="fSAMPLING=fDTS/16, N=5" />
        <Enum name="B_0xB" start="0xB" description="fSAMPLING=fDTS/16, N=6" />
        <Enum name="B_0xC" start="0xC" description="fSAMPLING=fDTS/16, N=8" />
        <Enum name="B_0xD" start="0xD" description="fSAMPLING=fDTS/32, N=5" />
        <Enum name="B_0xE" start="0xE" description="fSAMPLING=fDTS/32, N=6" />
        <Enum name="B_0xF" start="0xF" description="fSAMPLING=fDTS/32, N=8" />
      </BitField>
      <BitField start="26" size="1" name="BKDSRM" description="Break Disarm This bit is cleared by hardware when no break source is active. The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared. Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK is armed" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK is disarmed" />
      </BitField>
      <BitField start="28" size="1" name="BKBID" description="Break Bidirectional In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices. Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.">
        <Enum name="B_0x0" start="0x0" description="Break input BRK in input mode" />
        <Enum name="B_0x1" start="0x1" description="Break input BRK in bidirectional mode" />
      </BitField>
    </Register>
    <Register start="+0x48" size="0" name="DCR" access="Read/Write" description="DMA control register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="5" name="DBA" description="DMA base address This 5-bit field defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ... Example: Let us consider the following transfer: DBL = 7 transfers and DBA = TIMx_CR1. In this case the transfer is done to/from 7 registers starting from the TIMx_CR1 address.">
        <Enum name="B_0x0" start="0x0" description="TIMx_CR1," />
        <Enum name="B_0x1" start="0x1" description="TIMx_CR2," />
        <Enum name="B_0x2" start="0x2" description="TIMx_SMCR," />
      </BitField>
      <BitField start="8" size="5" name="DBL" description="DMA burst length This 5-bit field defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below). ...">
        <Enum name="B_0x0" start="0x0" description="1 transfer," />
        <Enum name="B_0x1" start="0x1" description="2 transfers," />
        <Enum name="B_0x2" start="0x2" description="3 transfers," />
        <Enum name="B_0x11" start="0x11" description="18 transfers." />
      </BitField>
    </Register>
    <Register start="+0x4C" size="0" name="DMAR" access="Read/Write" description="DMA address for full transfer" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="DMAB" description="DMA register for burst accesses" />
    </Register>
    <Register start="+0x60" size="0" name="AF1" access="Read/Write" description="TIM17 option register 1" reset_value="0x00000001" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BKINE" description="BRK BKIN input enable This bit enables the BKIN alternate function input for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. BKIN input is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="BKIN input disabled" />
        <Enum name="B_0x1" start="0x1" description="BKIN input enabled" />
      </BitField>
      <BitField start="1" size="1" name="BKCMP1E" description="BRK COMP1 enable This bit enables the COMP1 for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. COMP1 output is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP1 input disabled" />
        <Enum name="B_0x1" start="0x1" description="COMP1 input enabled" />
      </BitField>
      <BitField start="2" size="1" name="BKCMP2E" description="BRK COMP2 enable This bit enables the COMP2 for the timer&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;s BRK input. COMP2 output is 'ORed&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; with the other BRK sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP2 input disabled" />
        <Enum name="B_0x1" start="0x1" description="COMP2 input enabled" />
      </BitField>
      <BitField start="9" size="1" name="BKINP" description="BRK BKIN input polarity This bit selects the BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="BKIN input is active low" />
        <Enum name="B_0x1" start="0x1" description="BKIN input is active high" />
      </BitField>
      <BitField start="10" size="1" name="BKCMP1P" description="BRK COMP1 input polarity This bit selects the COMP1 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP1 input is active low" />
        <Enum name="B_0x1" start="0x1" description="COMP1 input is active high" />
      </BitField>
      <BitField start="11" size="1" name="BKCMP2P" description="BRK COMP2 input polarity This bit selects the COMP2 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).">
        <Enum name="B_0x0" start="0x0" description="COMP2 input is active low" />
        <Enum name="B_0x1" start="0x1" description="COMP2 input is active high" />
      </BitField>
    </Register>
    <Register start="+0x68" size="0" name="TISEL" access="Read/Write" description="input selection register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="TI1SEL" description="selects TI1[0] to TI1[15] input Others: Reserved">
        <Enum name="B_0x0" start="0x0" description="TIM16_CH1 input" />
        <Enum name="B_0x1" start="0x1" description="LSI" />
        <Enum name="B_0x2" start="0x2" description="LSE" />
        <Enum name="B_0x3" start="0x3" description="RTC wakeup" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="USART1" start="0x40013800" description="Universal synchronous asynchronous receiver transmitter">
    <Register start="+0x0" size="0" name="CR1_FIFO_ENABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXFNEIE" description="RXFIFO not empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXFNFIE" description="TXFIFO not full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXFNF =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
      <BitField start="30" size="1" name="TXFEIE" description="TXFIFO empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="31" size="1" name="RXFFIE" description="RXFIFO Full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when RXFF = 1 in the USART_ISR register" />
      </BitField>
    </Register>
    <Register start="+0x0" size="0" name="CR1_FIFO_DISABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXNEIE" description="Receive data register not empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXEIE" description="Transmit data register empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXE =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="Control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SLVEN" description="Synchronous Slave mode enable When the SLVEN bit is set, the synchronous slave mode is enabled. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled." />
        <Enum name="B_0x1" start="0x1" description="Slave mode enabled." />
      </BitField>
      <BitField start="3" size="1" name="DIS_NSS" description="When the DIS_NSS bit is set, the NSS pin input is ignored. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="SPI slave selection depends on NSS input pin." />
        <Enum name="B_0x1" start="0x1" description="SPI slave is always selected and NSS input pin is ignored." />
      </BitField>
      <BitField start="4" size="1" name="ADDM7" description="7-bit Address Detection/4-bit Address Detection This bit is for selection between 4-bit address detection or 7-bit address detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.">
        <Enum name="B_0x0" start="0x0" description="4-bit address detection" />
        <Enum name="B_0x1" start="0x1" description="7-bit address detection (in 8-bit data mode)" />
      </BitField>
      <BitField start="5" size="1" name="LBDL" description="LIN break detection length This bit is for selection between 11 bit or 10 bit break detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="10-bit break detection" />
        <Enum name="B_0x1" start="0x1" description="11-bit break detection" />
      </BitField>
      <BitField start="6" size="1" name="LBDIE" description="LIN break detection interrupt enable Break interrupt mask (break detection using break delimiter). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever LBDF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="LBCL" description="Last bit clock pulse This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode. The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The clock pulse of the last data bit is not output to the SCLK pin" />
        <Enum name="B_0x1" start="0x1" description="The clock pulse of the last data bit is output to the SCLK pin" />
      </BitField>
      <BitField start="9" size="1" name="CPHA" description="Clock phase This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see and ) This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The first clock transition is the first data capture edge" />
        <Enum name="B_0x1" start="0x1" description="The second clock transition is the first data capture edge" />
      </BitField>
      <BitField start="10" size="1" name="CPOL" description="Clock polarity This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Steady low value on SCLK pin outside transmission window" />
        <Enum name="B_0x1" start="0x1" description="Steady high value on SCLK pin outside transmission window" />
      </BitField>
      <BitField start="11" size="1" name="CLKEN" description="Clock enable This bit enables the user to enable the SCLK pin. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to . In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected: UE = 0 SCEN = 1 GTPR configuration CLKEN= 1 UE = 1">
        <Enum name="B_0x0" start="0x0" description="SCLK pin disabled" />
        <Enum name="B_0x1" start="0x1" description="SCLK pin enabled" />
      </BitField>
      <BitField start="12" size="2" name="STOP" description="stop bits These bits are used for programming the stop bits. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="1 stop bit" />
        <Enum name="B_0x1" start="0x1" description="0.5 stop bit." />
        <Enum name="B_0x2" start="0x2" description="2 stop bits" />
        <Enum name="B_0x3" start="0x3" description="1.5 stop bits" />
      </BitField>
      <BitField start="14" size="1" name="LINEN" description="LIN mode enable This bit is set and cleared by software. The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN mode disabled" />
        <Enum name="B_0x1" start="0x1" description="LIN mode enabled" />
      </BitField>
      <BitField start="15" size="1" name="SWAP" description="Swap TX/RX pins This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX/RX pins are used as defined in standard pinout" />
        <Enum name="B_0x1" start="0x1" description="The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART." />
      </BitField>
      <BitField start="16" size="1" name="RXINV" description="RX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the RX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="17" size="1" name="TXINV" description="TX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the TX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="18" size="1" name="DATAINV" description="Binary data inversion This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)" />
        <Enum name="B_0x1" start="0x1" description="Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H). The parity bit is also inverted." />
      </BitField>
      <BitField start="19" size="1" name="MSBFIRST" description="Most significant bit first This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="data is transmitted/received with data bit 0 first, following the start bit." />
        <Enum name="B_0x1" start="0x1" description="data is transmitted/received with the MSB (bit 7/8) first, following the start bit." />
      </BitField>
      <BitField start="20" size="1" name="ABREN" description="Auto baud rate enable This bit is set and cleared by software. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Auto baud rate detection is disabled." />
        <Enum name="B_0x1" start="0x1" description="Auto baud rate detection is enabled." />
      </BitField>
      <BitField start="21" size="2" name="ABRMOD" description="Auto baud rate mode These bits are set and cleared by software. This bitfield can only be written when ABREN = 0 or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If DATAINV&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 and/or MSBFIRST&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST) If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Measurement of the start bit is used to detect the baud rate." />
        <Enum name="B_0x1" start="0x1" description="Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)" />
        <Enum name="B_0x2" start="0x2" description="0x7F frame detection." />
        <Enum name="B_0x3" start="0x3" description="0x55 frame detection" />
      </BitField>
      <BitField start="23" size="1" name="RTOEN" description="Receiver timeout enable This bit is set and cleared by software. When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register). Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver timeout feature disabled." />
        <Enum name="B_0x1" start="0x1" description="Receiver timeout feature enabled." />
      </BitField>
      <BitField start="24" size="8" name="ADD" description="Address of the USART node ADD[7:4]: These bits give the address of the USART node or a character code to be recognized. They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). ADD[3:0]: These bits give the address of the USART node or a character code to be recognized. They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
    </Register>
    <Register start="+0x8" size="0" name="CR3" access="Read/Write" description="Control register 3" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EIE" description="Error interrupt enable Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or ORE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or NE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or UDR = 1 in the USART_ISR register).">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in the USART_ISR register." />
      </BitField>
      <BitField start="1" size="1" name="IREN" description="IrDA mode enable This bit is set and cleared by software. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="IrDA disabled" />
        <Enum name="B_0x1" start="0x1" description="IrDA enabled" />
      </BitField>
      <BitField start="2" size="1" name="IRLP" description="IrDA low-power This bit is used for selecting between normal and low-power IrDA modes This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Normal mode" />
        <Enum name="B_0x1" start="0x1" description="Low-power mode" />
      </BitField>
      <BitField start="3" size="1" name="HDSEL" description="Half-duplex selection Selection of Single-wire Half-duplex mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Half duplex mode is not selected" />
        <Enum name="B_0x1" start="0x1" description="Half duplex mode is selected" />
      </BitField>
      <BitField start="4" size="1" name="NACK" description="Smartcard NACK enable This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="NACK transmission in case of parity error is disabled" />
        <Enum name="B_0x1" start="0x1" description="NACK transmission during parity error is enabled" />
      </BitField>
      <BitField start="5" size="1" name="SCEN" description="Smartcard mode enable This bit is used for enabling Smartcard mode. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Smartcard Mode disabled" />
        <Enum name="B_0x1" start="0x1" description="Smartcard Mode enabled" />
      </BitField>
      <BitField start="6" size="1" name="DMAR" description="DMA enable receiver This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for reception" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for reception" />
      </BitField>
      <BitField start="7" size="1" name="DMAT" description="DMA enable transmitter This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for transmission" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for transmission" />
      </BitField>
      <BitField start="8" size="1" name="RTSE" description="RTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="RTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received." />
      </BitField>
      <BitField start="9" size="1" name="CTSE" description="CTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="CTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted." />
      </BitField>
      <BitField start="10" size="1" name="CTSIE" description="CTS interrupt enable Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever CTSIF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="11" size="1" name="ONEBIT" description="One sample bit method enable This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Three sample bit method" />
        <Enum name="B_0x1" start="0x1" description="One sample bit method" />
      </BitField>
      <BitField start="12" size="1" name="OVRDIS" description="Overrun Disable This bit is used to disable the receive overrun detection. the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: This control bit enables checking the communication flow w/o reading the data">
        <Enum name="B_0x0" start="0x0" description="Overrun Error Flag, ORE, is set when received data is not read before receiving new data." />
        <Enum name="B_0x1" start="0x1" description="Overrun functionality is disabled. If new data is received while the RXNE flag is still set" />
      </BitField>
      <BitField start="13" size="1" name="DDRE" description="DMA Disable on Reception Error This bit can only be written when the USART is disabled (UE=0). Note: The reception errors are: parity error, framing error or noise error.">
        <Enum name="B_0x0" start="0x0" description="DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode)." />
        <Enum name="B_0x1" start="0x1" description="DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag." />
      </BitField>
      <BitField start="14" size="1" name="DEM" description="Driver enable mode This bit enables the user to activate the external transceiver control, through the DE signal. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="DE function is disabled." />
        <Enum name="B_0x1" start="0x1" description="DE function is enabled. The DE signal is output on the RTS pin." />
      </BitField>
      <BitField start="15" size="1" name="DEP" description="Driver enable polarity selection This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="DE signal is active high." />
        <Enum name="B_0x1" start="0x1" description="DE signal is active low." />
      </BitField>
      <BitField start="17" size="3" name="SCARCNT" description="Smartcard auto-retry count This bitfield specifies the number of retries for transmission and reception in Smartcard mode. In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set). In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set). This bitfield must be programmed only when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). When the USART is enabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), this bitfield may only be written to 0x0, in order to stop retransmission. Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="retransmission disabled - No automatic retransmission in transmit mode." />
        <Enum name="B_0x1" start="0x1" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x2" start="0x2" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x3" start="0x3" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x4" start="0x4" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x5" start="0x5" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x6" start="0x6" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x7" start="0x7" description="number of automatic retransmission attempts (before signaling error)" />
      </BitField>
      <BitField start="20" size="2" name="WUS" description="Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="WUF active on address match (as defined by ADD[7:0] and ADDM7)" />
        <Enum name="B_0x2" start="0x2" description="WUF active on start bit detection" />
        <Enum name="B_0x3" start="0x3" description="WUF active on RXNE/RXFNE." />
      </BitField>
      <BitField start="22" size="1" name="WUFIE" description="Wakeup from low-power mode interrupt enable This bit is set and cleared by software. Note: WUFIE must be set before entering in low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever WUF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="23" size="1" name="TXFTIE" description="TXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG." />
      </BitField>
      <BitField start="24" size="1" name="TCBGTIE" description="Transmission Complete before guard time, interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TCBGT=1 in the USART_ISR register" />
      </BitField>
      <BitField start="25" size="3" name="RXFTCFG" description="Receive FIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="Receive FIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="Receive FIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="Receive FIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="Receive FIFO becomes full" />
      </BitField>
      <BitField start="28" size="1" name="RXFTIE" description="RXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG." />
      </BitField>
      <BitField start="29" size="3" name="TXFTCFG" description="TXFIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="TXFIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="TXFIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="TXFIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="TXFIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="TXFIFO becomes empty" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="BRR" access="Read/Write" description="Baud rate register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="BRR" description="USART baud rate" />
    </Register>
    <Register start="+0x10" size="0" name="GTPR" access="Read/Write" description="Guard time and prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="PSC" description="Prescaler value In IrDA low-power and normal IrDA mode: PSC[7:0] = IrDA Normal and Low-Power baud rate PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits): In Smartcard mode: PSC[4:0]&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; Prescaler value PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency: ... 0010&#xc3;&#x82;&#xc2; 0000: Divides the source clock by 32 (IrDA mode) ... 1111&#xc3;&#x82;&#xc2; 1111: Divides the source clock by 255 (IrDA mode) This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: Bits [7:5] must be kept cleared if Smartcard mode is used. This bitfield is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; when the Smartcard and IrDA modes are not supported. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Reserved - do not program this value" />
        <Enum name="B_0x1" start="0x1" description="Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)" />
        <Enum name="B_0x2" start="0x2" description="Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)" />
        <Enum name="B_0x3" start="0x3" description="Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)" />
        <Enum name="B_0x1F" start="0x1F" description="Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)" />
      </BitField>
      <BitField start="8" size="8" name="GT" description="Guard time value This bitfield is used to program the Guard time value in terms of number of baud clock periods. This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
    </Register>
    <Register start="+0x14" size="0" name="RTOR" access="Read/Write" description="Receiver timeout register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="24" name="RTO" description="Receiver timeout value" />
      <BitField start="24" size="8" name="BLEN" description="Block Length" />
    </Register>
    <Register start="+0x18" size="0" name="RQR" access="WriteOnly" description="Request register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ABRRQ" description="Auto baud rate request Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="1" size="1" name="SBKRQ" description="Send break request Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available. Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit." />
      <BitField start="2" size="1" name="MMRQ" description="Mute mode request Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag." />
      <BitField start="3" size="1" name="RXFRQ" description="Receive data flush request Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE. This enables to discard the received data without reading them, and avoid an overrun condition." />
      <BitField start="4" size="1" name="TXFRQ" description="Transmit data flush request When FIFO mode is disabled, writing '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes. Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register." />
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_ENABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x008000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861). This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE = 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXFNE" description="RXFIFO not empty RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO. RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXFNF" description="TXFIFO not full TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR. An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register. Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time). This bit is used during single buffer transmission.">
        <Enum name="B_0x0" start="0x0" description="Transmit FIFO is full" />
        <Enum name="B_0x1" start="0x1" description="Transmit FIFO is not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXFNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="23" size="1" name="TXFE" description="TXFIFO empty This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register. An interrupt is generated if the TXFEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 30) in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO not empty." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO empty." />
      </BitField>
      <BitField start="24" size="1" name="RXFF" description="RXFIFO full This bit is set by hardware when the number of received data corresponds to RXFIFO&#xc3;&#x82;&#xc2; size&#xc3;&#x82;&#xc2; +&#xc3;&#x82;&#xc2; 1 (RXFIFO full + 1 data in the USART_RDR register. An interrupt is generated if the RXFFIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="RXFIFO not full." />
        <Enum name="B_0x1" start="0x1" description="RXFIFO Full." />
      </BitField>
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
      <BitField start="26" size="1" name="RXFT" description="RXFIFO threshold flag This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 27) in the USART_CR3 register. Note: When the RXFTCFG threshold is configured to '101&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reached the programmed threshold." />
      </BitField>
      <BitField start="27" size="1" name="TXFT" description="TXFIFO threshold flag This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 31) in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reached the programmed threshold." />
      </BitField>
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_DISABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x000000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861).">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXNE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXNE" description="Read data register not empty RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXE" description="Transmit data register empty TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 mode, in case of transmission failure). An interrupt is generated if the TXEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data register full" />
        <Enum name="B_0x1" start="0x1" description="Data register not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="ICR" access="WriteOnly" description="Interrupt flag clear register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PECF" description="Parity error clear flag Writing 1 to this bit clears the PE flag in the USART_ISR register." />
      <BitField start="1" size="1" name="FECF" description="Framing error clear flag Writing 1 to this bit clears the FE flag in the USART_ISR register." />
      <BitField start="2" size="1" name="NECF" description="Noise detected clear flag Writing 1 to this bit clears the NE flag in the USART_ISR register." />
      <BitField start="3" size="1" name="ORECF" description="Overrun error clear flag Writing 1 to this bit clears the ORE flag in the USART_ISR register." />
      <BitField start="4" size="1" name="IDLECF" description="Idle line detected clear flag Writing 1 to this bit clears the IDLE flag in the USART_ISR register." />
      <BitField start="5" size="1" name="TXFECF" description="TXFIFO empty clear flag Writing 1 to this bit clears the TXFE flag in the USART_ISR register." />
      <BitField start="6" size="1" name="TCCF" description="Transmission complete clear flag Writing 1 to this bit clears the TC flag in the USART_ISR register." />
      <BitField start="7" size="1" name="TCBGTCF" description="Transmission complete before Guard time clear flag Writing 1 to this bit clears the TCBGT flag in the USART_ISR register." />
      <BitField start="8" size="1" name="LBDCF" description="LIN break detection clear flag Writing 1 to this bit clears the LBDF flag in the USART_ISR register. Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="9" size="1" name="CTSCF" description="CTS clear flag Writing 1 to this bit clears the CTSIF flag in the USART_ISR register. Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="11" size="1" name="RTOCF" description="Receiver timeout clear flag Writing 1 to this bit clears the RTOF flag in the USART_ISR register. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
      <BitField start="12" size="1" name="EOBCF" description="End of block clear flag Writing 1 to this bit clears the EOBF flag in the USART_ISR register. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="13" size="1" name="UDRCF" description="SPI slave underrun clear flag Writing 1 to this bit clears the UDRF flag in the USART_ISR register. Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to" />
      <BitField start="17" size="1" name="CMCF" description="Character match clear flag Writing 1 to this bit clears the CMF flag in the USART_ISR register." />
      <BitField start="20" size="1" name="WUCF" description="Wakeup from low-power mode clear flag Writing 1 to this bit clears the WUF flag in the USART_ISR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
    </Register>
    <Register start="+0x24" size="0" name="RDR" access="ReadOnly" description="Receive data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="RDR" description="Receive data value" />
    </Register>
    <Register start="+0x28" size="0" name="TDR" access="Read/Write" description="Transmit data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="TDR" description="Transmit data value" />
    </Register>
    <Register start="+0x2C" size="0" name="PRESC" access="Read/Write" description="Prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="PRESCALER" description="Clock prescaler The USART input clock can be divided by a prescaler factor: Remaining combinations: Reserved Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.">
        <Enum name="B_0x0" start="0x0" description="input clock not divided" />
        <Enum name="B_0x1" start="0x1" description="input clock divided by 2" />
        <Enum name="B_0x2" start="0x2" description="input clock divided by 4" />
        <Enum name="B_0x3" start="0x3" description="input clock divided by 6" />
        <Enum name="B_0x4" start="0x4" description="input clock divided by 8" />
        <Enum name="B_0x5" start="0x5" description="input clock divided by 10" />
        <Enum name="B_0x6" start="0x6" description="input clock divided by 12" />
        <Enum name="B_0x7" start="0x7" description="input clock divided by 16" />
        <Enum name="B_0x8" start="0x8" description="input clock divided by 32" />
        <Enum name="B_0x9" start="0x9" description="input clock divided by 64" />
        <Enum name="B_0xA" start="0xA" description="input clock divided by 128" />
        <Enum name="B_0xB" start="0xB" description="input clock divided by 256" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="USART2" start="0x40004400" description="Universal synchronous asynchronous receiver transmitter">
    <Register start="+0x0" size="0" name="CR1_FIFO_ENABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXFNEIE" description="RXFIFO not empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXFNFIE" description="TXFIFO not full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXFNF =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
      <BitField start="30" size="1" name="TXFEIE" description="TXFIFO empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="31" size="1" name="RXFFIE" description="RXFIFO Full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when RXFF = 1 in the USART_ISR register" />
      </BitField>
    </Register>
    <Register start="+0x0" size="0" name="CR1_FIFO_DISABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXNEIE" description="Receive data register not empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXEIE" description="Transmit data register empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXE =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="Control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SLVEN" description="Synchronous Slave mode enable When the SLVEN bit is set, the synchronous slave mode is enabled. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled." />
        <Enum name="B_0x1" start="0x1" description="Slave mode enabled." />
      </BitField>
      <BitField start="3" size="1" name="DIS_NSS" description="When the DIS_NSS bit is set, the NSS pin input is ignored. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="SPI slave selection depends on NSS input pin." />
        <Enum name="B_0x1" start="0x1" description="SPI slave is always selected and NSS input pin is ignored." />
      </BitField>
      <BitField start="4" size="1" name="ADDM7" description="7-bit Address Detection/4-bit Address Detection This bit is for selection between 4-bit address detection or 7-bit address detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.">
        <Enum name="B_0x0" start="0x0" description="4-bit address detection" />
        <Enum name="B_0x1" start="0x1" description="7-bit address detection (in 8-bit data mode)" />
      </BitField>
      <BitField start="5" size="1" name="LBDL" description="LIN break detection length This bit is for selection between 11 bit or 10 bit break detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="10-bit break detection" />
        <Enum name="B_0x1" start="0x1" description="11-bit break detection" />
      </BitField>
      <BitField start="6" size="1" name="LBDIE" description="LIN break detection interrupt enable Break interrupt mask (break detection using break delimiter). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever LBDF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="LBCL" description="Last bit clock pulse This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode. The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The clock pulse of the last data bit is not output to the SCLK pin" />
        <Enum name="B_0x1" start="0x1" description="The clock pulse of the last data bit is output to the SCLK pin" />
      </BitField>
      <BitField start="9" size="1" name="CPHA" description="Clock phase This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see and ) This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The first clock transition is the first data capture edge" />
        <Enum name="B_0x1" start="0x1" description="The second clock transition is the first data capture edge" />
      </BitField>
      <BitField start="10" size="1" name="CPOL" description="Clock polarity This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Steady low value on SCLK pin outside transmission window" />
        <Enum name="B_0x1" start="0x1" description="Steady high value on SCLK pin outside transmission window" />
      </BitField>
      <BitField start="11" size="1" name="CLKEN" description="Clock enable This bit enables the user to enable the SCLK pin. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to . In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected: UE = 0 SCEN = 1 GTPR configuration CLKEN= 1 UE = 1">
        <Enum name="B_0x0" start="0x0" description="SCLK pin disabled" />
        <Enum name="B_0x1" start="0x1" description="SCLK pin enabled" />
      </BitField>
      <BitField start="12" size="2" name="STOP" description="stop bits These bits are used for programming the stop bits. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="1 stop bit" />
        <Enum name="B_0x1" start="0x1" description="0.5 stop bit." />
        <Enum name="B_0x2" start="0x2" description="2 stop bits" />
        <Enum name="B_0x3" start="0x3" description="1.5 stop bits" />
      </BitField>
      <BitField start="14" size="1" name="LINEN" description="LIN mode enable This bit is set and cleared by software. The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN mode disabled" />
        <Enum name="B_0x1" start="0x1" description="LIN mode enabled" />
      </BitField>
      <BitField start="15" size="1" name="SWAP" description="Swap TX/RX pins This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX/RX pins are used as defined in standard pinout" />
        <Enum name="B_0x1" start="0x1" description="The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART." />
      </BitField>
      <BitField start="16" size="1" name="RXINV" description="RX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the RX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="17" size="1" name="TXINV" description="TX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the TX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="18" size="1" name="DATAINV" description="Binary data inversion This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)" />
        <Enum name="B_0x1" start="0x1" description="Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H). The parity bit is also inverted." />
      </BitField>
      <BitField start="19" size="1" name="MSBFIRST" description="Most significant bit first This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="data is transmitted/received with data bit 0 first, following the start bit." />
        <Enum name="B_0x1" start="0x1" description="data is transmitted/received with the MSB (bit 7/8) first, following the start bit." />
      </BitField>
      <BitField start="20" size="1" name="ABREN" description="Auto baud rate enable This bit is set and cleared by software. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Auto baud rate detection is disabled." />
        <Enum name="B_0x1" start="0x1" description="Auto baud rate detection is enabled." />
      </BitField>
      <BitField start="21" size="2" name="ABRMOD" description="Auto baud rate mode These bits are set and cleared by software. This bitfield can only be written when ABREN = 0 or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If DATAINV&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 and/or MSBFIRST&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST) If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Measurement of the start bit is used to detect the baud rate." />
        <Enum name="B_0x1" start="0x1" description="Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)" />
        <Enum name="B_0x2" start="0x2" description="0x7F frame detection." />
        <Enum name="B_0x3" start="0x3" description="0x55 frame detection" />
      </BitField>
      <BitField start="23" size="1" name="RTOEN" description="Receiver timeout enable This bit is set and cleared by software. When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register). Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver timeout feature disabled." />
        <Enum name="B_0x1" start="0x1" description="Receiver timeout feature enabled." />
      </BitField>
      <BitField start="24" size="8" name="ADD" description="Address of the USART node ADD[7:4]: These bits give the address of the USART node or a character code to be recognized. They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). ADD[3:0]: These bits give the address of the USART node or a character code to be recognized. They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
    </Register>
    <Register start="+0x8" size="0" name="CR3" access="Read/Write" description="Control register 3" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EIE" description="Error interrupt enable Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or ORE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or NE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or UDR = 1 in the USART_ISR register).">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in the USART_ISR register." />
      </BitField>
      <BitField start="1" size="1" name="IREN" description="IrDA mode enable This bit is set and cleared by software. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="IrDA disabled" />
        <Enum name="B_0x1" start="0x1" description="IrDA enabled" />
      </BitField>
      <BitField start="2" size="1" name="IRLP" description="IrDA low-power This bit is used for selecting between normal and low-power IrDA modes This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Normal mode" />
        <Enum name="B_0x1" start="0x1" description="Low-power mode" />
      </BitField>
      <BitField start="3" size="1" name="HDSEL" description="Half-duplex selection Selection of Single-wire Half-duplex mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Half duplex mode is not selected" />
        <Enum name="B_0x1" start="0x1" description="Half duplex mode is selected" />
      </BitField>
      <BitField start="4" size="1" name="NACK" description="Smartcard NACK enable This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="NACK transmission in case of parity error is disabled" />
        <Enum name="B_0x1" start="0x1" description="NACK transmission during parity error is enabled" />
      </BitField>
      <BitField start="5" size="1" name="SCEN" description="Smartcard mode enable This bit is used for enabling Smartcard mode. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Smartcard Mode disabled" />
        <Enum name="B_0x1" start="0x1" description="Smartcard Mode enabled" />
      </BitField>
      <BitField start="6" size="1" name="DMAR" description="DMA enable receiver This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for reception" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for reception" />
      </BitField>
      <BitField start="7" size="1" name="DMAT" description="DMA enable transmitter This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for transmission" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for transmission" />
      </BitField>
      <BitField start="8" size="1" name="RTSE" description="RTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="RTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received." />
      </BitField>
      <BitField start="9" size="1" name="CTSE" description="CTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="CTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted." />
      </BitField>
      <BitField start="10" size="1" name="CTSIE" description="CTS interrupt enable Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever CTSIF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="11" size="1" name="ONEBIT" description="One sample bit method enable This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Three sample bit method" />
        <Enum name="B_0x1" start="0x1" description="One sample bit method" />
      </BitField>
      <BitField start="12" size="1" name="OVRDIS" description="Overrun Disable This bit is used to disable the receive overrun detection. the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: This control bit enables checking the communication flow w/o reading the data">
        <Enum name="B_0x0" start="0x0" description="Overrun Error Flag, ORE, is set when received data is not read before receiving new data." />
        <Enum name="B_0x1" start="0x1" description="Overrun functionality is disabled. If new data is received while the RXNE flag is still set" />
      </BitField>
      <BitField start="13" size="1" name="DDRE" description="DMA Disable on Reception Error This bit can only be written when the USART is disabled (UE=0). Note: The reception errors are: parity error, framing error or noise error.">
        <Enum name="B_0x0" start="0x0" description="DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode)." />
        <Enum name="B_0x1" start="0x1" description="DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag." />
      </BitField>
      <BitField start="14" size="1" name="DEM" description="Driver enable mode This bit enables the user to activate the external transceiver control, through the DE signal. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="DE function is disabled." />
        <Enum name="B_0x1" start="0x1" description="DE function is enabled. The DE signal is output on the RTS pin." />
      </BitField>
      <BitField start="15" size="1" name="DEP" description="Driver enable polarity selection This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="DE signal is active high." />
        <Enum name="B_0x1" start="0x1" description="DE signal is active low." />
      </BitField>
      <BitField start="17" size="3" name="SCARCNT" description="Smartcard auto-retry count This bitfield specifies the number of retries for transmission and reception in Smartcard mode. In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set). In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set). This bitfield must be programmed only when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). When the USART is enabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), this bitfield may only be written to 0x0, in order to stop retransmission. Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="retransmission disabled - No automatic retransmission in transmit mode." />
        <Enum name="B_0x1" start="0x1" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x2" start="0x2" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x3" start="0x3" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x4" start="0x4" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x5" start="0x5" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x6" start="0x6" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x7" start="0x7" description="number of automatic retransmission attempts (before signaling error)" />
      </BitField>
      <BitField start="20" size="2" name="WUS" description="Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="WUF active on address match (as defined by ADD[7:0] and ADDM7)" />
        <Enum name="B_0x2" start="0x2" description="WUF active on start bit detection" />
        <Enum name="B_0x3" start="0x3" description="WUF active on RXNE/RXFNE." />
      </BitField>
      <BitField start="22" size="1" name="WUFIE" description="Wakeup from low-power mode interrupt enable This bit is set and cleared by software. Note: WUFIE must be set before entering in low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever WUF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="23" size="1" name="TXFTIE" description="TXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG." />
      </BitField>
      <BitField start="24" size="1" name="TCBGTIE" description="Transmission Complete before guard time, interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TCBGT=1 in the USART_ISR register" />
      </BitField>
      <BitField start="25" size="3" name="RXFTCFG" description="Receive FIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="Receive FIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="Receive FIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="Receive FIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="Receive FIFO becomes full" />
      </BitField>
      <BitField start="28" size="1" name="RXFTIE" description="RXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG." />
      </BitField>
      <BitField start="29" size="3" name="TXFTCFG" description="TXFIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="TXFIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="TXFIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="TXFIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="TXFIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="TXFIFO becomes empty" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="BRR" access="Read/Write" description="Baud rate register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="BRR" description="USART baud rate" />
    </Register>
    <Register start="+0x10" size="0" name="GTPR" access="Read/Write" description="Guard time and prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="PSC" description="Prescaler value In IrDA low-power and normal IrDA mode: PSC[7:0] = IrDA Normal and Low-Power baud rate PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits): In Smartcard mode: PSC[4:0]&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; Prescaler value PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency: ... 0010&#xc3;&#x82;&#xc2; 0000: Divides the source clock by 32 (IrDA mode) ... 1111&#xc3;&#x82;&#xc2; 1111: Divides the source clock by 255 (IrDA mode) This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: Bits [7:5] must be kept cleared if Smartcard mode is used. This bitfield is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; when the Smartcard and IrDA modes are not supported. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Reserved - do not program this value" />
        <Enum name="B_0x1" start="0x1" description="Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)" />
        <Enum name="B_0x2" start="0x2" description="Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)" />
        <Enum name="B_0x3" start="0x3" description="Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)" />
        <Enum name="B_0x1F" start="0x1F" description="Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)" />
      </BitField>
      <BitField start="8" size="8" name="GT" description="Guard time value This bitfield is used to program the Guard time value in terms of number of baud clock periods. This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
    </Register>
    <Register start="+0x14" size="0" name="RTOR" access="Read/Write" description="Receiver timeout register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="24" name="RTO" description="Receiver timeout value" />
      <BitField start="24" size="8" name="BLEN" description="Block Length" />
    </Register>
    <Register start="+0x18" size="0" name="RQR" access="WriteOnly" description="Request register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ABRRQ" description="Auto baud rate request Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="1" size="1" name="SBKRQ" description="Send break request Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available. Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit." />
      <BitField start="2" size="1" name="MMRQ" description="Mute mode request Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag." />
      <BitField start="3" size="1" name="RXFRQ" description="Receive data flush request Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE. This enables to discard the received data without reading them, and avoid an overrun condition." />
      <BitField start="4" size="1" name="TXFRQ" description="Transmit data flush request When FIFO mode is disabled, writing '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes. Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register." />
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_ENABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x008000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861). This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE = 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXFNE" description="RXFIFO not empty RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO. RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXFNF" description="TXFIFO not full TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR. An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register. Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time). This bit is used during single buffer transmission.">
        <Enum name="B_0x0" start="0x0" description="Transmit FIFO is full" />
        <Enum name="B_0x1" start="0x1" description="Transmit FIFO is not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXFNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="23" size="1" name="TXFE" description="TXFIFO empty This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register. An interrupt is generated if the TXFEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 30) in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO not empty." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO empty." />
      </BitField>
      <BitField start="24" size="1" name="RXFF" description="RXFIFO full This bit is set by hardware when the number of received data corresponds to RXFIFO&#xc3;&#x82;&#xc2; size&#xc3;&#x82;&#xc2; +&#xc3;&#x82;&#xc2; 1 (RXFIFO full + 1 data in the USART_RDR register. An interrupt is generated if the RXFFIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="RXFIFO not full." />
        <Enum name="B_0x1" start="0x1" description="RXFIFO Full." />
      </BitField>
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
      <BitField start="26" size="1" name="RXFT" description="RXFIFO threshold flag This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 27) in the USART_CR3 register. Note: When the RXFTCFG threshold is configured to '101&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reached the programmed threshold." />
      </BitField>
      <BitField start="27" size="1" name="TXFT" description="TXFIFO threshold flag This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 31) in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reached the programmed threshold." />
      </BitField>
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_DISABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x000000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861).">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXNE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXNE" description="Read data register not empty RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXE" description="Transmit data register empty TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 mode, in case of transmission failure). An interrupt is generated if the TXEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data register full" />
        <Enum name="B_0x1" start="0x1" description="Data register not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="ICR" access="WriteOnly" description="Interrupt flag clear register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PECF" description="Parity error clear flag Writing 1 to this bit clears the PE flag in the USART_ISR register." />
      <BitField start="1" size="1" name="FECF" description="Framing error clear flag Writing 1 to this bit clears the FE flag in the USART_ISR register." />
      <BitField start="2" size="1" name="NECF" description="Noise detected clear flag Writing 1 to this bit clears the NE flag in the USART_ISR register." />
      <BitField start="3" size="1" name="ORECF" description="Overrun error clear flag Writing 1 to this bit clears the ORE flag in the USART_ISR register." />
      <BitField start="4" size="1" name="IDLECF" description="Idle line detected clear flag Writing 1 to this bit clears the IDLE flag in the USART_ISR register." />
      <BitField start="5" size="1" name="TXFECF" description="TXFIFO empty clear flag Writing 1 to this bit clears the TXFE flag in the USART_ISR register." />
      <BitField start="6" size="1" name="TCCF" description="Transmission complete clear flag Writing 1 to this bit clears the TC flag in the USART_ISR register." />
      <BitField start="7" size="1" name="TCBGTCF" description="Transmission complete before Guard time clear flag Writing 1 to this bit clears the TCBGT flag in the USART_ISR register." />
      <BitField start="8" size="1" name="LBDCF" description="LIN break detection clear flag Writing 1 to this bit clears the LBDF flag in the USART_ISR register. Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="9" size="1" name="CTSCF" description="CTS clear flag Writing 1 to this bit clears the CTSIF flag in the USART_ISR register. Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="11" size="1" name="RTOCF" description="Receiver timeout clear flag Writing 1 to this bit clears the RTOF flag in the USART_ISR register. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
      <BitField start="12" size="1" name="EOBCF" description="End of block clear flag Writing 1 to this bit clears the EOBF flag in the USART_ISR register. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="13" size="1" name="UDRCF" description="SPI slave underrun clear flag Writing 1 to this bit clears the UDRF flag in the USART_ISR register. Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to" />
      <BitField start="17" size="1" name="CMCF" description="Character match clear flag Writing 1 to this bit clears the CMF flag in the USART_ISR register." />
      <BitField start="20" size="1" name="WUCF" description="Wakeup from low-power mode clear flag Writing 1 to this bit clears the WUF flag in the USART_ISR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
    </Register>
    <Register start="+0x24" size="0" name="RDR" access="ReadOnly" description="Receive data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="RDR" description="Receive data value" />
    </Register>
    <Register start="+0x28" size="0" name="TDR" access="Read/Write" description="Transmit data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="TDR" description="Transmit data value" />
    </Register>
    <Register start="+0x2C" size="0" name="PRESC" access="Read/Write" description="Prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="PRESCALER" description="Clock prescaler The USART input clock can be divided by a prescaler factor: Remaining combinations: Reserved Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.">
        <Enum name="B_0x0" start="0x0" description="input clock not divided" />
        <Enum name="B_0x1" start="0x1" description="input clock divided by 2" />
        <Enum name="B_0x2" start="0x2" description="input clock divided by 4" />
        <Enum name="B_0x3" start="0x3" description="input clock divided by 6" />
        <Enum name="B_0x4" start="0x4" description="input clock divided by 8" />
        <Enum name="B_0x5" start="0x5" description="input clock divided by 10" />
        <Enum name="B_0x6" start="0x6" description="input clock divided by 12" />
        <Enum name="B_0x7" start="0x7" description="input clock divided by 16" />
        <Enum name="B_0x8" start="0x8" description="input clock divided by 32" />
        <Enum name="B_0x9" start="0x9" description="input clock divided by 64" />
        <Enum name="B_0xA" start="0xA" description="input clock divided by 128" />
        <Enum name="B_0xB" start="0xB" description="input clock divided by 256" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="USART3" start="0x40004800" description="Universal synchronous asynchronous receiver transmitter">
    <Register start="+0x0" size="0" name="CR1_FIFO_ENABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXFNEIE" description="RXFIFO not empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXFNFIE" description="TXFIFO not full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXFNF =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
      <BitField start="30" size="1" name="TXFEIE" description="TXFIFO empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="31" size="1" name="RXFFIE" description="RXFIFO Full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when RXFF = 1 in the USART_ISR register" />
      </BitField>
    </Register>
    <Register start="+0x0" size="0" name="CR1_FIFO_DISABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXNEIE" description="Receive data register not empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXEIE" description="Transmit data register empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXE =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="Control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SLVEN" description="Synchronous Slave mode enable When the SLVEN bit is set, the synchronous slave mode is enabled. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled." />
        <Enum name="B_0x1" start="0x1" description="Slave mode enabled." />
      </BitField>
      <BitField start="3" size="1" name="DIS_NSS" description="When the DIS_NSS bit is set, the NSS pin input is ignored. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="SPI slave selection depends on NSS input pin." />
        <Enum name="B_0x1" start="0x1" description="SPI slave is always selected and NSS input pin is ignored." />
      </BitField>
      <BitField start="4" size="1" name="ADDM7" description="7-bit Address Detection/4-bit Address Detection This bit is for selection between 4-bit address detection or 7-bit address detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.">
        <Enum name="B_0x0" start="0x0" description="4-bit address detection" />
        <Enum name="B_0x1" start="0x1" description="7-bit address detection (in 8-bit data mode)" />
      </BitField>
      <BitField start="5" size="1" name="LBDL" description="LIN break detection length This bit is for selection between 11 bit or 10 bit break detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="10-bit break detection" />
        <Enum name="B_0x1" start="0x1" description="11-bit break detection" />
      </BitField>
      <BitField start="6" size="1" name="LBDIE" description="LIN break detection interrupt enable Break interrupt mask (break detection using break delimiter). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever LBDF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="LBCL" description="Last bit clock pulse This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode. The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The clock pulse of the last data bit is not output to the SCLK pin" />
        <Enum name="B_0x1" start="0x1" description="The clock pulse of the last data bit is output to the SCLK pin" />
      </BitField>
      <BitField start="9" size="1" name="CPHA" description="Clock phase This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see and ) This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The first clock transition is the first data capture edge" />
        <Enum name="B_0x1" start="0x1" description="The second clock transition is the first data capture edge" />
      </BitField>
      <BitField start="10" size="1" name="CPOL" description="Clock polarity This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Steady low value on SCLK pin outside transmission window" />
        <Enum name="B_0x1" start="0x1" description="Steady high value on SCLK pin outside transmission window" />
      </BitField>
      <BitField start="11" size="1" name="CLKEN" description="Clock enable This bit enables the user to enable the SCLK pin. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to . In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected: UE = 0 SCEN = 1 GTPR configuration CLKEN= 1 UE = 1">
        <Enum name="B_0x0" start="0x0" description="SCLK pin disabled" />
        <Enum name="B_0x1" start="0x1" description="SCLK pin enabled" />
      </BitField>
      <BitField start="12" size="2" name="STOP" description="stop bits These bits are used for programming the stop bits. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="1 stop bit" />
        <Enum name="B_0x1" start="0x1" description="0.5 stop bit." />
        <Enum name="B_0x2" start="0x2" description="2 stop bits" />
        <Enum name="B_0x3" start="0x3" description="1.5 stop bits" />
      </BitField>
      <BitField start="14" size="1" name="LINEN" description="LIN mode enable This bit is set and cleared by software. The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN mode disabled" />
        <Enum name="B_0x1" start="0x1" description="LIN mode enabled" />
      </BitField>
      <BitField start="15" size="1" name="SWAP" description="Swap TX/RX pins This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX/RX pins are used as defined in standard pinout" />
        <Enum name="B_0x1" start="0x1" description="The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART." />
      </BitField>
      <BitField start="16" size="1" name="RXINV" description="RX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the RX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="17" size="1" name="TXINV" description="TX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the TX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="18" size="1" name="DATAINV" description="Binary data inversion This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)" />
        <Enum name="B_0x1" start="0x1" description="Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H). The parity bit is also inverted." />
      </BitField>
      <BitField start="19" size="1" name="MSBFIRST" description="Most significant bit first This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="data is transmitted/received with data bit 0 first, following the start bit." />
        <Enum name="B_0x1" start="0x1" description="data is transmitted/received with the MSB (bit 7/8) first, following the start bit." />
      </BitField>
      <BitField start="20" size="1" name="ABREN" description="Auto baud rate enable This bit is set and cleared by software. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Auto baud rate detection is disabled." />
        <Enum name="B_0x1" start="0x1" description="Auto baud rate detection is enabled." />
      </BitField>
      <BitField start="21" size="2" name="ABRMOD" description="Auto baud rate mode These bits are set and cleared by software. This bitfield can only be written when ABREN = 0 or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If DATAINV&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 and/or MSBFIRST&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST) If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Measurement of the start bit is used to detect the baud rate." />
        <Enum name="B_0x1" start="0x1" description="Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)" />
        <Enum name="B_0x2" start="0x2" description="0x7F frame detection." />
        <Enum name="B_0x3" start="0x3" description="0x55 frame detection" />
      </BitField>
      <BitField start="23" size="1" name="RTOEN" description="Receiver timeout enable This bit is set and cleared by software. When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register). Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver timeout feature disabled." />
        <Enum name="B_0x1" start="0x1" description="Receiver timeout feature enabled." />
      </BitField>
      <BitField start="24" size="8" name="ADD" description="Address of the USART node ADD[7:4]: These bits give the address of the USART node or a character code to be recognized. They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). ADD[3:0]: These bits give the address of the USART node or a character code to be recognized. They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
    </Register>
    <Register start="+0x8" size="0" name="CR3" access="Read/Write" description="Control register 3" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EIE" description="Error interrupt enable Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or ORE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or NE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or UDR = 1 in the USART_ISR register).">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in the USART_ISR register." />
      </BitField>
      <BitField start="1" size="1" name="IREN" description="IrDA mode enable This bit is set and cleared by software. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="IrDA disabled" />
        <Enum name="B_0x1" start="0x1" description="IrDA enabled" />
      </BitField>
      <BitField start="2" size="1" name="IRLP" description="IrDA low-power This bit is used for selecting between normal and low-power IrDA modes This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Normal mode" />
        <Enum name="B_0x1" start="0x1" description="Low-power mode" />
      </BitField>
      <BitField start="3" size="1" name="HDSEL" description="Half-duplex selection Selection of Single-wire Half-duplex mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Half duplex mode is not selected" />
        <Enum name="B_0x1" start="0x1" description="Half duplex mode is selected" />
      </BitField>
      <BitField start="4" size="1" name="NACK" description="Smartcard NACK enable This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="NACK transmission in case of parity error is disabled" />
        <Enum name="B_0x1" start="0x1" description="NACK transmission during parity error is enabled" />
      </BitField>
      <BitField start="5" size="1" name="SCEN" description="Smartcard mode enable This bit is used for enabling Smartcard mode. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Smartcard Mode disabled" />
        <Enum name="B_0x1" start="0x1" description="Smartcard Mode enabled" />
      </BitField>
      <BitField start="6" size="1" name="DMAR" description="DMA enable receiver This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for reception" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for reception" />
      </BitField>
      <BitField start="7" size="1" name="DMAT" description="DMA enable transmitter This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for transmission" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for transmission" />
      </BitField>
      <BitField start="8" size="1" name="RTSE" description="RTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="RTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received." />
      </BitField>
      <BitField start="9" size="1" name="CTSE" description="CTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="CTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted." />
      </BitField>
      <BitField start="10" size="1" name="CTSIE" description="CTS interrupt enable Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever CTSIF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="11" size="1" name="ONEBIT" description="One sample bit method enable This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Three sample bit method" />
        <Enum name="B_0x1" start="0x1" description="One sample bit method" />
      </BitField>
      <BitField start="12" size="1" name="OVRDIS" description="Overrun Disable This bit is used to disable the receive overrun detection. the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: This control bit enables checking the communication flow w/o reading the data">
        <Enum name="B_0x0" start="0x0" description="Overrun Error Flag, ORE, is set when received data is not read before receiving new data." />
        <Enum name="B_0x1" start="0x1" description="Overrun functionality is disabled. If new data is received while the RXNE flag is still set" />
      </BitField>
      <BitField start="13" size="1" name="DDRE" description="DMA Disable on Reception Error This bit can only be written when the USART is disabled (UE=0). Note: The reception errors are: parity error, framing error or noise error.">
        <Enum name="B_0x0" start="0x0" description="DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode)." />
        <Enum name="B_0x1" start="0x1" description="DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag." />
      </BitField>
      <BitField start="14" size="1" name="DEM" description="Driver enable mode This bit enables the user to activate the external transceiver control, through the DE signal. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="DE function is disabled." />
        <Enum name="B_0x1" start="0x1" description="DE function is enabled. The DE signal is output on the RTS pin." />
      </BitField>
      <BitField start="15" size="1" name="DEP" description="Driver enable polarity selection This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="DE signal is active high." />
        <Enum name="B_0x1" start="0x1" description="DE signal is active low." />
      </BitField>
      <BitField start="17" size="3" name="SCARCNT" description="Smartcard auto-retry count This bitfield specifies the number of retries for transmission and reception in Smartcard mode. In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set). In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set). This bitfield must be programmed only when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). When the USART is enabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), this bitfield may only be written to 0x0, in order to stop retransmission. Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="retransmission disabled - No automatic retransmission in transmit mode." />
        <Enum name="B_0x1" start="0x1" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x2" start="0x2" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x3" start="0x3" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x4" start="0x4" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x5" start="0x5" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x6" start="0x6" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x7" start="0x7" description="number of automatic retransmission attempts (before signaling error)" />
      </BitField>
      <BitField start="20" size="2" name="WUS" description="Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="WUF active on address match (as defined by ADD[7:0] and ADDM7)" />
        <Enum name="B_0x2" start="0x2" description="WUF active on start bit detection" />
        <Enum name="B_0x3" start="0x3" description="WUF active on RXNE/RXFNE." />
      </BitField>
      <BitField start="22" size="1" name="WUFIE" description="Wakeup from low-power mode interrupt enable This bit is set and cleared by software. Note: WUFIE must be set before entering in low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever WUF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="23" size="1" name="TXFTIE" description="TXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG." />
      </BitField>
      <BitField start="24" size="1" name="TCBGTIE" description="Transmission Complete before guard time, interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TCBGT=1 in the USART_ISR register" />
      </BitField>
      <BitField start="25" size="3" name="RXFTCFG" description="Receive FIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="Receive FIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="Receive FIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="Receive FIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="Receive FIFO becomes full" />
      </BitField>
      <BitField start="28" size="1" name="RXFTIE" description="RXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG." />
      </BitField>
      <BitField start="29" size="3" name="TXFTCFG" description="TXFIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="TXFIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="TXFIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="TXFIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="TXFIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="TXFIFO becomes empty" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="BRR" access="Read/Write" description="Baud rate register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="BRR" description="USART baud rate" />
    </Register>
    <Register start="+0x10" size="0" name="GTPR" access="Read/Write" description="Guard time and prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="PSC" description="Prescaler value In IrDA low-power and normal IrDA mode: PSC[7:0] = IrDA Normal and Low-Power baud rate PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits): In Smartcard mode: PSC[4:0]&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; Prescaler value PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency: ... 0010&#xc3;&#x82;&#xc2; 0000: Divides the source clock by 32 (IrDA mode) ... 1111&#xc3;&#x82;&#xc2; 1111: Divides the source clock by 255 (IrDA mode) This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: Bits [7:5] must be kept cleared if Smartcard mode is used. This bitfield is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; when the Smartcard and IrDA modes are not supported. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Reserved - do not program this value" />
        <Enum name="B_0x1" start="0x1" description="Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)" />
        <Enum name="B_0x2" start="0x2" description="Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)" />
        <Enum name="B_0x3" start="0x3" description="Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)" />
        <Enum name="B_0x1F" start="0x1F" description="Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)" />
      </BitField>
      <BitField start="8" size="8" name="GT" description="Guard time value This bitfield is used to program the Guard time value in terms of number of baud clock periods. This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
    </Register>
    <Register start="+0x14" size="0" name="RTOR" access="Read/Write" description="Receiver timeout register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="24" name="RTO" description="Receiver timeout value" />
      <BitField start="24" size="8" name="BLEN" description="Block Length" />
    </Register>
    <Register start="+0x18" size="0" name="RQR" access="WriteOnly" description="Request register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ABRRQ" description="Auto baud rate request Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="1" size="1" name="SBKRQ" description="Send break request Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available. Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit." />
      <BitField start="2" size="1" name="MMRQ" description="Mute mode request Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag." />
      <BitField start="3" size="1" name="RXFRQ" description="Receive data flush request Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE. This enables to discard the received data without reading them, and avoid an overrun condition." />
      <BitField start="4" size="1" name="TXFRQ" description="Transmit data flush request When FIFO mode is disabled, writing '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes. Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register." />
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_ENABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x008000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861). This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE = 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXFNE" description="RXFIFO not empty RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO. RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXFNF" description="TXFIFO not full TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR. An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register. Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time). This bit is used during single buffer transmission.">
        <Enum name="B_0x0" start="0x0" description="Transmit FIFO is full" />
        <Enum name="B_0x1" start="0x1" description="Transmit FIFO is not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXFNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="23" size="1" name="TXFE" description="TXFIFO empty This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register. An interrupt is generated if the TXFEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 30) in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO not empty." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO empty." />
      </BitField>
      <BitField start="24" size="1" name="RXFF" description="RXFIFO full This bit is set by hardware when the number of received data corresponds to RXFIFO&#xc3;&#x82;&#xc2; size&#xc3;&#x82;&#xc2; +&#xc3;&#x82;&#xc2; 1 (RXFIFO full + 1 data in the USART_RDR register. An interrupt is generated if the RXFFIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="RXFIFO not full." />
        <Enum name="B_0x1" start="0x1" description="RXFIFO Full." />
      </BitField>
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
      <BitField start="26" size="1" name="RXFT" description="RXFIFO threshold flag This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 27) in the USART_CR3 register. Note: When the RXFTCFG threshold is configured to '101&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reached the programmed threshold." />
      </BitField>
      <BitField start="27" size="1" name="TXFT" description="TXFIFO threshold flag This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 31) in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reached the programmed threshold." />
      </BitField>
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_DISABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x000000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861).">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXNE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXNE" description="Read data register not empty RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXE" description="Transmit data register empty TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 mode, in case of transmission failure). An interrupt is generated if the TXEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data register full" />
        <Enum name="B_0x1" start="0x1" description="Data register not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="ICR" access="WriteOnly" description="Interrupt flag clear register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PECF" description="Parity error clear flag Writing 1 to this bit clears the PE flag in the USART_ISR register." />
      <BitField start="1" size="1" name="FECF" description="Framing error clear flag Writing 1 to this bit clears the FE flag in the USART_ISR register." />
      <BitField start="2" size="1" name="NECF" description="Noise detected clear flag Writing 1 to this bit clears the NE flag in the USART_ISR register." />
      <BitField start="3" size="1" name="ORECF" description="Overrun error clear flag Writing 1 to this bit clears the ORE flag in the USART_ISR register." />
      <BitField start="4" size="1" name="IDLECF" description="Idle line detected clear flag Writing 1 to this bit clears the IDLE flag in the USART_ISR register." />
      <BitField start="5" size="1" name="TXFECF" description="TXFIFO empty clear flag Writing 1 to this bit clears the TXFE flag in the USART_ISR register." />
      <BitField start="6" size="1" name="TCCF" description="Transmission complete clear flag Writing 1 to this bit clears the TC flag in the USART_ISR register." />
      <BitField start="7" size="1" name="TCBGTCF" description="Transmission complete before Guard time clear flag Writing 1 to this bit clears the TCBGT flag in the USART_ISR register." />
      <BitField start="8" size="1" name="LBDCF" description="LIN break detection clear flag Writing 1 to this bit clears the LBDF flag in the USART_ISR register. Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="9" size="1" name="CTSCF" description="CTS clear flag Writing 1 to this bit clears the CTSIF flag in the USART_ISR register. Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="11" size="1" name="RTOCF" description="Receiver timeout clear flag Writing 1 to this bit clears the RTOF flag in the USART_ISR register. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
      <BitField start="12" size="1" name="EOBCF" description="End of block clear flag Writing 1 to this bit clears the EOBF flag in the USART_ISR register. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="13" size="1" name="UDRCF" description="SPI slave underrun clear flag Writing 1 to this bit clears the UDRF flag in the USART_ISR register. Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to" />
      <BitField start="17" size="1" name="CMCF" description="Character match clear flag Writing 1 to this bit clears the CMF flag in the USART_ISR register." />
      <BitField start="20" size="1" name="WUCF" description="Wakeup from low-power mode clear flag Writing 1 to this bit clears the WUF flag in the USART_ISR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
    </Register>
    <Register start="+0x24" size="0" name="RDR" access="ReadOnly" description="Receive data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="RDR" description="Receive data value" />
    </Register>
    <Register start="+0x28" size="0" name="TDR" access="Read/Write" description="Transmit data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="TDR" description="Transmit data value" />
    </Register>
    <Register start="+0x2C" size="0" name="PRESC" access="Read/Write" description="Prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="PRESCALER" description="Clock prescaler The USART input clock can be divided by a prescaler factor: Remaining combinations: Reserved Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.">
        <Enum name="B_0x0" start="0x0" description="input clock not divided" />
        <Enum name="B_0x1" start="0x1" description="input clock divided by 2" />
        <Enum name="B_0x2" start="0x2" description="input clock divided by 4" />
        <Enum name="B_0x3" start="0x3" description="input clock divided by 6" />
        <Enum name="B_0x4" start="0x4" description="input clock divided by 8" />
        <Enum name="B_0x5" start="0x5" description="input clock divided by 10" />
        <Enum name="B_0x6" start="0x6" description="input clock divided by 12" />
        <Enum name="B_0x7" start="0x7" description="input clock divided by 16" />
        <Enum name="B_0x8" start="0x8" description="input clock divided by 32" />
        <Enum name="B_0x9" start="0x9" description="input clock divided by 64" />
        <Enum name="B_0xA" start="0xA" description="input clock divided by 128" />
        <Enum name="B_0xB" start="0xB" description="input clock divided by 256" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="USART4" start="0x40004C00" description="Universal synchronous asynchronous receiver transmitter">
    <Register start="+0x0" size="0" name="CR1_FIFO_ENABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXFNEIE" description="RXFIFO not empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXFNFIE" description="TXFIFO not full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXFNF =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
      <BitField start="30" size="1" name="TXFEIE" description="TXFIFO empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="31" size="1" name="RXFFIE" description="RXFIFO Full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when RXFF = 1 in the USART_ISR register" />
      </BitField>
    </Register>
    <Register start="+0x0" size="0" name="CR1_FIFO_DISABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXNEIE" description="Receive data register not empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXEIE" description="Transmit data register empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXE =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="Control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SLVEN" description="Synchronous Slave mode enable When the SLVEN bit is set, the synchronous slave mode is enabled. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled." />
        <Enum name="B_0x1" start="0x1" description="Slave mode enabled." />
      </BitField>
      <BitField start="3" size="1" name="DIS_NSS" description="When the DIS_NSS bit is set, the NSS pin input is ignored. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="SPI slave selection depends on NSS input pin." />
        <Enum name="B_0x1" start="0x1" description="SPI slave is always selected and NSS input pin is ignored." />
      </BitField>
      <BitField start="4" size="1" name="ADDM7" description="7-bit Address Detection/4-bit Address Detection This bit is for selection between 4-bit address detection or 7-bit address detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.">
        <Enum name="B_0x0" start="0x0" description="4-bit address detection" />
        <Enum name="B_0x1" start="0x1" description="7-bit address detection (in 8-bit data mode)" />
      </BitField>
      <BitField start="5" size="1" name="LBDL" description="LIN break detection length This bit is for selection between 11 bit or 10 bit break detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="10-bit break detection" />
        <Enum name="B_0x1" start="0x1" description="11-bit break detection" />
      </BitField>
      <BitField start="6" size="1" name="LBDIE" description="LIN break detection interrupt enable Break interrupt mask (break detection using break delimiter). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever LBDF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="LBCL" description="Last bit clock pulse This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode. The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The clock pulse of the last data bit is not output to the SCLK pin" />
        <Enum name="B_0x1" start="0x1" description="The clock pulse of the last data bit is output to the SCLK pin" />
      </BitField>
      <BitField start="9" size="1" name="CPHA" description="Clock phase This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see and ) This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The first clock transition is the first data capture edge" />
        <Enum name="B_0x1" start="0x1" description="The second clock transition is the first data capture edge" />
      </BitField>
      <BitField start="10" size="1" name="CPOL" description="Clock polarity This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Steady low value on SCLK pin outside transmission window" />
        <Enum name="B_0x1" start="0x1" description="Steady high value on SCLK pin outside transmission window" />
      </BitField>
      <BitField start="11" size="1" name="CLKEN" description="Clock enable This bit enables the user to enable the SCLK pin. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to . In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected: UE = 0 SCEN = 1 GTPR configuration CLKEN= 1 UE = 1">
        <Enum name="B_0x0" start="0x0" description="SCLK pin disabled" />
        <Enum name="B_0x1" start="0x1" description="SCLK pin enabled" />
      </BitField>
      <BitField start="12" size="2" name="STOP" description="stop bits These bits are used for programming the stop bits. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="1 stop bit" />
        <Enum name="B_0x1" start="0x1" description="0.5 stop bit." />
        <Enum name="B_0x2" start="0x2" description="2 stop bits" />
        <Enum name="B_0x3" start="0x3" description="1.5 stop bits" />
      </BitField>
      <BitField start="14" size="1" name="LINEN" description="LIN mode enable This bit is set and cleared by software. The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN mode disabled" />
        <Enum name="B_0x1" start="0x1" description="LIN mode enabled" />
      </BitField>
      <BitField start="15" size="1" name="SWAP" description="Swap TX/RX pins This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX/RX pins are used as defined in standard pinout" />
        <Enum name="B_0x1" start="0x1" description="The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART." />
      </BitField>
      <BitField start="16" size="1" name="RXINV" description="RX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the RX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="17" size="1" name="TXINV" description="TX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the TX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="18" size="1" name="DATAINV" description="Binary data inversion This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)" />
        <Enum name="B_0x1" start="0x1" description="Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H). The parity bit is also inverted." />
      </BitField>
      <BitField start="19" size="1" name="MSBFIRST" description="Most significant bit first This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="data is transmitted/received with data bit 0 first, following the start bit." />
        <Enum name="B_0x1" start="0x1" description="data is transmitted/received with the MSB (bit 7/8) first, following the start bit." />
      </BitField>
      <BitField start="20" size="1" name="ABREN" description="Auto baud rate enable This bit is set and cleared by software. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Auto baud rate detection is disabled." />
        <Enum name="B_0x1" start="0x1" description="Auto baud rate detection is enabled." />
      </BitField>
      <BitField start="21" size="2" name="ABRMOD" description="Auto baud rate mode These bits are set and cleared by software. This bitfield can only be written when ABREN = 0 or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If DATAINV&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 and/or MSBFIRST&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST) If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Measurement of the start bit is used to detect the baud rate." />
        <Enum name="B_0x1" start="0x1" description="Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)" />
        <Enum name="B_0x2" start="0x2" description="0x7F frame detection." />
        <Enum name="B_0x3" start="0x3" description="0x55 frame detection" />
      </BitField>
      <BitField start="23" size="1" name="RTOEN" description="Receiver timeout enable This bit is set and cleared by software. When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register). Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver timeout feature disabled." />
        <Enum name="B_0x1" start="0x1" description="Receiver timeout feature enabled." />
      </BitField>
      <BitField start="24" size="8" name="ADD" description="Address of the USART node ADD[7:4]: These bits give the address of the USART node or a character code to be recognized. They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). ADD[3:0]: These bits give the address of the USART node or a character code to be recognized. They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
    </Register>
    <Register start="+0x8" size="0" name="CR3" access="Read/Write" description="Control register 3" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EIE" description="Error interrupt enable Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or ORE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or NE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or UDR = 1 in the USART_ISR register).">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in the USART_ISR register." />
      </BitField>
      <BitField start="1" size="1" name="IREN" description="IrDA mode enable This bit is set and cleared by software. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="IrDA disabled" />
        <Enum name="B_0x1" start="0x1" description="IrDA enabled" />
      </BitField>
      <BitField start="2" size="1" name="IRLP" description="IrDA low-power This bit is used for selecting between normal and low-power IrDA modes This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Normal mode" />
        <Enum name="B_0x1" start="0x1" description="Low-power mode" />
      </BitField>
      <BitField start="3" size="1" name="HDSEL" description="Half-duplex selection Selection of Single-wire Half-duplex mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Half duplex mode is not selected" />
        <Enum name="B_0x1" start="0x1" description="Half duplex mode is selected" />
      </BitField>
      <BitField start="4" size="1" name="NACK" description="Smartcard NACK enable This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="NACK transmission in case of parity error is disabled" />
        <Enum name="B_0x1" start="0x1" description="NACK transmission during parity error is enabled" />
      </BitField>
      <BitField start="5" size="1" name="SCEN" description="Smartcard mode enable This bit is used for enabling Smartcard mode. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Smartcard Mode disabled" />
        <Enum name="B_0x1" start="0x1" description="Smartcard Mode enabled" />
      </BitField>
      <BitField start="6" size="1" name="DMAR" description="DMA enable receiver This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for reception" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for reception" />
      </BitField>
      <BitField start="7" size="1" name="DMAT" description="DMA enable transmitter This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for transmission" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for transmission" />
      </BitField>
      <BitField start="8" size="1" name="RTSE" description="RTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="RTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received." />
      </BitField>
      <BitField start="9" size="1" name="CTSE" description="CTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="CTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted." />
      </BitField>
      <BitField start="10" size="1" name="CTSIE" description="CTS interrupt enable Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever CTSIF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="11" size="1" name="ONEBIT" description="One sample bit method enable This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Three sample bit method" />
        <Enum name="B_0x1" start="0x1" description="One sample bit method" />
      </BitField>
      <BitField start="12" size="1" name="OVRDIS" description="Overrun Disable This bit is used to disable the receive overrun detection. the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: This control bit enables checking the communication flow w/o reading the data">
        <Enum name="B_0x0" start="0x0" description="Overrun Error Flag, ORE, is set when received data is not read before receiving new data." />
        <Enum name="B_0x1" start="0x1" description="Overrun functionality is disabled. If new data is received while the RXNE flag is still set" />
      </BitField>
      <BitField start="13" size="1" name="DDRE" description="DMA Disable on Reception Error This bit can only be written when the USART is disabled (UE=0). Note: The reception errors are: parity error, framing error or noise error.">
        <Enum name="B_0x0" start="0x0" description="DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode)." />
        <Enum name="B_0x1" start="0x1" description="DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag." />
      </BitField>
      <BitField start="14" size="1" name="DEM" description="Driver enable mode This bit enables the user to activate the external transceiver control, through the DE signal. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="DE function is disabled." />
        <Enum name="B_0x1" start="0x1" description="DE function is enabled. The DE signal is output on the RTS pin." />
      </BitField>
      <BitField start="15" size="1" name="DEP" description="Driver enable polarity selection This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="DE signal is active high." />
        <Enum name="B_0x1" start="0x1" description="DE signal is active low." />
      </BitField>
      <BitField start="17" size="3" name="SCARCNT" description="Smartcard auto-retry count This bitfield specifies the number of retries for transmission and reception in Smartcard mode. In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set). In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set). This bitfield must be programmed only when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). When the USART is enabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), this bitfield may only be written to 0x0, in order to stop retransmission. Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="retransmission disabled - No automatic retransmission in transmit mode." />
        <Enum name="B_0x1" start="0x1" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x2" start="0x2" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x3" start="0x3" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x4" start="0x4" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x5" start="0x5" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x6" start="0x6" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x7" start="0x7" description="number of automatic retransmission attempts (before signaling error)" />
      </BitField>
      <BitField start="20" size="2" name="WUS" description="Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="WUF active on address match (as defined by ADD[7:0] and ADDM7)" />
        <Enum name="B_0x2" start="0x2" description="WUF active on start bit detection" />
        <Enum name="B_0x3" start="0x3" description="WUF active on RXNE/RXFNE." />
      </BitField>
      <BitField start="22" size="1" name="WUFIE" description="Wakeup from low-power mode interrupt enable This bit is set and cleared by software. Note: WUFIE must be set before entering in low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever WUF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="23" size="1" name="TXFTIE" description="TXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG." />
      </BitField>
      <BitField start="24" size="1" name="TCBGTIE" description="Transmission Complete before guard time, interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TCBGT=1 in the USART_ISR register" />
      </BitField>
      <BitField start="25" size="3" name="RXFTCFG" description="Receive FIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="Receive FIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="Receive FIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="Receive FIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="Receive FIFO becomes full" />
      </BitField>
      <BitField start="28" size="1" name="RXFTIE" description="RXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG." />
      </BitField>
      <BitField start="29" size="3" name="TXFTCFG" description="TXFIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="TXFIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="TXFIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="TXFIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="TXFIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="TXFIFO becomes empty" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="BRR" access="Read/Write" description="Baud rate register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="BRR" description="USART baud rate" />
    </Register>
    <Register start="+0x10" size="0" name="GTPR" access="Read/Write" description="Guard time and prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="PSC" description="Prescaler value In IrDA low-power and normal IrDA mode: PSC[7:0] = IrDA Normal and Low-Power baud rate PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits): In Smartcard mode: PSC[4:0]&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; Prescaler value PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency: ... 0010&#xc3;&#x82;&#xc2; 0000: Divides the source clock by 32 (IrDA mode) ... 1111&#xc3;&#x82;&#xc2; 1111: Divides the source clock by 255 (IrDA mode) This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: Bits [7:5] must be kept cleared if Smartcard mode is used. This bitfield is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; when the Smartcard and IrDA modes are not supported. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Reserved - do not program this value" />
        <Enum name="B_0x1" start="0x1" description="Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)" />
        <Enum name="B_0x2" start="0x2" description="Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)" />
        <Enum name="B_0x3" start="0x3" description="Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)" />
        <Enum name="B_0x1F" start="0x1F" description="Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)" />
      </BitField>
      <BitField start="8" size="8" name="GT" description="Guard time value This bitfield is used to program the Guard time value in terms of number of baud clock periods. This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
    </Register>
    <Register start="+0x14" size="0" name="RTOR" access="Read/Write" description="Receiver timeout register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="24" name="RTO" description="Receiver timeout value" />
      <BitField start="24" size="8" name="BLEN" description="Block Length" />
    </Register>
    <Register start="+0x18" size="0" name="RQR" access="WriteOnly" description="Request register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ABRRQ" description="Auto baud rate request Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="1" size="1" name="SBKRQ" description="Send break request Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available. Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit." />
      <BitField start="2" size="1" name="MMRQ" description="Mute mode request Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag." />
      <BitField start="3" size="1" name="RXFRQ" description="Receive data flush request Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE. This enables to discard the received data without reading them, and avoid an overrun condition." />
      <BitField start="4" size="1" name="TXFRQ" description="Transmit data flush request When FIFO mode is disabled, writing '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes. Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register." />
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_ENABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x008000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861). This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE = 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXFNE" description="RXFIFO not empty RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO. RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXFNF" description="TXFIFO not full TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR. An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register. Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time). This bit is used during single buffer transmission.">
        <Enum name="B_0x0" start="0x0" description="Transmit FIFO is full" />
        <Enum name="B_0x1" start="0x1" description="Transmit FIFO is not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXFNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="23" size="1" name="TXFE" description="TXFIFO empty This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register. An interrupt is generated if the TXFEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 30) in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO not empty." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO empty." />
      </BitField>
      <BitField start="24" size="1" name="RXFF" description="RXFIFO full This bit is set by hardware when the number of received data corresponds to RXFIFO&#xc3;&#x82;&#xc2; size&#xc3;&#x82;&#xc2; +&#xc3;&#x82;&#xc2; 1 (RXFIFO full + 1 data in the USART_RDR register. An interrupt is generated if the RXFFIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="RXFIFO not full." />
        <Enum name="B_0x1" start="0x1" description="RXFIFO Full." />
      </BitField>
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
      <BitField start="26" size="1" name="RXFT" description="RXFIFO threshold flag This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 27) in the USART_CR3 register. Note: When the RXFTCFG threshold is configured to '101&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reached the programmed threshold." />
      </BitField>
      <BitField start="27" size="1" name="TXFT" description="TXFIFO threshold flag This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 31) in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reached the programmed threshold." />
      </BitField>
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_DISABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x000000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861).">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXNE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXNE" description="Read data register not empty RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXE" description="Transmit data register empty TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 mode, in case of transmission failure). An interrupt is generated if the TXEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data register full" />
        <Enum name="B_0x1" start="0x1" description="Data register not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="ICR" access="WriteOnly" description="Interrupt flag clear register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PECF" description="Parity error clear flag Writing 1 to this bit clears the PE flag in the USART_ISR register." />
      <BitField start="1" size="1" name="FECF" description="Framing error clear flag Writing 1 to this bit clears the FE flag in the USART_ISR register." />
      <BitField start="2" size="1" name="NECF" description="Noise detected clear flag Writing 1 to this bit clears the NE flag in the USART_ISR register." />
      <BitField start="3" size="1" name="ORECF" description="Overrun error clear flag Writing 1 to this bit clears the ORE flag in the USART_ISR register." />
      <BitField start="4" size="1" name="IDLECF" description="Idle line detected clear flag Writing 1 to this bit clears the IDLE flag in the USART_ISR register." />
      <BitField start="5" size="1" name="TXFECF" description="TXFIFO empty clear flag Writing 1 to this bit clears the TXFE flag in the USART_ISR register." />
      <BitField start="6" size="1" name="TCCF" description="Transmission complete clear flag Writing 1 to this bit clears the TC flag in the USART_ISR register." />
      <BitField start="7" size="1" name="TCBGTCF" description="Transmission complete before Guard time clear flag Writing 1 to this bit clears the TCBGT flag in the USART_ISR register." />
      <BitField start="8" size="1" name="LBDCF" description="LIN break detection clear flag Writing 1 to this bit clears the LBDF flag in the USART_ISR register. Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="9" size="1" name="CTSCF" description="CTS clear flag Writing 1 to this bit clears the CTSIF flag in the USART_ISR register. Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="11" size="1" name="RTOCF" description="Receiver timeout clear flag Writing 1 to this bit clears the RTOF flag in the USART_ISR register. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
      <BitField start="12" size="1" name="EOBCF" description="End of block clear flag Writing 1 to this bit clears the EOBF flag in the USART_ISR register. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="13" size="1" name="UDRCF" description="SPI slave underrun clear flag Writing 1 to this bit clears the UDRF flag in the USART_ISR register. Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to" />
      <BitField start="17" size="1" name="CMCF" description="Character match clear flag Writing 1 to this bit clears the CMF flag in the USART_ISR register." />
      <BitField start="20" size="1" name="WUCF" description="Wakeup from low-power mode clear flag Writing 1 to this bit clears the WUF flag in the USART_ISR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
    </Register>
    <Register start="+0x24" size="0" name="RDR" access="ReadOnly" description="Receive data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="RDR" description="Receive data value" />
    </Register>
    <Register start="+0x28" size="0" name="TDR" access="Read/Write" description="Transmit data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="TDR" description="Transmit data value" />
    </Register>
    <Register start="+0x2C" size="0" name="PRESC" access="Read/Write" description="Prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="PRESCALER" description="Clock prescaler The USART input clock can be divided by a prescaler factor: Remaining combinations: Reserved Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.">
        <Enum name="B_0x0" start="0x0" description="input clock not divided" />
        <Enum name="B_0x1" start="0x1" description="input clock divided by 2" />
        <Enum name="B_0x2" start="0x2" description="input clock divided by 4" />
        <Enum name="B_0x3" start="0x3" description="input clock divided by 6" />
        <Enum name="B_0x4" start="0x4" description="input clock divided by 8" />
        <Enum name="B_0x5" start="0x5" description="input clock divided by 10" />
        <Enum name="B_0x6" start="0x6" description="input clock divided by 12" />
        <Enum name="B_0x7" start="0x7" description="input clock divided by 16" />
        <Enum name="B_0x8" start="0x8" description="input clock divided by 32" />
        <Enum name="B_0x9" start="0x9" description="input clock divided by 64" />
        <Enum name="B_0xA" start="0xA" description="input clock divided by 128" />
        <Enum name="B_0xB" start="0xB" description="input clock divided by 256" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="USART5" start="0x40005000" description="Universal synchronous asynchronous receiver transmitter">
    <Register start="+0x0" size="0" name="CR1_FIFO_ENABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXFNEIE" description="RXFIFO not empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXFNFIE" description="TXFIFO not full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXFNF =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
      <BitField start="30" size="1" name="TXFEIE" description="TXFIFO empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="31" size="1" name="RXFFIE" description="RXFIFO Full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when RXFF = 1 in the USART_ISR register" />
      </BitField>
    </Register>
    <Register start="+0x0" size="0" name="CR1_FIFO_DISABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXNEIE" description="Receive data register not empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXEIE" description="Transmit data register empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXE =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="Control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SLVEN" description="Synchronous Slave mode enable When the SLVEN bit is set, the synchronous slave mode is enabled. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled." />
        <Enum name="B_0x1" start="0x1" description="Slave mode enabled." />
      </BitField>
      <BitField start="3" size="1" name="DIS_NSS" description="When the DIS_NSS bit is set, the NSS pin input is ignored. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="SPI slave selection depends on NSS input pin." />
        <Enum name="B_0x1" start="0x1" description="SPI slave is always selected and NSS input pin is ignored." />
      </BitField>
      <BitField start="4" size="1" name="ADDM7" description="7-bit Address Detection/4-bit Address Detection This bit is for selection between 4-bit address detection or 7-bit address detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.">
        <Enum name="B_0x0" start="0x0" description="4-bit address detection" />
        <Enum name="B_0x1" start="0x1" description="7-bit address detection (in 8-bit data mode)" />
      </BitField>
      <BitField start="5" size="1" name="LBDL" description="LIN break detection length This bit is for selection between 11 bit or 10 bit break detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="10-bit break detection" />
        <Enum name="B_0x1" start="0x1" description="11-bit break detection" />
      </BitField>
      <BitField start="6" size="1" name="LBDIE" description="LIN break detection interrupt enable Break interrupt mask (break detection using break delimiter). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever LBDF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="LBCL" description="Last bit clock pulse This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode. The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The clock pulse of the last data bit is not output to the SCLK pin" />
        <Enum name="B_0x1" start="0x1" description="The clock pulse of the last data bit is output to the SCLK pin" />
      </BitField>
      <BitField start="9" size="1" name="CPHA" description="Clock phase This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see and ) This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The first clock transition is the first data capture edge" />
        <Enum name="B_0x1" start="0x1" description="The second clock transition is the first data capture edge" />
      </BitField>
      <BitField start="10" size="1" name="CPOL" description="Clock polarity This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Steady low value on SCLK pin outside transmission window" />
        <Enum name="B_0x1" start="0x1" description="Steady high value on SCLK pin outside transmission window" />
      </BitField>
      <BitField start="11" size="1" name="CLKEN" description="Clock enable This bit enables the user to enable the SCLK pin. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to . In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected: UE = 0 SCEN = 1 GTPR configuration CLKEN= 1 UE = 1">
        <Enum name="B_0x0" start="0x0" description="SCLK pin disabled" />
        <Enum name="B_0x1" start="0x1" description="SCLK pin enabled" />
      </BitField>
      <BitField start="12" size="2" name="STOP" description="stop bits These bits are used for programming the stop bits. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="1 stop bit" />
        <Enum name="B_0x1" start="0x1" description="0.5 stop bit." />
        <Enum name="B_0x2" start="0x2" description="2 stop bits" />
        <Enum name="B_0x3" start="0x3" description="1.5 stop bits" />
      </BitField>
      <BitField start="14" size="1" name="LINEN" description="LIN mode enable This bit is set and cleared by software. The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN mode disabled" />
        <Enum name="B_0x1" start="0x1" description="LIN mode enabled" />
      </BitField>
      <BitField start="15" size="1" name="SWAP" description="Swap TX/RX pins This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX/RX pins are used as defined in standard pinout" />
        <Enum name="B_0x1" start="0x1" description="The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART." />
      </BitField>
      <BitField start="16" size="1" name="RXINV" description="RX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the RX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="17" size="1" name="TXINV" description="TX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the TX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="18" size="1" name="DATAINV" description="Binary data inversion This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)" />
        <Enum name="B_0x1" start="0x1" description="Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H). The parity bit is also inverted." />
      </BitField>
      <BitField start="19" size="1" name="MSBFIRST" description="Most significant bit first This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="data is transmitted/received with data bit 0 first, following the start bit." />
        <Enum name="B_0x1" start="0x1" description="data is transmitted/received with the MSB (bit 7/8) first, following the start bit." />
      </BitField>
      <BitField start="20" size="1" name="ABREN" description="Auto baud rate enable This bit is set and cleared by software. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Auto baud rate detection is disabled." />
        <Enum name="B_0x1" start="0x1" description="Auto baud rate detection is enabled." />
      </BitField>
      <BitField start="21" size="2" name="ABRMOD" description="Auto baud rate mode These bits are set and cleared by software. This bitfield can only be written when ABREN = 0 or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If DATAINV&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 and/or MSBFIRST&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST) If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Measurement of the start bit is used to detect the baud rate." />
        <Enum name="B_0x1" start="0x1" description="Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)" />
        <Enum name="B_0x2" start="0x2" description="0x7F frame detection." />
        <Enum name="B_0x3" start="0x3" description="0x55 frame detection" />
      </BitField>
      <BitField start="23" size="1" name="RTOEN" description="Receiver timeout enable This bit is set and cleared by software. When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register). Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver timeout feature disabled." />
        <Enum name="B_0x1" start="0x1" description="Receiver timeout feature enabled." />
      </BitField>
      <BitField start="24" size="8" name="ADD" description="Address of the USART node ADD[7:4]: These bits give the address of the USART node or a character code to be recognized. They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). ADD[3:0]: These bits give the address of the USART node or a character code to be recognized. They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
    </Register>
    <Register start="+0x8" size="0" name="CR3" access="Read/Write" description="Control register 3" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EIE" description="Error interrupt enable Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or ORE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or NE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or UDR = 1 in the USART_ISR register).">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in the USART_ISR register." />
      </BitField>
      <BitField start="1" size="1" name="IREN" description="IrDA mode enable This bit is set and cleared by software. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="IrDA disabled" />
        <Enum name="B_0x1" start="0x1" description="IrDA enabled" />
      </BitField>
      <BitField start="2" size="1" name="IRLP" description="IrDA low-power This bit is used for selecting between normal and low-power IrDA modes This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Normal mode" />
        <Enum name="B_0x1" start="0x1" description="Low-power mode" />
      </BitField>
      <BitField start="3" size="1" name="HDSEL" description="Half-duplex selection Selection of Single-wire Half-duplex mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Half duplex mode is not selected" />
        <Enum name="B_0x1" start="0x1" description="Half duplex mode is selected" />
      </BitField>
      <BitField start="4" size="1" name="NACK" description="Smartcard NACK enable This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="NACK transmission in case of parity error is disabled" />
        <Enum name="B_0x1" start="0x1" description="NACK transmission during parity error is enabled" />
      </BitField>
      <BitField start="5" size="1" name="SCEN" description="Smartcard mode enable This bit is used for enabling Smartcard mode. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Smartcard Mode disabled" />
        <Enum name="B_0x1" start="0x1" description="Smartcard Mode enabled" />
      </BitField>
      <BitField start="6" size="1" name="DMAR" description="DMA enable receiver This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for reception" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for reception" />
      </BitField>
      <BitField start="7" size="1" name="DMAT" description="DMA enable transmitter This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for transmission" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for transmission" />
      </BitField>
      <BitField start="8" size="1" name="RTSE" description="RTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="RTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received." />
      </BitField>
      <BitField start="9" size="1" name="CTSE" description="CTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="CTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted." />
      </BitField>
      <BitField start="10" size="1" name="CTSIE" description="CTS interrupt enable Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever CTSIF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="11" size="1" name="ONEBIT" description="One sample bit method enable This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Three sample bit method" />
        <Enum name="B_0x1" start="0x1" description="One sample bit method" />
      </BitField>
      <BitField start="12" size="1" name="OVRDIS" description="Overrun Disable This bit is used to disable the receive overrun detection. the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: This control bit enables checking the communication flow w/o reading the data">
        <Enum name="B_0x0" start="0x0" description="Overrun Error Flag, ORE, is set when received data is not read before receiving new data." />
        <Enum name="B_0x1" start="0x1" description="Overrun functionality is disabled. If new data is received while the RXNE flag is still set" />
      </BitField>
      <BitField start="13" size="1" name="DDRE" description="DMA Disable on Reception Error This bit can only be written when the USART is disabled (UE=0). Note: The reception errors are: parity error, framing error or noise error.">
        <Enum name="B_0x0" start="0x0" description="DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode)." />
        <Enum name="B_0x1" start="0x1" description="DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag." />
      </BitField>
      <BitField start="14" size="1" name="DEM" description="Driver enable mode This bit enables the user to activate the external transceiver control, through the DE signal. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="DE function is disabled." />
        <Enum name="B_0x1" start="0x1" description="DE function is enabled. The DE signal is output on the RTS pin." />
      </BitField>
      <BitField start="15" size="1" name="DEP" description="Driver enable polarity selection This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="DE signal is active high." />
        <Enum name="B_0x1" start="0x1" description="DE signal is active low." />
      </BitField>
      <BitField start="17" size="3" name="SCARCNT" description="Smartcard auto-retry count This bitfield specifies the number of retries for transmission and reception in Smartcard mode. In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set). In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set). This bitfield must be programmed only when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). When the USART is enabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), this bitfield may only be written to 0x0, in order to stop retransmission. Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="retransmission disabled - No automatic retransmission in transmit mode." />
        <Enum name="B_0x1" start="0x1" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x2" start="0x2" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x3" start="0x3" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x4" start="0x4" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x5" start="0x5" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x6" start="0x6" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x7" start="0x7" description="number of automatic retransmission attempts (before signaling error)" />
      </BitField>
      <BitField start="20" size="2" name="WUS" description="Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="WUF active on address match (as defined by ADD[7:0] and ADDM7)" />
        <Enum name="B_0x2" start="0x2" description="WUF active on start bit detection" />
        <Enum name="B_0x3" start="0x3" description="WUF active on RXNE/RXFNE." />
      </BitField>
      <BitField start="22" size="1" name="WUFIE" description="Wakeup from low-power mode interrupt enable This bit is set and cleared by software. Note: WUFIE must be set before entering in low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever WUF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="23" size="1" name="TXFTIE" description="TXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG." />
      </BitField>
      <BitField start="24" size="1" name="TCBGTIE" description="Transmission Complete before guard time, interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TCBGT=1 in the USART_ISR register" />
      </BitField>
      <BitField start="25" size="3" name="RXFTCFG" description="Receive FIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="Receive FIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="Receive FIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="Receive FIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="Receive FIFO becomes full" />
      </BitField>
      <BitField start="28" size="1" name="RXFTIE" description="RXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG." />
      </BitField>
      <BitField start="29" size="3" name="TXFTCFG" description="TXFIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="TXFIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="TXFIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="TXFIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="TXFIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="TXFIFO becomes empty" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="BRR" access="Read/Write" description="Baud rate register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="BRR" description="USART baud rate" />
    </Register>
    <Register start="+0x10" size="0" name="GTPR" access="Read/Write" description="Guard time and prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="PSC" description="Prescaler value In IrDA low-power and normal IrDA mode: PSC[7:0] = IrDA Normal and Low-Power baud rate PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits): In Smartcard mode: PSC[4:0]&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; Prescaler value PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency: ... 0010&#xc3;&#x82;&#xc2; 0000: Divides the source clock by 32 (IrDA mode) ... 1111&#xc3;&#x82;&#xc2; 1111: Divides the source clock by 255 (IrDA mode) This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: Bits [7:5] must be kept cleared if Smartcard mode is used. This bitfield is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; when the Smartcard and IrDA modes are not supported. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Reserved - do not program this value" />
        <Enum name="B_0x1" start="0x1" description="Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)" />
        <Enum name="B_0x2" start="0x2" description="Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)" />
        <Enum name="B_0x3" start="0x3" description="Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)" />
        <Enum name="B_0x1F" start="0x1F" description="Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)" />
      </BitField>
      <BitField start="8" size="8" name="GT" description="Guard time value This bitfield is used to program the Guard time value in terms of number of baud clock periods. This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
    </Register>
    <Register start="+0x14" size="0" name="RTOR" access="Read/Write" description="Receiver timeout register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="24" name="RTO" description="Receiver timeout value" />
      <BitField start="24" size="8" name="BLEN" description="Block Length" />
    </Register>
    <Register start="+0x18" size="0" name="RQR" access="WriteOnly" description="Request register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ABRRQ" description="Auto baud rate request Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="1" size="1" name="SBKRQ" description="Send break request Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available. Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit." />
      <BitField start="2" size="1" name="MMRQ" description="Mute mode request Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag." />
      <BitField start="3" size="1" name="RXFRQ" description="Receive data flush request Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE. This enables to discard the received data without reading them, and avoid an overrun condition." />
      <BitField start="4" size="1" name="TXFRQ" description="Transmit data flush request When FIFO mode is disabled, writing '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes. Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register." />
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_ENABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x008000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861). This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE = 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXFNE" description="RXFIFO not empty RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO. RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXFNF" description="TXFIFO not full TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR. An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register. Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time). This bit is used during single buffer transmission.">
        <Enum name="B_0x0" start="0x0" description="Transmit FIFO is full" />
        <Enum name="B_0x1" start="0x1" description="Transmit FIFO is not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXFNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="23" size="1" name="TXFE" description="TXFIFO empty This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register. An interrupt is generated if the TXFEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 30) in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO not empty." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO empty." />
      </BitField>
      <BitField start="24" size="1" name="RXFF" description="RXFIFO full This bit is set by hardware when the number of received data corresponds to RXFIFO&#xc3;&#x82;&#xc2; size&#xc3;&#x82;&#xc2; +&#xc3;&#x82;&#xc2; 1 (RXFIFO full + 1 data in the USART_RDR register. An interrupt is generated if the RXFFIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="RXFIFO not full." />
        <Enum name="B_0x1" start="0x1" description="RXFIFO Full." />
      </BitField>
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
      <BitField start="26" size="1" name="RXFT" description="RXFIFO threshold flag This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 27) in the USART_CR3 register. Note: When the RXFTCFG threshold is configured to '101&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reached the programmed threshold." />
      </BitField>
      <BitField start="27" size="1" name="TXFT" description="TXFIFO threshold flag This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 31) in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reached the programmed threshold." />
      </BitField>
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_DISABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x000000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861).">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXNE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXNE" description="Read data register not empty RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXE" description="Transmit data register empty TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 mode, in case of transmission failure). An interrupt is generated if the TXEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data register full" />
        <Enum name="B_0x1" start="0x1" description="Data register not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="ICR" access="WriteOnly" description="Interrupt flag clear register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PECF" description="Parity error clear flag Writing 1 to this bit clears the PE flag in the USART_ISR register." />
      <BitField start="1" size="1" name="FECF" description="Framing error clear flag Writing 1 to this bit clears the FE flag in the USART_ISR register." />
      <BitField start="2" size="1" name="NECF" description="Noise detected clear flag Writing 1 to this bit clears the NE flag in the USART_ISR register." />
      <BitField start="3" size="1" name="ORECF" description="Overrun error clear flag Writing 1 to this bit clears the ORE flag in the USART_ISR register." />
      <BitField start="4" size="1" name="IDLECF" description="Idle line detected clear flag Writing 1 to this bit clears the IDLE flag in the USART_ISR register." />
      <BitField start="5" size="1" name="TXFECF" description="TXFIFO empty clear flag Writing 1 to this bit clears the TXFE flag in the USART_ISR register." />
      <BitField start="6" size="1" name="TCCF" description="Transmission complete clear flag Writing 1 to this bit clears the TC flag in the USART_ISR register." />
      <BitField start="7" size="1" name="TCBGTCF" description="Transmission complete before Guard time clear flag Writing 1 to this bit clears the TCBGT flag in the USART_ISR register." />
      <BitField start="8" size="1" name="LBDCF" description="LIN break detection clear flag Writing 1 to this bit clears the LBDF flag in the USART_ISR register. Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="9" size="1" name="CTSCF" description="CTS clear flag Writing 1 to this bit clears the CTSIF flag in the USART_ISR register. Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="11" size="1" name="RTOCF" description="Receiver timeout clear flag Writing 1 to this bit clears the RTOF flag in the USART_ISR register. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
      <BitField start="12" size="1" name="EOBCF" description="End of block clear flag Writing 1 to this bit clears the EOBF flag in the USART_ISR register. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="13" size="1" name="UDRCF" description="SPI slave underrun clear flag Writing 1 to this bit clears the UDRF flag in the USART_ISR register. Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to" />
      <BitField start="17" size="1" name="CMCF" description="Character match clear flag Writing 1 to this bit clears the CMF flag in the USART_ISR register." />
      <BitField start="20" size="1" name="WUCF" description="Wakeup from low-power mode clear flag Writing 1 to this bit clears the WUF flag in the USART_ISR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
    </Register>
    <Register start="+0x24" size="0" name="RDR" access="ReadOnly" description="Receive data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="RDR" description="Receive data value" />
    </Register>
    <Register start="+0x28" size="0" name="TDR" access="Read/Write" description="Transmit data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="TDR" description="Transmit data value" />
    </Register>
    <Register start="+0x2C" size="0" name="PRESC" access="Read/Write" description="Prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="PRESCALER" description="Clock prescaler The USART input clock can be divided by a prescaler factor: Remaining combinations: Reserved Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.">
        <Enum name="B_0x0" start="0x0" description="input clock not divided" />
        <Enum name="B_0x1" start="0x1" description="input clock divided by 2" />
        <Enum name="B_0x2" start="0x2" description="input clock divided by 4" />
        <Enum name="B_0x3" start="0x3" description="input clock divided by 6" />
        <Enum name="B_0x4" start="0x4" description="input clock divided by 8" />
        <Enum name="B_0x5" start="0x5" description="input clock divided by 10" />
        <Enum name="B_0x6" start="0x6" description="input clock divided by 12" />
        <Enum name="B_0x7" start="0x7" description="input clock divided by 16" />
        <Enum name="B_0x8" start="0x8" description="input clock divided by 32" />
        <Enum name="B_0x9" start="0x9" description="input clock divided by 64" />
        <Enum name="B_0xA" start="0xA" description="input clock divided by 128" />
        <Enum name="B_0xB" start="0xB" description="input clock divided by 256" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="USART6" start="0x40013C00" description="Universal synchronous asynchronous receiver transmitter">
    <Register start="+0x0" size="0" name="CR1_FIFO_ENABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXFNEIE" description="RXFIFO not empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXFNFIE" description="TXFIFO not full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXFNF =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
      <BitField start="30" size="1" name="TXFEIE" description="TXFIFO empty interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="31" size="1" name="RXFFIE" description="RXFIFO Full interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when RXFF = 1 in the USART_ISR register" />
      </BitField>
    </Register>
    <Register start="+0x0" size="0" name="CR1_FIFO_DISABLED" access="Read/Write" description="Control register 1" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="UE" description="USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.">
        <Enum name="B_0x0" start="0x0" description="USART prescaler and outputs disabled, low-power mode" />
        <Enum name="B_0x1" start="0x1" description="USART enabled" />
      </BitField>
      <BitField start="1" size="1" name="UESM" description="USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="USART not able to wake up the MCU from low-power mode." />
        <Enum name="B_0x1" start="0x1" description="USART able to wake up the MCU from low-power mode." />
      </BitField>
      <BitField start="2" size="1" name="RE" description="Receiver enable This bit enables the receiver. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver is disabled" />
        <Enum name="B_0x1" start="0x1" description="Receiver is enabled and begins searching for a start bit" />
      </BitField>
      <BitField start="3" size="1" name="TE" description="Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; followed by '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.">
        <Enum name="B_0x0" start="0x0" description="Transmitter is disabled" />
        <Enum name="B_0x1" start="0x1" description="Transmitter is enabled" />
      </BitField>
      <BitField start="4" size="1" name="IDLEIE" description="IDLE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever IDLE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="5" size="1" name="RXNEIE" description="Receive data register not empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="6" size="1" name="TCIE" description="Transmission complete interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TC = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="7" size="1" name="TXEIE" description="Transmit data register empty This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TXE =1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="PEIE" description="PE interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever PE = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="9" size="1" name="PS" description="Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Even parity" />
        <Enum name="B_0x1" start="0x1" description="Odd parity" />
      </BitField>
      <BitField start="10" size="1" name="PCE" description="Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1; 8th bit if M&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Parity control disabled" />
        <Enum name="B_0x1" start="0x1" description="Parity control enabled" />
      </BitField>
      <BitField start="11" size="1" name="WAKE" description="Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Idle line" />
        <Enum name="B_0x1" start="0x1" description="Address mark" />
      </BitField>
      <BitField start="12" size="1" name="M0" description="Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
      <BitField start="13" size="1" name="MME" description="Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode permanently" />
        <Enum name="B_0x1" start="0x1" description="Receiver can switch between Mute mode and active mode." />
      </BitField>
      <BitField start="14" size="1" name="CMIE" description="Character match interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the CMF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="15" size="1" name="OVER8" description="Oversampling mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.">
        <Enum name="B_0x0" start="0x0" description="Oversampling by 16" />
        <Enum name="B_0x1" start="0x1" description="Oversampling by 8" />
      </BitField>
      <BitField start="16" size="5" name="DEDT" description="Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="21" size="5" name="DEAT" description="Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="26" size="1" name="RTOIE" description="Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the RTOF bit is set in the USART_ISR register." />
      </BitField>
      <BitField start="27" size="1" name="EOBIE" description="End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when the EOBF flag is set in the USART_ISR register" />
      </BitField>
      <BitField start="28" size="1" name="M1" description="Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;: 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported." />
      <BitField start="29" size="1" name="FIFOEN" description="FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.">
        <Enum name="B_0x0" start="0x0" description="FIFO mode is disabled." />
        <Enum name="B_0x1" start="0x1" description="FIFO mode is enabled." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="CR2" access="Read/Write" description="Control register 2" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="SLVEN" description="Synchronous Slave mode enable When the SLVEN bit is set, the synchronous slave mode is enabled. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Slave mode disabled." />
        <Enum name="B_0x1" start="0x1" description="Slave mode enabled." />
      </BitField>
      <BitField start="3" size="1" name="DIS_NSS" description="When the DIS_NSS bit is set, the NSS pin input is ignored. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="SPI slave selection depends on NSS input pin." />
        <Enum name="B_0x1" start="0x1" description="SPI slave is always selected and NSS input pin is ignored." />
      </BitField>
      <BitField start="4" size="1" name="ADDM7" description="7-bit Address Detection/4-bit Address Detection This bit is for selection between 4-bit address detection or 7-bit address detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.">
        <Enum name="B_0x0" start="0x0" description="4-bit address detection" />
        <Enum name="B_0x1" start="0x1" description="7-bit address detection (in 8-bit data mode)" />
      </BitField>
      <BitField start="5" size="1" name="LBDL" description="LIN break detection length This bit is for selection between 11 bit or 10 bit break detection. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="10-bit break detection" />
        <Enum name="B_0x1" start="0x1" description="11-bit break detection" />
      </BitField>
      <BitField start="6" size="1" name="LBDIE" description="LIN break detection interrupt enable Break interrupt mask (break detection using break delimiter). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever LBDF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="8" size="1" name="LBCL" description="Last bit clock pulse This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode. The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The clock pulse of the last data bit is not output to the SCLK pin" />
        <Enum name="B_0x1" start="0x1" description="The clock pulse of the last data bit is output to the SCLK pin" />
      </BitField>
      <BitField start="9" size="1" name="CPHA" description="Clock phase This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see and ) This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="The first clock transition is the first data capture edge" />
        <Enum name="B_0x1" start="0x1" description="The second clock transition is the first data capture edge" />
      </BitField>
      <BitField start="10" size="1" name="CPOL" description="Clock polarity This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Steady low value on SCLK pin outside transmission window" />
        <Enum name="B_0x1" start="0x1" description="Steady high value on SCLK pin outside transmission window" />
      </BitField>
      <BitField start="11" size="1" name="CLKEN" description="Clock enable This bit enables the user to enable the SCLK pin. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to . In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected: UE = 0 SCEN = 1 GTPR configuration CLKEN= 1 UE = 1">
        <Enum name="B_0x0" start="0x0" description="SCLK pin disabled" />
        <Enum name="B_0x1" start="0x1" description="SCLK pin enabled" />
      </BitField>
      <BitField start="12" size="2" name="STOP" description="stop bits These bits are used for programming the stop bits. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="1 stop bit" />
        <Enum name="B_0x1" start="0x1" description="0.5 stop bit." />
        <Enum name="B_0x2" start="0x2" description="2 stop bits" />
        <Enum name="B_0x3" start="0x3" description="1.5 stop bits" />
      </BitField>
      <BitField start="14" size="1" name="LINEN" description="LIN mode enable This bit is set and cleared by software. The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN mode disabled" />
        <Enum name="B_0x1" start="0x1" description="LIN mode enabled" />
      </BitField>
      <BitField start="15" size="1" name="SWAP" description="Swap TX/RX pins This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX/RX pins are used as defined in standard pinout" />
        <Enum name="B_0x1" start="0x1" description="The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART." />
      </BitField>
      <BitField start="16" size="1" name="RXINV" description="RX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the RX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="17" size="1" name="TXINV" description="TX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the TX line. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)" />
        <Enum name="B_0x1" start="0x1" description="TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle)." />
      </BitField>
      <BitField start="18" size="1" name="DATAINV" description="Binary data inversion This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)" />
        <Enum name="B_0x1" start="0x1" description="Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H). The parity bit is also inverted." />
      </BitField>
      <BitField start="19" size="1" name="MSBFIRST" description="Most significant bit first This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="data is transmitted/received with data bit 0 first, following the start bit." />
        <Enum name="B_0x1" start="0x1" description="data is transmitted/received with the MSB (bit 7/8) first, following the start bit." />
      </BitField>
      <BitField start="20" size="1" name="ABREN" description="Auto baud rate enable This bit is set and cleared by software. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Auto baud rate detection is disabled." />
        <Enum name="B_0x1" start="0x1" description="Auto baud rate detection is enabled." />
      </BitField>
      <BitField start="21" size="2" name="ABRMOD" description="Auto baud rate mode These bits are set and cleared by software. This bitfield can only be written when ABREN = 0 or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If DATAINV&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 and/or MSBFIRST&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST) If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Measurement of the start bit is used to detect the baud rate." />
        <Enum name="B_0x1" start="0x1" description="Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)" />
        <Enum name="B_0x2" start="0x2" description="0x7F frame detection." />
        <Enum name="B_0x3" start="0x3" description="0x55 frame detection" />
      </BitField>
      <BitField start="23" size="1" name="RTOEN" description="Receiver timeout enable This bit is set and cleared by software. When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register). Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver timeout feature disabled." />
        <Enum name="B_0x1" start="0x1" description="Receiver timeout feature enabled." />
      </BitField>
      <BitField start="24" size="8" name="ADD" description="Address of the USART node ADD[7:4]: These bits give the address of the USART node or a character code to be recognized. They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). ADD[3:0]: These bits give the address of the USART node or a character code to be recognized. They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode. These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0)." />
    </Register>
    <Register start="+0x8" size="0" name="CR3" access="Read/Write" description="Control register 3" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EIE" description="Error interrupt enable Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or ORE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or NE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or UDR = 1 in the USART_ISR register).">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in the USART_ISR register." />
      </BitField>
      <BitField start="1" size="1" name="IREN" description="IrDA mode enable This bit is set and cleared by software. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="IrDA disabled" />
        <Enum name="B_0x1" start="0x1" description="IrDA enabled" />
      </BitField>
      <BitField start="2" size="1" name="IRLP" description="IrDA low-power This bit is used for selecting between normal and low-power IrDA modes This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Normal mode" />
        <Enum name="B_0x1" start="0x1" description="Low-power mode" />
      </BitField>
      <BitField start="3" size="1" name="HDSEL" description="Half-duplex selection Selection of Single-wire Half-duplex mode This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Half duplex mode is not selected" />
        <Enum name="B_0x1" start="0x1" description="Half duplex mode is selected" />
      </BitField>
      <BitField start="4" size="1" name="NACK" description="Smartcard NACK enable This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="NACK transmission in case of parity error is disabled" />
        <Enum name="B_0x1" start="0x1" description="NACK transmission during parity error is enabled" />
      </BitField>
      <BitField start="5" size="1" name="SCEN" description="Smartcard mode enable This bit is used for enabling Smartcard mode. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Smartcard Mode disabled" />
        <Enum name="B_0x1" start="0x1" description="Smartcard Mode enabled" />
      </BitField>
      <BitField start="6" size="1" name="DMAR" description="DMA enable receiver This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for reception" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for reception" />
      </BitField>
      <BitField start="7" size="1" name="DMAT" description="DMA enable transmitter This bit is set/reset by software">
        <Enum name="B_0x1" start="0x1" description="DMA mode is enabled for transmission" />
        <Enum name="B_0x0" start="0x0" description="DMA mode is disabled for transmission" />
      </BitField>
      <BitField start="8" size="1" name="RTSE" description="RTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="RTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received." />
      </BitField>
      <BitField start="9" size="1" name="CTSE" description="CTS enable This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0) Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="CTS hardware flow control disabled" />
        <Enum name="B_0x1" start="0x1" description="CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted." />
      </BitField>
      <BitField start="10" size="1" name="CTSIE" description="CTS interrupt enable Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt is inhibited" />
        <Enum name="B_0x1" start="0x1" description="An interrupt is generated whenever CTSIF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="11" size="1" name="ONEBIT" description="One sample bit method enable This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0).">
        <Enum name="B_0x0" start="0x0" description="Three sample bit method" />
        <Enum name="B_0x1" start="0x1" description="One sample bit method" />
      </BitField>
      <BitField start="12" size="1" name="OVRDIS" description="Overrun Disable This bit is used to disable the receive overrun detection. the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: This control bit enables checking the communication flow w/o reading the data">
        <Enum name="B_0x0" start="0x0" description="Overrun Error Flag, ORE, is set when received data is not read before receiving new data." />
        <Enum name="B_0x1" start="0x1" description="Overrun functionality is disabled. If new data is received while the RXNE flag is still set" />
      </BitField>
      <BitField start="13" size="1" name="DDRE" description="DMA Disable on Reception Error This bit can only be written when the USART is disabled (UE=0). Note: The reception errors are: parity error, framing error or noise error.">
        <Enum name="B_0x0" start="0x0" description="DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode)." />
        <Enum name="B_0x1" start="0x1" description="DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag." />
      </BitField>
      <BitField start="14" size="1" name="DEM" description="Driver enable mode This bit enables the user to activate the external transceiver control, through the DE signal. This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .">
        <Enum name="B_0x0" start="0x0" description="DE function is disabled." />
        <Enum name="B_0x1" start="0x1" description="DE function is enabled. The DE signal is output on the RTS pin." />
      </BitField>
      <BitField start="15" size="1" name="DEP" description="Driver enable polarity selection This bit can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="DE signal is active high." />
        <Enum name="B_0x1" start="0x1" description="DE signal is active low." />
      </BitField>
      <BitField start="17" size="3" name="SCARCNT" description="Smartcard auto-retry count This bitfield specifies the number of retries for transmission and reception in Smartcard mode. In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set). In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set). This bitfield must be programmed only when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). When the USART is enabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), this bitfield may only be written to 0x0, in order to stop retransmission. Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="retransmission disabled - No automatic retransmission in transmit mode." />
        <Enum name="B_0x1" start="0x1" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x2" start="0x2" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x3" start="0x3" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x4" start="0x4" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x5" start="0x5" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x6" start="0x6" description="number of automatic retransmission attempts (before signaling error)" />
        <Enum name="B_0x7" start="0x7" description="number of automatic retransmission attempts (before signaling error)" />
      </BitField>
      <BitField start="20" size="2" name="WUS" description="Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="WUF active on address match (as defined by ADD[7:0] and ADDM7)" />
        <Enum name="B_0x2" start="0x2" description="WUF active on start bit detection" />
        <Enum name="B_0x3" start="0x3" description="WUF active on RXNE/RXFNE." />
      </BitField>
      <BitField start="22" size="1" name="WUFIE" description="Wakeup from low-power mode interrupt enable This bit is set and cleared by software. Note: WUFIE must be set before entering in low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever WUF = 1 in the USART_ISR register" />
      </BitField>
      <BitField start="23" size="1" name="TXFTIE" description="TXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG." />
      </BitField>
      <BitField start="24" size="1" name="TCBGTIE" description="Transmission Complete before guard time, interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated whenever TCBGT=1 in the USART_ISR register" />
      </BitField>
      <BitField start="25" size="3" name="RXFTCFG" description="Receive FIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="Receive FIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="Receive FIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="Receive FIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="Receive FIFO becomes full" />
      </BitField>
      <BitField start="28" size="1" name="RXFTIE" description="RXFIFO threshold interrupt enable This bit is set and cleared by software.">
        <Enum name="B_0x0" start="0x0" description="Interrupt inhibited" />
        <Enum name="B_0x1" start="0x1" description="USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG." />
      </BitField>
      <BitField start="29" size="3" name="TXFTCFG" description="TXFIFO threshold configuration Remaining combinations: Reserved">
        <Enum name="B_0x0" start="0x0" description="TXFIFO reaches 1/8 of its depth" />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reaches 1/4 of its depth" />
        <Enum name="B_0x2" start="0x2" description="TXFIFO reaches 1/2 of its depth" />
        <Enum name="B_0x3" start="0x3" description="TXFIFO reaches 3/4 of its depth" />
        <Enum name="B_0x4" start="0x4" description="TXFIFO reaches 7/8 of its depth" />
        <Enum name="B_0x5" start="0x5" description="TXFIFO becomes empty" />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="BRR" access="Read/Write" description="Baud rate register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="16" name="BRR" description="USART baud rate" />
    </Register>
    <Register start="+0x10" size="0" name="GTPR" access="Read/Write" description="Guard time and prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="8" name="PSC" description="Prescaler value In IrDA low-power and normal IrDA mode: PSC[7:0] = IrDA Normal and Low-Power baud rate PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits): In Smartcard mode: PSC[4:0]&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; Prescaler value PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency: ... 0010&#xc3;&#x82;&#xc2; 0000: Divides the source clock by 32 (IrDA mode) ... 1111&#xc3;&#x82;&#xc2; 1111: Divides the source clock by 255 (IrDA mode) This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: Bits [7:5] must be kept cleared if Smartcard mode is used. This bitfield is reserved and forced by hardware to '0&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; when the Smartcard and IrDA modes are not supported. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Reserved - do not program this value" />
        <Enum name="B_0x1" start="0x1" description="Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)" />
        <Enum name="B_0x2" start="0x2" description="Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)" />
        <Enum name="B_0x3" start="0x3" description="Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)" />
        <Enum name="B_0x1F" start="0x1F" description="Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)" />
      </BitField>
      <BitField start="8" size="8" name="GT" description="Guard time value This bitfield is used to program the Guard time value in terms of number of baud clock periods. This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value. This bitfield can only be written when the USART is disabled (UE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0). Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
    </Register>
    <Register start="+0x14" size="0" name="RTOR" access="Read/Write" description="Receiver timeout register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="24" name="RTO" description="Receiver timeout value" />
      <BitField start="24" size="8" name="BLEN" description="Block Length" />
    </Register>
    <Register start="+0x18" size="0" name="RQR" access="WriteOnly" description="Request register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ABRRQ" description="Auto baud rate request Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="1" size="1" name="SBKRQ" description="Send break request Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available. Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit." />
      <BitField start="2" size="1" name="MMRQ" description="Mute mode request Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag." />
      <BitField start="3" size="1" name="RXFRQ" description="Receive data flush request Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE. This enables to discard the received data without reading them, and avoid an overrun condition." />
      <BitField start="4" size="1" name="TXFRQ" description="Transmit data flush request When FIFO mode is disabled, writing '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes. Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register." />
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_ENABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x008000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861). This error is associated with the character in the USART_RDR.">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE = 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXFNE" description="RXFIFO not empty RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO. RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXFNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXFNF" description="TXFIFO not full TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR. An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register. Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time). This bit is used during single buffer transmission.">
        <Enum name="B_0x0" start="0x0" description="Transmit FIFO is full" />
        <Enum name="B_0x1" start="0x1" description="Transmit FIFO is not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXFNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="23" size="1" name="TXFE" description="TXFIFO empty This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register. An interrupt is generated if the TXFEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 30) in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO not empty." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO empty." />
      </BitField>
      <BitField start="24" size="1" name="RXFF" description="RXFIFO full This bit is set by hardware when the number of received data corresponds to RXFIFO&#xc3;&#x82;&#xc2; size&#xc3;&#x82;&#xc2; +&#xc3;&#x82;&#xc2; 1 (RXFIFO full + 1 data in the USART_RDR register. An interrupt is generated if the RXFFIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="RXFIFO not full." />
        <Enum name="B_0x1" start="0x1" description="RXFIFO Full." />
      </BitField>
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
      <BitField start="26" size="1" name="RXFT" description="RXFIFO threshold flag This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 27) in the USART_CR3 register. Note: When the RXFTCFG threshold is configured to '101&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.">
        <Enum name="B_0x0" start="0x0" description="Receive FIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="Receive FIFO reached the programmed threshold." />
      </BitField>
      <BitField start="27" size="1" name="TXFT" description="TXFIFO threshold flag This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 (bit 31) in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="TXFIFO does not reach the programmed threshold." />
        <Enum name="B_0x1" start="0x1" description="TXFIFO reached the programmed threshold." />
      </BitField>
    </Register>
    <Register start="+0x1C" size="0" name="ISR_FIFO_DISABLED" access="ReadOnly" description="Interrupt &amp; status register" reset_value="0x000000C0" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PE" description="Parity error This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No parity error" />
        <Enum name="B_0x1" start="0x1" description="Parity error" />
      </BitField>
      <BitField start="1" size="1" name="FE" description="Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Framing error is detected" />
        <Enum name="B_0x1" start="0x1" description="Framing error or break character is detected" />
      </BitField>
      <BitField start="2" size="1" name="NE" description="Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page&#xc3;&#x82;&#xc2; 861).">
        <Enum name="B_0x0" start="0x0" description="No noise is detected" />
        <Enum name="B_0x1" start="0x1" description="Noise is detected" />
      </BitField>
      <BitField start="3" size="1" name="ORE" description="Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXNE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 or EIE &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.">
        <Enum name="B_0x0" start="0x0" description="No overrun error" />
        <Enum name="B_0x1" start="0x1" description="Overrun error is detected" />
      </BitField>
      <BitField start="4" size="1" name="IDLE" description="Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1), IDLE is set if the USART is not mute (RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0), whatever the Mute mode selected by the WAKE bit. If RWU&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, IDLE is not set.">
        <Enum name="B_0x0" start="0x0" description="No Idle line is detected" />
        <Enum name="B_0x1" start="0x1" description="Idle line is detected" />
      </BitField>
      <BitField start="5" size="1" name="RXNE" description="Read data register not empty RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXNEIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data is not received" />
        <Enum name="B_0x1" start="0x1" description="Received data is ready to be read." />
      </BitField>
      <BitField start="6" size="1" name="TC" description="Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. It is set by hardware when the transmission of a frame containing data is complete and when TXE is set. An interrupt is generated if TCIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register. TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register. Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete" />
      </BitField>
      <BitField start="7" size="1" name="TXE" description="Transmit data register empty TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 mode, in case of transmission failure). An interrupt is generated if the TXEIE bit &#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="Data register full" />
        <Enum name="B_0x1" start="0x1" description="Data register not full" />
      </BitField>
      <BitField start="8" size="1" name="LBDF" description="LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="LIN Break not detected" />
        <Enum name="B_0x1" start="0x1" description="LIN break detected" />
      </BitField>
      <BitField start="9" size="1" name="CTSIF" description="CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="No change occurred on the nCTS status line" />
        <Enum name="B_0x1" start="0x1" description="A change occurred on the nCTS status line" />
      </BitField>
      <BitField start="10" size="1" name="CTS" description="CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="nCTS line set" />
        <Enum name="B_0x1" start="0x1" description="nCTS line reset" />
      </BitField>
      <BitField start="11" size="1" name="RTOF" description="Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.">
        <Enum name="B_0x0" start="0x0" description="Timeout value not reached" />
        <Enum name="B_0x1" start="0x1" description="Timeout value reached without any data reception" />
      </BitField>
      <BitField start="12" size="1" name="EOBF" description="End of block flag This bit is set by hardware when a complete block has been received (for example T&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if the EOBIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR2 register. It is cleared by software, writing 1 to the EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="End of Block not reached" />
        <Enum name="B_0x1" start="0x1" description="End of Block (number of characters) reached" />
      </BitField>
      <BitField start="13" size="1" name="UDR" description="SPI slave underrun error flag In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="No underrun error" />
        <Enum name="B_0x1" start="0x1" description="underrun error" />
      </BitField>
      <BitField start="14" size="1" name="ABRE" description="Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="15" size="1" name="ABRF" description="Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABRE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1) (ABRE, RXNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value." />
      <BitField start="16" size="1" name="BUSY" description="Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).">
        <Enum name="B_0x0" start="0x0" description="USART is idle (no reception)" />
        <Enum name="B_0x1" start="0x1" description="Reception on going" />
      </BitField>
      <BitField start="17" size="1" name="CMF" description="Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1in the USART_CR1 register.">
        <Enum name="B_0x0" start="0x0" description="No Character match detected" />
        <Enum name="B_0x1" start="0x1" description="Character Match detected" />
      </BitField>
      <BitField start="18" size="1" name="SBKF" description="Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.">
        <Enum name="B_0x0" start="0x0" description="Break character transmitted" />
        <Enum name="B_0x1" start="0x1" description="Break character requested by setting SBKRQ bit in USART_RQR register" />
      </BitField>
      <BitField start="19" size="1" name="RWU" description="Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .">
        <Enum name="B_0x0" start="0x0" description="Receiver in active mode" />
        <Enum name="B_0x1" start="0x1" description="Receiver in Mute mode" />
      </BitField>
      <BitField start="20" size="1" name="WUF" description="Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="21" size="1" name="TEACK" description="Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0, followed by TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR1 register, in order to respect the TE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 0 minimum period." />
      <BitField start="22" size="1" name="REACK" description="Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ." />
      <BitField start="25" size="1" name="TCBGT" description="Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. Refer to on page&#xc3;&#x82;&#xc2; 835.">
        <Enum name="B_0x0" start="0x0" description="Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)" />
        <Enum name="B_0x1" start="0x1" description="Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card)." />
      </BitField>
    </Register>
    <Register start="+0x20" size="0" name="ICR" access="WriteOnly" description="Interrupt flag clear register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="PECF" description="Parity error clear flag Writing 1 to this bit clears the PE flag in the USART_ISR register." />
      <BitField start="1" size="1" name="FECF" description="Framing error clear flag Writing 1 to this bit clears the FE flag in the USART_ISR register." />
      <BitField start="2" size="1" name="NECF" description="Noise detected clear flag Writing 1 to this bit clears the NE flag in the USART_ISR register." />
      <BitField start="3" size="1" name="ORECF" description="Overrun error clear flag Writing 1 to this bit clears the ORE flag in the USART_ISR register." />
      <BitField start="4" size="1" name="IDLECF" description="Idle line detected clear flag Writing 1 to this bit clears the IDLE flag in the USART_ISR register." />
      <BitField start="5" size="1" name="TXFECF" description="TXFIFO empty clear flag Writing 1 to this bit clears the TXFE flag in the USART_ISR register." />
      <BitField start="6" size="1" name="TCCF" description="Transmission complete clear flag Writing 1 to this bit clears the TC flag in the USART_ISR register." />
      <BitField start="7" size="1" name="TCBGTCF" description="Transmission complete before Guard time clear flag Writing 1 to this bit clears the TCBGT flag in the USART_ISR register." />
      <BitField start="8" size="1" name="LBDCF" description="LIN break detection clear flag Writing 1 to this bit clears the LBDF flag in the USART_ISR register. Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="9" size="1" name="CTSCF" description="CTS clear flag Writing 1 to this bit clears the CTSIF flag in the USART_ISR register. Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="11" size="1" name="RTOCF" description="Receiver timeout clear flag Writing 1 to this bit clears the RTOF flag in the USART_ISR register. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
      <BitField start="12" size="1" name="EOBCF" description="End of block clear flag Writing 1 to this bit clears the EOBF flag in the USART_ISR register. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ." />
      <BitField start="13" size="1" name="UDRCF" description="SPI slave underrun clear flag Writing 1 to this bit clears the UDRF flag in the USART_ISR register. Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to" />
      <BitField start="17" size="1" name="CMCF" description="Character match clear flag Writing 1 to this bit clears the CMF flag in the USART_ISR register." />
      <BitField start="20" size="1" name="WUCF" description="Wakeup from low-power mode clear flag Writing 1 to this bit clears the WUF flag in the USART_ISR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page&#xc3;&#x82;&#xc2; 835." />
    </Register>
    <Register start="+0x24" size="0" name="RDR" access="ReadOnly" description="Receive data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="RDR" description="Receive data value" />
    </Register>
    <Register start="+0x28" size="0" name="TDR" access="Read/Write" description="Transmit data register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="9" name="TDR" description="Transmit data value" />
    </Register>
    <Register start="+0x2C" size="0" name="PRESC" access="Read/Write" description="Prescaler register" reset_value="0x0000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="PRESCALER" description="Clock prescaler The USART input clock can be divided by a prescaler factor: Remaining combinations: Reserved Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.">
        <Enum name="B_0x0" start="0x0" description="input clock not divided" />
        <Enum name="B_0x1" start="0x1" description="input clock divided by 2" />
        <Enum name="B_0x2" start="0x2" description="input clock divided by 4" />
        <Enum name="B_0x3" start="0x3" description="input clock divided by 6" />
        <Enum name="B_0x4" start="0x4" description="input clock divided by 8" />
        <Enum name="B_0x5" start="0x5" description="input clock divided by 10" />
        <Enum name="B_0x6" start="0x6" description="input clock divided by 12" />
        <Enum name="B_0x7" start="0x7" description="input clock divided by 16" />
        <Enum name="B_0x8" start="0x8" description="input clock divided by 32" />
        <Enum name="B_0x9" start="0x9" description="input clock divided by 64" />
        <Enum name="B_0xA" start="0xA" description="input clock divided by 128" />
        <Enum name="B_0xB" start="0xB" description="input clock divided by 256" />
      </BitField>
    </Register>
  </RegisterGroup>
  <RegisterGroup name="USB" start="0x40005C00" description="Universal serial bus full-speed host/device interface4">
    <Register start="+0x0" size="0" name="USB_CHEP0R" access="Read/Write" description="USB endpoint/channel 0 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="EA" description="endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction." />
      <BitField start="4" size="2" name="STATTX" description="Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions (&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Host mode&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK." />
      <BitField start="6" size="1" name="DTOGTX" description="Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1." />
      <BitField start="7" size="1" name="VTTX" description="Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions." />
      <BitField start="8" size="1" name="EPKIND" description="endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; instead of 'ACK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required." />
      <BitField start="9" size="2" name="UTYPE" description="USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode" />
      <BitField start="11" size="1" name="SETUP" description="Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated." />
      <BitField start="12" size="2" name="STATRX" description="Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate." />
      <BitField start="14" size="1" name="DTOGRX" description="Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1." />
      <BitField start="15" size="1" name="VTRX" description="USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect." />
      <BitField start="16" size="7" name="DEVADDR" description="Host mode Device address assigned to the endpoint during the enumeration process." />
      <BitField start="23" size="1" name="NAK" description="Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device." />
      <BitField start="24" size="1" name="LS_EP" description="Low speed endpoint &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.">
        <Enum name="B_0x0" start="0x0" description="Full speed endpoint" />
        <Enum name="B_0x1" start="0x1" description="Low speed endpoint" />
      </BitField>
      <BitField start="25" size="1" name="ERR_TX" description="Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="26" size="1" name="ERR_RX" description="Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="27" size="2" name="THREE_ERR_TX" description="Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
      <BitField start="29" size="2" name="THREE_ERR_RX" description="Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="USB_CHEP1R" access="Read/Write" description="USB endpoint/channel 1 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="EA" description="endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction." />
      <BitField start="4" size="2" name="STATTX" description="Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions (&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Host mode&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK." />
      <BitField start="6" size="1" name="DTOGTX" description="Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1." />
      <BitField start="7" size="1" name="VTTX" description="Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions." />
      <BitField start="8" size="1" name="EPKIND" description="endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; instead of 'ACK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required." />
      <BitField start="9" size="2" name="UTYPE" description="USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode" />
      <BitField start="11" size="1" name="SETUP" description="Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated." />
      <BitField start="12" size="2" name="STATRX" description="Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate." />
      <BitField start="14" size="1" name="DTOGRX" description="Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1." />
      <BitField start="15" size="1" name="VTRX" description="USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect." />
      <BitField start="16" size="7" name="DEVADDR" description="Host mode Device address assigned to the endpoint during the enumeration process." />
      <BitField start="23" size="1" name="NAK" description="Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device." />
      <BitField start="24" size="1" name="LS_EP" description="Low speed endpoint &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.">
        <Enum name="B_0x0" start="0x0" description="Full speed endpoint" />
        <Enum name="B_0x1" start="0x1" description="Low speed endpoint" />
      </BitField>
      <BitField start="25" size="1" name="ERR_TX" description="Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="26" size="1" name="ERR_RX" description="Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="27" size="2" name="THREE_ERR_TX" description="Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
      <BitField start="29" size="2" name="THREE_ERR_RX" description="Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="USB_CHEP2R" access="Read/Write" description="USB endpoint/channel 2 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="EA" description="endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction." />
      <BitField start="4" size="2" name="STATTX" description="Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions (&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Host mode&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK." />
      <BitField start="6" size="1" name="DTOGTX" description="Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1." />
      <BitField start="7" size="1" name="VTTX" description="Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions." />
      <BitField start="8" size="1" name="EPKIND" description="endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; instead of 'ACK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required." />
      <BitField start="9" size="2" name="UTYPE" description="USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode" />
      <BitField start="11" size="1" name="SETUP" description="Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated." />
      <BitField start="12" size="2" name="STATRX" description="Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate." />
      <BitField start="14" size="1" name="DTOGRX" description="Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1." />
      <BitField start="15" size="1" name="VTRX" description="USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect." />
      <BitField start="16" size="7" name="DEVADDR" description="Host mode Device address assigned to the endpoint during the enumeration process." />
      <BitField start="23" size="1" name="NAK" description="Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device." />
      <BitField start="24" size="1" name="LS_EP" description="Low speed endpoint &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.">
        <Enum name="B_0x0" start="0x0" description="Full speed endpoint" />
        <Enum name="B_0x1" start="0x1" description="Low speed endpoint" />
      </BitField>
      <BitField start="25" size="1" name="ERR_TX" description="Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="26" size="1" name="ERR_RX" description="Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="27" size="2" name="THREE_ERR_TX" description="Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
      <BitField start="29" size="2" name="THREE_ERR_RX" description="Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
    </Register>
    <Register start="+0xC" size="0" name="USB_CHEP3R" access="Read/Write" description="USB endpoint/channel 3 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="EA" description="endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction." />
      <BitField start="4" size="2" name="STATTX" description="Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions (&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Host mode&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK." />
      <BitField start="6" size="1" name="DTOGTX" description="Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1." />
      <BitField start="7" size="1" name="VTTX" description="Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions." />
      <BitField start="8" size="1" name="EPKIND" description="endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; instead of 'ACK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required." />
      <BitField start="9" size="2" name="UTYPE" description="USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode" />
      <BitField start="11" size="1" name="SETUP" description="Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated." />
      <BitField start="12" size="2" name="STATRX" description="Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate." />
      <BitField start="14" size="1" name="DTOGRX" description="Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1." />
      <BitField start="15" size="1" name="VTRX" description="USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect." />
      <BitField start="16" size="7" name="DEVADDR" description="Host mode Device address assigned to the endpoint during the enumeration process." />
      <BitField start="23" size="1" name="NAK" description="Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device." />
      <BitField start="24" size="1" name="LS_EP" description="Low speed endpoint &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.">
        <Enum name="B_0x0" start="0x0" description="Full speed endpoint" />
        <Enum name="B_0x1" start="0x1" description="Low speed endpoint" />
      </BitField>
      <BitField start="25" size="1" name="ERR_TX" description="Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="26" size="1" name="ERR_RX" description="Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="27" size="2" name="THREE_ERR_TX" description="Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
      <BitField start="29" size="2" name="THREE_ERR_RX" description="Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
    </Register>
    <Register start="+0x10" size="0" name="USB_CHEP4R" access="Read/Write" description="USB endpoint/channel 4 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="EA" description="endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction." />
      <BitField start="4" size="2" name="STATTX" description="Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions (&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Host mode&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK." />
      <BitField start="6" size="1" name="DTOGTX" description="Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1." />
      <BitField start="7" size="1" name="VTTX" description="Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions." />
      <BitField start="8" size="1" name="EPKIND" description="endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; instead of 'ACK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required." />
      <BitField start="9" size="2" name="UTYPE" description="USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode" />
      <BitField start="11" size="1" name="SETUP" description="Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated." />
      <BitField start="12" size="2" name="STATRX" description="Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate." />
      <BitField start="14" size="1" name="DTOGRX" description="Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1." />
      <BitField start="15" size="1" name="VTRX" description="USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect." />
      <BitField start="16" size="7" name="DEVADDR" description="Host mode Device address assigned to the endpoint during the enumeration process." />
      <BitField start="23" size="1" name="NAK" description="Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device." />
      <BitField start="24" size="1" name="LS_EP" description="Low speed endpoint &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.">
        <Enum name="B_0x0" start="0x0" description="Full speed endpoint" />
        <Enum name="B_0x1" start="0x1" description="Low speed endpoint" />
      </BitField>
      <BitField start="25" size="1" name="ERR_TX" description="Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="26" size="1" name="ERR_RX" description="Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="27" size="2" name="THREE_ERR_TX" description="Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
      <BitField start="29" size="2" name="THREE_ERR_RX" description="Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
    </Register>
    <Register start="+0x14" size="0" name="USB_CHEP5R" access="Read/Write" description="USB endpoint/channel 5 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="EA" description="endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction." />
      <BitField start="4" size="2" name="STATTX" description="Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions (&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Host mode&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK." />
      <BitField start="6" size="1" name="DTOGTX" description="Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1." />
      <BitField start="7" size="1" name="VTTX" description="Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions." />
      <BitField start="8" size="1" name="EPKIND" description="endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; instead of 'ACK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required." />
      <BitField start="9" size="2" name="UTYPE" description="USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode" />
      <BitField start="11" size="1" name="SETUP" description="Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated." />
      <BitField start="12" size="2" name="STATRX" description="Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate." />
      <BitField start="14" size="1" name="DTOGRX" description="Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1." />
      <BitField start="15" size="1" name="VTRX" description="USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect." />
      <BitField start="16" size="7" name="DEVADDR" description="Host mode Device address assigned to the endpoint during the enumeration process." />
      <BitField start="23" size="1" name="NAK" description="Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device." />
      <BitField start="24" size="1" name="LS_EP" description="Low speed endpoint &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.">
        <Enum name="B_0x0" start="0x0" description="Full speed endpoint" />
        <Enum name="B_0x1" start="0x1" description="Low speed endpoint" />
      </BitField>
      <BitField start="25" size="1" name="ERR_TX" description="Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="26" size="1" name="ERR_RX" description="Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="27" size="2" name="THREE_ERR_TX" description="Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
      <BitField start="29" size="2" name="THREE_ERR_RX" description="Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
    </Register>
    <Register start="+0x18" size="0" name="USB_CHEP6R" access="Read/Write" description="USB endpoint/channel 6 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="EA" description="endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction." />
      <BitField start="4" size="2" name="STATTX" description="Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions (&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Host mode&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK." />
      <BitField start="6" size="1" name="DTOGTX" description="Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1." />
      <BitField start="7" size="1" name="VTTX" description="Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions." />
      <BitField start="8" size="1" name="EPKIND" description="endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; instead of 'ACK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required." />
      <BitField start="9" size="2" name="UTYPE" description="USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode" />
      <BitField start="11" size="1" name="SETUP" description="Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated." />
      <BitField start="12" size="2" name="STATRX" description="Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate." />
      <BitField start="14" size="1" name="DTOGRX" description="Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1." />
      <BitField start="15" size="1" name="VTRX" description="USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect." />
      <BitField start="16" size="7" name="DEVADDR" description="Host mode Device address assigned to the endpoint during the enumeration process." />
      <BitField start="23" size="1" name="NAK" description="Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device." />
      <BitField start="24" size="1" name="LS_EP" description="Low speed endpoint &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.">
        <Enum name="B_0x0" start="0x0" description="Full speed endpoint" />
        <Enum name="B_0x1" start="0x1" description="Low speed endpoint" />
      </BitField>
      <BitField start="25" size="1" name="ERR_TX" description="Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="26" size="1" name="ERR_RX" description="Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="27" size="2" name="THREE_ERR_TX" description="Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
      <BitField start="29" size="2" name="THREE_ERR_RX" description="Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
    </Register>
    <Register start="+0x1C" size="0" name="USB_CHEP7R" access="Read/Write" description="USB endpoint/channel 7 register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="EA" description="endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction." />
      <BitField start="4" size="2" name="STATTX" description="Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions (&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;Host mode&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK." />
      <BitField start="6" size="1" name="DTOGTX" description="Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1." />
      <BitField start="7" size="1" name="VTTX" description="Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions." />
      <BitField start="8" size="1" name="EPKIND" description="endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; instead of 'ACK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99;. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required." />
      <BitField start="9" size="2" name="UTYPE" description="USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode" />
      <BitField start="11" size="1" name="SETUP" description="Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated." />
      <BitField start="12" size="2" name="STATRX" description="Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;VALID&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d; or &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9c;DISABLED&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x9d;, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; or 'NAK&#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x99; for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate." />
      <BitField start="14" size="1" name="DTOGRX" description="Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1." />
      <BitField start="15" size="1" name="VTRX" description="USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect." />
      <BitField start="16" size="7" name="DEVADDR" description="Host mode Device address assigned to the endpoint during the enumeration process." />
      <BitField start="23" size="1" name="NAK" description="Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device." />
      <BitField start="24" size="1" name="LS_EP" description="Low speed endpoint &#xc3;&#xa2;&#xc2;&#x80;&#xc2;&#x93; host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.">
        <Enum name="B_0x0" start="0x0" description="Full speed endpoint" />
        <Enum name="B_0x1" start="0x1" description="Low speed endpoint" />
      </BitField>
      <BitField start="25" size="1" name="ERR_TX" description="Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="26" size="1" name="ERR_RX" description="Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated." />
      <BitField start="27" size="2" name="THREE_ERR_TX" description="Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
      <BitField start="29" size="2" name="THREE_ERR_RX" description="Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:">
        <Enum name="B_0x0" start="0x0" description="Less than 3 errors received." />
        <Enum name="B_0x1" start="0x1" description="More than 3 errors received, last error is timeout error." />
        <Enum name="B_0x2" start="0x2" description="More than 3 errors received, last error is data error (CRC error)." />
        <Enum name="B_0x3" start="0x3" description="More than 3 errors received, last error is protocol error (invalid PID, false EOP, bitstuffing error, SYNC error)." />
      </BitField>
    </Register>
    <Register start="+0x40" size="0" name="USB_CNTR" access="Read/Write" reset_value="0x00000003" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="USBRST" description="USB Reset Software can set this bit to reset the USB core, exactly as it happens when receiving a RESET signaling on the USB.The USB peripheral, in response to a RESET, resets its internal protocol state machine. Reception and transmission are disabled until the RST_DCON bit is cleared. All configuration registers do not reset: the microcontroller must explicitly clear these registers (this is to ensure that the RST_DCON interrupt can be safely delivered, and any transaction immediately followed by a RESET can be completed). The function address and endpoint registers are reset by an USB reset event. Software sets this bit to drive USB reset state on the bus and initialize the device. USB reset terminates as soon as this bit is cleared by software.">
        <Enum name="B_0x0_DEVICE_MODE" start="0x0" description="No effect" />
        <Enum name="B_0x1_DEVICE_MODE" start="0x1" description="USB core is under reset" />
        <Enum name="B_0x0_HOST_MODE" start="0x0" description="No effect" />
        <Enum name="B_0x1_HOST_MODE" start="0x1" description="USB reset driven" />
      </BitField>
      <BitField start="1" size="1" name="PDWN" description="Power down This bit is used to completely switch off all USB-related analog parts if it is required to completely disable the USB peripheral for any reason. When this bit is set, the USB peripheral is disconnected from the transceivers and it cannot be used.">
        <Enum name="B_0x0" start="0x0" description="Exit power down." />
        <Enum name="B_0x1" start="0x1" description="Enter power down mode." />
      </BitField>
      <BitField start="2" size="1" name="SUSPRDY" description="Suspend state effective This bit is set by hardware as soon as the suspend state entered through the SUSPEN control gets internally effective. In this state USB activity is suspended, USB clock is gated, transceiver is set in low power mode by disabling the differential receiver. Only asynchronous wakeup logic and single ended receiver is kept alive to detect remote wakeup or resume events. Software must poll this bit to confirm it to be set before any STOP mode entry. This bit is cleared by hardware simultaneously to the WAKEUP flag being set.">
        <Enum name="B_0x0" start="0x0" description="Normal operation" />
        <Enum name="B_0x1" start="0x1" description="Suspend state" />
      </BitField>
      <BitField start="3" size="1" name="SUSPEN" description="Suspend state enable Software can set this bit when the SUSP interrupt is received, which is issued when no traffic is received by the USB peripheral for 3ms. Software can also set this bit when the L1REQ interrupt is received with positive acknowledge sent. As soon as the suspend state is propagated internally all device activity is stopped, USB clock is gated, USB transceiver is set into low power mode and the SUSPRDY bit is set by hardware. In the case that device application wants to pursue more aggressive power saving by stopping the USB clock source and by moving the microcontroller to stop mode, as in the case of bus powered device application, it must first wait few cycles to see the SUSPRDY=1 acknowledge the suspend request. This bit is cleared by hardware simultaneous with the WAKEUP flag set. Software can set this bit when host application has nothing scheduled for the next frames and wants to enter long term power saving. When set, it stops immediately SOF generation and any other host activity, gates the USB clock and sets the transceiver in low power mode. If any USB transaction is on-going at the time SUSPEN is set, suspend is entered at the end of the current transaction. As soon as suspend state is propagated internally and gets effective the SUSPRDY bit is set. In the case that host application wants to pursue more aggressive power saving by stopping the USB clock source and by moving the micro-controller to STOP mode, it must first wait few cycles to see SUSPRDY=1 acknowledge to the suspend request. This bit is cleared by hardware simultaneous with the WAKEUP flag set.">
        <Enum name="B_0x0_DEVICE_MODE" start="0x0" description="No effect." />
        <Enum name="B_0x1_DEVICE_MODE" start="0x1" description="Enter L1/L2 suspend" />
        <Enum name="B_0x0_HOST_MODE" start="0x0" description="No effect." />
        <Enum name="B_0x1_HOST_MODE" start="0x1" description="Enter L1/L2 suspend" />
      </BitField>
      <BitField start="4" size="1" name="L2RES" description="L2 remote wakeup / resume driver Device mode The microcontroller can set this bit to send remote wake-up signaling to the host. It must be activated, according to USB specifications, for no less than 1ms and no more than 15ms after which the host PC is ready to drive the resume sequence up to its end. Host mode Software sets this bit to send resume signaling to the device. Software clears this bit to send end of resume to device and restart SOF generation. In the context of remote wake up, this bit is to be set following the WAKEUP interrupt.">
        <Enum name="B_0x0" start="0x0" description="No effect" />
        <Enum name="B_0x1" start="0x1" description="Send L2 resume signaling to device" />
      </BitField>
      <BitField start="5" size="1" name="L1RES" description="L1 remote wakeup / resume driver Device mode Software sets this bit to send a LPM L1 50&#xc3;&#x8e;&#xc2;&#xbc;s remote wakeup signaling to the host. After the signaling ends, this bit is cleared by hardware.">
        <Enum name="B_0x0" start="0x0" description="No effect" />
        <Enum name="B_0x1" start="0x1" description="Send 50&#xc3;&#x8e;&#xc2;&#xbc;s remote-wakeup signaling to host" />
      </BitField>
      <BitField start="7" size="1" name="L1REQM" description="LPM L1 state request interrupt mask">
        <Enum name="B_0x0" start="0x0" description="LPM L1 state request (L1REQ) interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="L1REQ interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set." />
      </BitField>
      <BitField start="8" size="1" name="ESOFM" description="Expected start of frame interrupt mask">
        <Enum name="B_0x0" start="0x0" description="Expected start of frame (ESOF) interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="ESOF interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set." />
      </BitField>
      <BitField start="9" size="1" name="SOFM" description="Start of frame interrupt mask">
        <Enum name="B_0x0" start="0x0" description="SOF interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="SOF interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set." />
      </BitField>
      <BitField start="10" size="1" name="RST_DCONM" description="USB reset request (Device mode) or device connect/disconnect (Host mode) interrupt mask">
        <Enum name="B_0x0" start="0x0" description="RESET interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="RESET interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set." />
      </BitField>
      <BitField start="11" size="1" name="SUSPM" description="Suspend mode interrupt mask">
        <Enum name="B_0x0" start="0x0" description="Suspend mode request (SUSP) interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="SUSP interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set." />
      </BitField>
      <BitField start="12" size="1" name="WKUPM" description="Wakeup interrupt mask">
        <Enum name="B_0x0" start="0x0" description="WKUP interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="WKUP interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set." />
      </BitField>
      <BitField start="13" size="1" name="ERRM" description="Error interrupt mask">
        <Enum name="B_0x0" start="0x0" description="ERR interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="ERR interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set." />
      </BitField>
      <BitField start="14" size="1" name="PMAOVRM" description="Packet memory area over / underrun interrupt mask">
        <Enum name="B_0x0" start="0x0" description="PMAOVR interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="PMAOVR interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set." />
      </BitField>
      <BitField start="15" size="1" name="CTRM" description="Correct transfer interrupt mask">
        <Enum name="B_0x0" start="0x0" description="Correct transfer (CTR) interrupt disabled." />
        <Enum name="B_0x1" start="0x1" description="CTR interrupt enabled, an interrupt request is generated when the corresponding bit in the USB_ISTR register is set." />
      </BitField>
      <BitField start="16" size="1" name="THR512M" description="512 byte threshold interrupt mask">
        <Enum name="B_0x0" start="0x0" description="512 byte threshold interrupt disabled" />
        <Enum name="B_0x1" start="0x1" description="512 byte threshold interrupt enabled" />
      </BitField>
      <BitField start="31" size="1" name="HOST" description="HOST mode HOST bit selects betweens host or device USB mode of operation. It must be set before enabling the USB peripheral by the function enable bit.">
        <Enum name="B_0x0" start="0x0" description="USB Device function" />
        <Enum name="B_0x1" start="0x1" description="USB host function" />
      </BitField>
    </Register>
    <Register start="+0x44" size="0" name="USB_ISTR" access="Read/Write" description="USB interrupt status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="4" name="IDN" description="Device Endpoint / host channel identification number These bits are written by the hardware according to the host channel or device endpoint number, which generated the interrupt request. If several endpoint/channel transactions are pending, the hardware writes the identification number related to the endpoint/channel having the highest priority defined in the following way: two levels are defined, in order of priority: isochronous and double-buffered bulk channels/endpoints are considered first and then the others are examined. If more than one endpoint/channel from the same set is requesting an interrupt, the IDN bits in USB_ISTR register are assigned according to the lowest requesting register, CHEP0R having the highest priority followed by CHEP1R and so on. The application software can assign a register to each endpoint/channel according to this priority scheme, so as to order the concurring endpoint/channel requests in a suitable way. These bits are read only." />
      <BitField start="4" size="1" name="DIR" description="Direction of transaction This bit is written by the hardware according to the direction of the successful transaction, which generated the interrupt request. If DIR bit=0, VTTX bit is set in the USB_CHEPnR register related to the interrupting endpoint. The interrupting transaction is of IN type (data transmitted by the USB peripheral to the host PC). If DIR bit=1, VTRX bit or both VTTX/VTRX are set in the USB_CHEPnR register related to the interrupting endpoint. The interrupting transaction is of OUT type (data received by the USB peripheral from the host PC) or two pending transactions are waiting to be processed. This information can be used by the application software to access the USB_CHEPnR bits related to the triggering transaction since it represents the direction having the interrupt pending. This bit is read-only." />
      <BitField start="7" size="1" name="L1REQ" description="LPM L1 state request Device mode This bit is set by the hardware when LPM command to enter the L1 state is successfully received and acknowledged. This bit is read/write but only 0 can be written and writing 1 has no effect." />
      <BitField start="8" size="1" name="ESOF" description="Expected start of frame Device mode This bit is set by the hardware when an SOF packet is expected but not received. The host sends an SOF packet each 1ms, but if the device does not receive it properly, the suspend timer issues this interrupt. If three consecutive ESOF interrupts are generated (for example three SOF packets are lost) without any traffic occurring in between, a SUSP interrupt is generated. This bit is set even when the missing SOF packets occur while the suspend timer is not yet locked. This bit is read/write but only 0 can be written and writing 1 has no effect." />
      <BitField start="9" size="1" name="SOF" description="Start of frame This bit signals the beginning of a new USB frame and it is set when a SOF packet arrives through the USB bus. The interrupt service routine may monitor the SOF events to have a 1ms synchronization event to the USB host and to safely read the USB_FNR register which is updated at the SOF packet reception (this could be useful for isochronous applications). This bit is read/write but only 0 can be written and writing 1 has no effect." />
      <BitField start="10" size="1" name="RST_DCON" description="USB reset request (Device mode) or device connect/disconnect (Host mode) Device mode This bit is set by hardware when an USB reset is released by the host and the bus returns to idle. USB reset state is internally detected after the sampling of 60 consecutive SE0 cycles. Host mode This bit is set by hardware when device connection or device disconnection is detected. Device connection is signaled after J state is sampled for 22 cycles consecutively from unconnected state. Device disconnection is signaled after SE0 state is seen for 22 bit times consecutively from connected state." />
      <BitField start="11" size="1" name="SUSP" description="Suspend mode request Device mode This bit is set by the hardware when no traffic has been received for 3ms, indicating a suspend mode request from the USB bus. The suspend condition check is enabled immediately after any USB reset and it is disabled by the hardware when the suspend mode is active (SUSPEN=1) until the end of resume sequence. This bit is read/write but only 0 can be written and writing 1 has no effect." />
      <BitField start="12" size="1" name="WKUP" description="Wakeup This bit is set to 1 by the hardware when, during suspend mode, activity is detected that wakes up the USB peripheral. This event asynchronously clears the SUSPRDY bit in the CTLR register and activates the USB_WAKEUP line, which can be used to notify the rest of the device (for example wakeup unit) about the start of the resume process. This bit is read/write but only 0 can be written and writing 1 has no effect." />
      <BitField start="13" size="1" name="ERR" description="Error This flag is set whenever one of the errors listed below has occurred: NANS: No ANSwer. The timeout for a host response has expired. CRC: Cyclic redundancy check error. One of the received CRCs, either in the token or in the data, was wrong. BST: Bit stuffing error. A bit stuffing error was detected anywhere in the PID, data, and/or CRC. FVIO: Framing format violation. A non-standard frame was received (EOP not in the right place, wrong token sequence, etc.). The USB software can usually ignore errors, since the USB peripheral and the PC host manage retransmission in case of errors in a fully transparent way. This interrupt can be useful during the software development phase, or to monitor the quality of transmission over the USB bus, to flag possible problems to the user (for example loose connector, too noisy environment, broken conductor in the USB cable and so on). This bit is read/write but only 0 can be written and writing 1 has no effect." />
      <BitField start="14" size="1" name="PMAOVR" description="Packet memory area over / underrun This bit is set if the microcontroller has not been able to respond in time to an USB memory request. The USB peripheral handles this event in the following way: During reception an ACK handshake packet is not sent, during transmission a bit-stuff error is forced on the transmitted stream; in both cases the host retries the transaction. The PMAOVR interrupt should never occur during normal operations. Since the failed transaction is retried by the host, the application software has the chance to speed-up device operations during this interrupt handling, to be ready for the next transaction retry; however this does not happen during isochronous transfers (no isochronous transaction is anyway retried) leading to a loss of data in this case. This bit is read/write but only 0 can be written and writing 1 has no effect." />
      <BitField start="15" size="1" name="CTR" description="Completed transfer in host mode This bit is set by the hardware to indicate that an endpoint/channel has successfully completed a transaction; using DIR and IDN bits software can determine which endpoint/channel requested the interrupt. This bit is read-only." />
      <BitField start="16" size="1" name="THR512" description="512 byte threshold interrupt This bit is set to 1 by the hardware when 512 bytes have been transmitted or received during isochronous transfers. This bit is read/write but only 0 can be written and writing 1 has no effect. Note that no information is available to indicate the associated channel/endpoint, however in practice only one ISO endpoint/channel with such large packets can be supported, so that channel." />
      <BitField start="29" size="1" name="DCON_STAT" description="Device connection status Host mode: This bit contains information about device connection status. It is set by hardware when a LS/FS device is attached to the host while it is reset when the device is disconnected.">
        <Enum name="B_0x0" start="0x0" description="No device connected" />
        <Enum name="B_0x1" start="0x1" description="FS or LS device connected to the host" />
      </BitField>
      <BitField start="30" size="1" name="LS_DCON" description="Low speed device connected Host mode: This bit is set by hardware when an LS device connection is detected. Device connection is signaled after LS J-state is sampled for 22 consecutive cycles of the USB clock (48MHz) from the unconnected state." />
    </Register>
    <Register start="+0x48" size="0" name="USB_FNR" access="Read/Write" description="USB frame number register" reset_value="0x00000000" reset_mask="0xFFFFF000">
      <BitField start="0" size="11" name="FN" description="Frame number This bit field contains the 11-bits frame number contained in the last received SOF packet. The frame number is incremented for every frame sent by the host and it is useful for isochronous transfers. This bit field is updated on the generation of an SOF interrupt." />
      <BitField start="11" size="2" name="LSOF" description="Lost SOF Device mode These bits are written by the hardware when an ESOF interrupt is generated, counting the number of consecutive SOF packets lost. At the reception of an SOF packet, these bits are cleared." />
      <BitField start="13" size="1" name="LCK" description="Locked Device mode This bit is set by the hardware when at least two consecutive SOF packets have been received after the end of an USB reset condition or after the end of an USB resume sequence. Once locked, the frame timer remains in this state until an USB reset or USB suspend event occurs." />
      <BitField start="14" size="1" name="RXDM" description="Receive data - line status This bit can be used to observe the status of received data minus upstream port data line. It can be used during end-of-suspend routines to help determining the wakeup event." />
      <BitField start="15" size="1" name="RXDP" description="Receive data + line status This bit can be used to observe the status of received data plus upstream port data line. It can be used during end-of-suspend routines to help determining the wakeup event." />
    </Register>
    <Register start="+0x4C" size="0" name="USB_DADDR" access="Read/Write" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="7" name="ADD" description="Device address Device mode These bits contain the USB function address assigned by the host PC during the enumeration process. Both this field and the endpoint/channel address (EA) field in the associated USB_CHEPnR register must match with the information contained in a USB token in order to handle a transaction to the required endpoint. Host mode These bits contain the address transmitted with the LPM transaction" />
      <BitField start="7" size="1" name="EF" description="Enable function This bit is set by the software to enable the USB Device. The address of this device is contained in the following ADD[6:0] bits. If this bit is at 0 no transactions are handled, irrespective of the settings of USB_CHEPnR registers." />
    </Register>
    <Register start="+0x54" size="0" name="USB_LPMCSR" access="Read/Write" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="LPMEN" description="LPM support enable Device mode This bit is set by the software to enable the LPM support within the USB Device. If this bit is at 0 no LPM transactions are handled." />
      <BitField start="1" size="1" name="LPMACK" description="LPM token acknowledge enable Device mode: The NYET/ACK is returned only on a successful LPM transaction: No errors in both the EXT token and the LPM token (else ERROR) A valid bLinkState = 0001B (L1) is received (else STALL)">
        <Enum name="B_0x0" start="0x0" description="the valid LPM token is NYET." />
        <Enum name="B_0x1" start="0x1" description="the valid LPM token is ACK." />
      </BitField>
      <BitField start="3" size="1" name="REMWAKE" description="bRemoteWake value Device mode This bit contains the bRemoteWake value received with last ACKed LPM Token" />
      <BitField start="4" size="4" name="BESL" description="BESL value Device mode These bits contain the BESL value received with last ACKed LPM Token" />
    </Register>
    <Register start="+0x58" size="0" name="USB_BCDR" access="Read/Write" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="BCDEN" description="Battery charging detector (BCD) enable Device mode This bit is set by the software to enable the BCD support within the USB Device. When enabled, the USB PHY is fully controlled by BCD and cannot be used for normal communication. Once the BCD discovery is finished, the BCD should be placed in OFF mode by clearing this bit to 0 in order to allow the normal USB operation." />
      <BitField start="1" size="1" name="DCDEN" description="Data contact detection (DCD) mode enable Device mode This bit is set by the software to put the BCD into DCD mode. Only one detection mode (DCD, PD, SD or OFF) should be selected to work correctly." />
      <BitField start="2" size="1" name="PDEN" description="Primary detection (PD) mode enable Device mode This bit is set by the software to put the BCD into PD mode. Only one detection mode (DCD, PD, SD or OFF) should be selected to work correctly." />
      <BitField start="3" size="1" name="SDEN" description="Secondary detection (SD) mode enable Device mode This bit is set by the software to put the BCD into SD mode. Only one detection mode (DCD, PD, SD or OFF) should be selected to work correctly." />
      <BitField start="4" size="1" name="DCDET" description="Data contact detection (DCD) status Device mode This bit gives the result of DCD.">
        <Enum name="B_0x0" start="0x0" description="data lines contact not detected." />
        <Enum name="B_0x1" start="0x1" description="data lines contact detected." />
      </BitField>
      <BitField start="5" size="1" name="PDET" description="Primary detection (PD) status Device mode This bit gives the result of PD.">
        <Enum name="B_0x0" start="0x0" description="no BCD support detected (connected to SDP or proprietary device)." />
        <Enum name="B_0x1" start="0x1" description="BCD support detected (connected to ACA, CDP or DCP)." />
      </BitField>
      <BitField start="6" size="1" name="SDET" description="Secondary detection (SD) status Device mode This bit gives the result of SD.">
        <Enum name="B_0x0" start="0x0" description="CDP detected." />
        <Enum name="B_0x1" start="0x1" description="DCP detected." />
      </BitField>
      <BitField start="7" size="1" name="PS2DET" description="DM pull-up detection status Device mode This bit is active only during PD and gives the result of comparison between DM voltage level and VLGC threshold. In normal situation, the DM level should be below this threshold. If it is above, it means that the DM is externally pulled high. This can be caused by connection to a PS2 port (which pulls-up both DP and DM lines) or to some proprietary charger not following the BCD specification.">
        <Enum name="B_0x0" start="0x0" description="Normal port detected (connected to SDP, ACA, CDP or DCP)." />
        <Enum name="B_0x1" start="0x1" description="PS2 port or proprietary charger detected." />
      </BitField>
      <BitField start="15" size="1" name="DPPU_DPD" description="DP pull-up / DPDM pull-down Device mode This bit is set by software to enable the embedded pull-up on DP line. Clearing it to 0 can be used to signal disconnect to the host when needed by the user software. Host mode This bit is set by software to enable the embedded pull-down on DP and DM lines." />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="VREFBUF" start="0x40010030" description="System configuration controller">
    <Register start="+0x0" size="0" name="VREFBUF_CSR" access="Read/Write" description="VREFBUF control and status register" reset_value="0x00000002" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="ENVR" description="Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode.">
        <Enum name="B_0x0" start="0x0" description="Internal voltage reference mode disable (external voltage reference mode)." />
        <Enum name="B_0x1" start="0x1" description="Internal voltage reference mode (reference buffer enable or hold mode) enable." />
      </BitField>
      <BitField start="1" size="1" name="HIZ" description="High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to for the mode descriptions depending on ENVR bit configuration.">
        <Enum name="B_0x0" start="0x0" description="VREF+ pin is internally connected to the voltage reference buffer output." />
        <Enum name="B_0x1" start="0x1" description="VREF+ pin is high impedance." />
      </BitField>
      <BitField start="2" size="1" name="VRS" description="Voltage reference scale This bit selects the value generated by the voltage reference buffer.">
        <Enum name="B_0x0" start="0x0" description="Voltage reference set to VREF_OUT1 (around 2.048 V)." />
        <Enum name="B_0x1" start="0x1" description="Voltage reference set to VREF_OUT2 (around 2.5 V)." />
      </BitField>
      <BitField start="3" size="1" name="VRR" description="Voltage reference buffer ready">
        <Enum name="B_0x0" start="0x0" description="the voltage reference buffer output is not ready." />
        <Enum name="B_0x1" start="0x1" description="the voltage reference buffer output reached the requested level." />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="VREFBUF_CCR" access="Read/Write" description="VREFBUF calibration control register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="6" name="TRIM" description="Trimming code These bits are automatically initialized after reset with the trimming value stored in the Flash memory during the production test. Writing into these bits allows the tuning of the internal reference buffer voltage." />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="WWDG" start="0x40002C00" description="System window watchdog">
    <Register start="+0x0" size="0" name="WWDG_CR" access="Read/Write" description="Control register" reset_value="0x0000007F" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="7" name="T" description="7-bit counter (MSB to LSB) These bits contain the value of the watchdog counter, decremented every (4096 x 2WDGTB[1:0]) PCLK cycles. A reset is produced when it is decremented from 0x40 to 0x3F (T6 becomes cleared)." />
      <BitField start="7" size="1" name="WDGA" description="Activation bit This bit is set by software and only cleared by hardware after a reset. When WDGA&#xc3;&#x82;&#xc2; =&#xc3;&#x82;&#xc2; 1, the watchdog can generate a reset.">
        <Enum name="B_0x0" start="0x0" description="Watchdog disabled" />
        <Enum name="B_0x1" start="0x1" description="Watchdog enabled" />
      </BitField>
    </Register>
    <Register start="+0x4" size="0" name="WWDG_CFR" access="Read/Write" description="Configuration register" reset_value="0x0000007F" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="7" name="W" description="7-bit window value These bits contain the window value to be compared with the down-counter." />
      <BitField start="9" size="1" name="EWI" description="Early wakeup interrupt When set, an interrupt occurs whenever the counter reaches the value 0x40. This interrupt is only cleared by hardware after a reset." />
      <BitField start="11" size="3" name="WDGTB" description="Timer base The timebase of the prescaler can be modified as follows:">
        <Enum name="B_0x0" start="0x0" description="CK Counter Clock (PCLK div 4096) div 1" />
        <Enum name="B_0x1" start="0x1" description="CK Counter Clock (PCLK div 4096) div 2" />
        <Enum name="B_0x2" start="0x2" description="CK Counter Clock (PCLK div 4096) div 4" />
        <Enum name="B_0x3" start="0x3" description="CK Counter Clock (PCLK div 4096) div 8" />
        <Enum name="B_0x4" start="0x4" description="CK Counter Clock (PCLK div 4096) div 16" />
        <Enum name="B_0x5" start="0x5" description="CK Counter Clock (PCLK div 4096) div 32" />
        <Enum name="B_0x6" start="0x6" description="CK Counter Clock (PCLK div 4096) div 64" />
        <Enum name="B_0x7" start="0x7" description="CK Counter Clock (PCLK div 4096) div 128" />
      </BitField>
    </Register>
    <Register start="+0x8" size="0" name="WWDG_SR" access="Read/Write" description="Status register" reset_value="0x00000000" reset_mask="0xFFFFFFFF">
      <BitField start="0" size="1" name="EWIF" description="Early wakeup interrupt flag" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="NVIC" start="0xE000E100" description="Nested Vectored Interrupt Controller">
    <Register name="NVIC_ISER0" description="Interrupt Set-Enable Register 0" start="0xE000E100">
      <BitField name="WWDG" start="0" size="1" />
      <BitField name="RTC_STAMP" start="2" size="1" />
      <BitField name="FLASH" start="3" size="1" />
      <BitField name="RCC" start="4" size="1" />
      <BitField name="EXTI0_1" start="5" size="1" />
      <BitField name="EXTI2_3" start="6" size="1" />
      <BitField name="EXTI4_15" start="7" size="1" />
      <BitField name="DMA1_Channel1" start="9" size="1" />
      <BitField name="DMA1_Channel2_3" start="10" size="1" />
      <BitField name="DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5" start="11" size="1" />
      <BitField name="ADC" start="12" size="1" />
      <BitField name="TIM1_BRK_UP_TRG_COM" start="13" size="1" />
      <BitField name="TIM1_CC" start="14" size="1" />
      <BitField name="TIM3_TIM4" start="16" size="1" />
      <BitField name="TIM6_DAC" start="17" size="1" />
      <BitField name="TIM7" start="18" size="1" />
      <BitField name="TIM14" start="19" size="1" />
      <BitField name="TIM15" start="20" size="1" />
      <BitField name="TIM16" start="21" size="1" />
      <BitField name="TIM17" start="22" size="1" />
      <BitField name="I2C1" start="23" size="1" />
      <BitField name="I2C2" start="24" size="1" />
      <BitField name="SPI1" start="25" size="1" />
      <BitField name="SPI2_SPI3" start="26" size="1" />
      <BitField name="USART1" start="27" size="1" />
      <BitField name="USART2" start="28" size="1" />
      <BitField name="USART3_USART4_USART5_USART6_LPUART1" start="29" size="1" />
    </Register>
    <Register name="NVIC_ICER0" description="Interrupt Clear-Enable Register 0" start="0xE000E180">
      <BitField name="WWDG" start="0" size="1" />
      <BitField name="RTC_STAMP" start="2" size="1" />
      <BitField name="FLASH" start="3" size="1" />
      <BitField name="RCC" start="4" size="1" />
      <BitField name="EXTI0_1" start="5" size="1" />
      <BitField name="EXTI2_3" start="6" size="1" />
      <BitField name="EXTI4_15" start="7" size="1" />
      <BitField name="DMA1_Channel1" start="9" size="1" />
      <BitField name="DMA1_Channel2_3" start="10" size="1" />
      <BitField name="DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5" start="11" size="1" />
      <BitField name="ADC" start="12" size="1" />
      <BitField name="TIM1_BRK_UP_TRG_COM" start="13" size="1" />
      <BitField name="TIM1_CC" start="14" size="1" />
      <BitField name="TIM3_TIM4" start="16" size="1" />
      <BitField name="TIM6_DAC" start="17" size="1" />
      <BitField name="TIM7" start="18" size="1" />
      <BitField name="TIM14" start="19" size="1" />
      <BitField name="TIM15" start="20" size="1" />
      <BitField name="TIM16" start="21" size="1" />
      <BitField name="TIM17" start="22" size="1" />
      <BitField name="I2C1" start="23" size="1" />
      <BitField name="I2C2" start="24" size="1" />
      <BitField name="SPI1" start="25" size="1" />
      <BitField name="SPI2_SPI3" start="26" size="1" />
      <BitField name="USART1" start="27" size="1" />
      <BitField name="USART2" start="28" size="1" />
      <BitField name="USART3_USART4_USART5_USART6_LPUART1" start="29" size="1" />
    </Register>
    <Register name="NVIC_ISPR0" description="Interrupt Set-Pending Register 0" start="0xE000E200">
      <BitField name="WWDG" start="0" size="1" />
      <BitField name="RTC_STAMP" start="2" size="1" />
      <BitField name="FLASH" start="3" size="1" />
      <BitField name="RCC" start="4" size="1" />
      <BitField name="EXTI0_1" start="5" size="1" />
      <BitField name="EXTI2_3" start="6" size="1" />
      <BitField name="EXTI4_15" start="7" size="1" />
      <BitField name="DMA1_Channel1" start="9" size="1" />
      <BitField name="DMA1_Channel2_3" start="10" size="1" />
      <BitField name="DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5" start="11" size="1" />
      <BitField name="ADC" start="12" size="1" />
      <BitField name="TIM1_BRK_UP_TRG_COM" start="13" size="1" />
      <BitField name="TIM1_CC" start="14" size="1" />
      <BitField name="TIM3_TIM4" start="16" size="1" />
      <BitField name="TIM6_DAC" start="17" size="1" />
      <BitField name="TIM7" start="18" size="1" />
      <BitField name="TIM14" start="19" size="1" />
      <BitField name="TIM15" start="20" size="1" />
      <BitField name="TIM16" start="21" size="1" />
      <BitField name="TIM17" start="22" size="1" />
      <BitField name="I2C1" start="23" size="1" />
      <BitField name="I2C2" start="24" size="1" />
      <BitField name="SPI1" start="25" size="1" />
      <BitField name="SPI2_SPI3" start="26" size="1" />
      <BitField name="USART1" start="27" size="1" />
      <BitField name="USART2" start="28" size="1" />
      <BitField name="USART3_USART4_USART5_USART6_LPUART1" start="29" size="1" />
    </Register>
    <Register name="NVIC_ICPR0" description="Interrupt Clear-Pending Register 0" start="0xE000E280">
      <BitField name="WWDG" start="0" size="1" />
      <BitField name="RTC_STAMP" start="2" size="1" />
      <BitField name="FLASH" start="3" size="1" />
      <BitField name="RCC" start="4" size="1" />
      <BitField name="EXTI0_1" start="5" size="1" />
      <BitField name="EXTI2_3" start="6" size="1" />
      <BitField name="EXTI4_15" start="7" size="1" />
      <BitField name="DMA1_Channel1" start="9" size="1" />
      <BitField name="DMA1_Channel2_3" start="10" size="1" />
      <BitField name="DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5" start="11" size="1" />
      <BitField name="ADC" start="12" size="1" />
      <BitField name="TIM1_BRK_UP_TRG_COM" start="13" size="1" />
      <BitField name="TIM1_CC" start="14" size="1" />
      <BitField name="TIM3_TIM4" start="16" size="1" />
      <BitField name="TIM6_DAC" start="17" size="1" />
      <BitField name="TIM7" start="18" size="1" />
      <BitField name="TIM14" start="19" size="1" />
      <BitField name="TIM15" start="20" size="1" />
      <BitField name="TIM16" start="21" size="1" />
      <BitField name="TIM17" start="22" size="1" />
      <BitField name="I2C1" start="23" size="1" />
      <BitField name="I2C2" start="24" size="1" />
      <BitField name="SPI1" start="25" size="1" />
      <BitField name="SPI2_SPI3" start="26" size="1" />
      <BitField name="USART1" start="27" size="1" />
      <BitField name="USART2" start="28" size="1" />
      <BitField name="USART3_USART4_USART5_USART6_LPUART1" start="29" size="1" />
    </Register>
    <Register name="NVIC_IABR0" description="Interrupt Active Bit Register 0" start="0xE000E300" access="ReadOnly">
      <BitField name="WWDG" start="0" size="1" />
      <BitField name="RTC_STAMP" start="2" size="1" />
      <BitField name="FLASH" start="3" size="1" />
      <BitField name="RCC" start="4" size="1" />
      <BitField name="EXTI0_1" start="5" size="1" />
      <BitField name="EXTI2_3" start="6" size="1" />
      <BitField name="EXTI4_15" start="7" size="1" />
      <BitField name="DMA1_Channel1" start="9" size="1" />
      <BitField name="DMA1_Channel2_3" start="10" size="1" />
      <BitField name="DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5" start="11" size="1" />
      <BitField name="ADC" start="12" size="1" />
      <BitField name="TIM1_BRK_UP_TRG_COM" start="13" size="1" />
      <BitField name="TIM1_CC" start="14" size="1" />
      <BitField name="TIM3_TIM4" start="16" size="1" />
      <BitField name="TIM6_DAC" start="17" size="1" />
      <BitField name="TIM7" start="18" size="1" />
      <BitField name="TIM14" start="19" size="1" />
      <BitField name="TIM15" start="20" size="1" />
      <BitField name="TIM16" start="21" size="1" />
      <BitField name="TIM17" start="22" size="1" />
      <BitField name="I2C1" start="23" size="1" />
      <BitField name="I2C2" start="24" size="1" />
      <BitField name="SPI1" start="25" size="1" />
      <BitField name="SPI2_SPI3" start="26" size="1" />
      <BitField name="USART1" start="27" size="1" />
      <BitField name="USART2" start="28" size="1" />
      <BitField name="USART3_USART4_USART5_USART6_LPUART1" start="29" size="1" />
    </Register>
    <Register name="NVIC_IPR0" description="Interrupt Priority Register 0" start="0xE000E400">
      <BitField name="WWDG" start="6" size="2" />
      <BitField name="RTC_STAMP" start="22" size="2" />
      <BitField name="FLASH" start="30" size="2" />
    </Register>
    <Register name="NVIC_IPR1" description="Interrupt Priority Register 1" start="0xE000E404">
      <BitField name="RCC" start="6" size="2" />
      <BitField name="EXTI0_1" start="14" size="2" />
      <BitField name="EXTI2_3" start="22" size="2" />
      <BitField name="EXTI4_15" start="30" size="2" />
    </Register>
    <Register name="NVIC_IPR2" description="Interrupt Priority Register 2" start="0xE000E408">
      <BitField name="DMA1_Channel1" start="14" size="2" />
      <BitField name="DMA1_Channel2_3" start="22" size="2" />
      <BitField name="DMA1_Channel4_5_6_7_DMAMUX_DMA2_Channel1_2_3_4_5" start="30" size="2" />
    </Register>
    <Register name="NVIC_IPR3" description="Interrupt Priority Register 3" start="0xE000E40C">
      <BitField name="ADC" start="6" size="2" />
      <BitField name="TIM1_BRK_UP_TRG_COM" start="14" size="2" />
      <BitField name="TIM1_CC" start="22" size="2" />
    </Register>
    <Register name="NVIC_IPR4" description="Interrupt Priority Register 4" start="0xE000E410">
      <BitField name="TIM3_TIM4" start="6" size="2" />
      <BitField name="TIM6_DAC" start="14" size="2" />
      <BitField name="TIM7" start="22" size="2" />
      <BitField name="TIM14" start="30" size="2" />
    </Register>
    <Register name="NVIC_IPR5" description="Interrupt Priority Register 5" start="0xE000E414">
      <BitField name="TIM15" start="6" size="2" />
      <BitField name="TIM16" start="14" size="2" />
      <BitField name="TIM17" start="22" size="2" />
      <BitField name="I2C1" start="30" size="2" />
    </Register>
    <Register name="NVIC_IPR6" description="Interrupt Priority Register 6" start="0xE000E418">
      <BitField name="I2C2" start="6" size="2" />
      <BitField name="SPI1" start="14" size="2" />
      <BitField name="SPI2_SPI3" start="22" size="2" />
      <BitField name="USART1" start="30" size="2" />
    </Register>
    <Register name="NVIC_IPR7" description="Interrupt Priority Register 7" start="0xE000E41C">
      <BitField name="USART2" start="6" size="2" />
      <BitField name="USART3_USART4_USART5_USART6_LPUART1" start="14" size="2" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="SysTick" start="0xe000e010" description="24-bit System Timer">
    <Register name="SYST_CSR" start="0xe000e010" description="SysTick Control and Status Register">
      <BitField name="COUNTFLAG" start="16" size="1" description="Counter Flag" />
      <BitField name="CLKSOURCE" start="2" size="1" description="Timer Clock Source" />
      <BitField name="TICKINT" start="1" size="1" description="Tick Interrupt Enable" />
      <BitField name="ENABLE" start="0" size="1" description="Enable SysTick Timer" />
    </Register>
    <Register name="SYST_RVR" start="0xe000e014" description="SysTick Reload Value Register">
      <BitField name="RELOAD" start="0" size="24" description="Value to load into the SYST_CVR when the counter is enabled and when it reaches 0" />
    </Register>
    <Register name="SYST_CVR" start="0xe000e018" description="SysTick Current Value Register Register">
      <BitField name="CURRENT" start="0" size="24" description="The current value of the SysTick counter" />
    </Register>
    <Register name="SYST_CALIB" start="0xe000e01c" access="ReadOnly" description="SysTick Calibration Value Register">
      <BitField name="NOREF" start="31" size="1" description="Indicates whether the device provides a reference clock to the processor" />
      <BitField name="SKEW" start="30" size="1" description="Indicates whether the TENMS value is exact" />
      <BitField name="TENMS" start="0" size="24" description="Reload value for 10ms (100Hz) timing, subject to system clock skew errors" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="SCB" start="0xe000e000" description="System Control Block">
    <Register name="CPUID" start="0xe000ed00" access="ReadOnly" description="CPUID Register">
      <BitField name="IMPLEMENTER" start="24" size="8" description="Implementer Code" />
      <BitField name="VARIANT" start="20" size="4" description="Variant Number" />
      <BitField name="PARTNO" start="4" size="12" description="Part Number" />
      <BitField name="REVISION" start="0" size="4" description="Revision Number" />
    </Register>
    <Register name="ICSR" start="0xe000ed04" description="Interrupt Control and State Register">
      <BitField name="NMIPENDSET" start="31" size="1" description="NMI set-pending bit" />
      <BitField name="PENDSVSET" start="28" size="1" description="PendSV set-pending bit" />
      <BitField name="PENDSVCLR" start="27" size="1" description="PendSV clear-pending bit" />
      <BitField name="PENDSTSET" start="26" size="1" description="SysTick exception set-pending bit" />
      <BitField name="PENDSTCLR" start="25" size="1" description="SysTick exception clear-pending bit" />
      <BitField name="ISRPREEMPT" start="23" size="1" description="" />
      <BitField name="ISRPENDING" start="22" size="1" description="Interrupt pending flag" />
      <BitField name="VECTPENDING" start="12" size="9" description="Indicates the exception number of the highest priority pending enabled exception" />
      <BitField name="VECTACTIVE" start="0" size="9" description="Contains the active exception number" />
    </Register>
    <Register name="AIRCR" start="0xe000ed0c" description="Application Interrupt and Reset Control Register">
      <BitField name="VECTKEY" start="16" size="16" description="Register key" />
      <BitField name="ENDIANESS" start="15" size="1" description="Data endianness bit" />
      <BitField name="SYSRESETREQ" start="2" size="1" description="System reset request bit" />
      <BitField name="VECTCLRACTIVE" start="1" size="1" description="" />
    </Register>
    <Register name="SCR" start="0xe000ed10" description="System Control Register">
      <BitField name="SEVONPEND" start="4" size="1" description="Send event on pending bit" />
      <BitField name="SLEEPDEEP" start="2" size="1" description="Controls whether the processor uses sleep or deep sleep as its low power mode" />
      <BitField name="SLEEPONEXIT" start="1" size="1" description="Indicates sleep-on-exit when returning from Handler mode to Thread mode" />
    </Register>
    <Register name="CCR" start="0xe000ed14" description="Configuration and Control Register">
      <BitField name="STKALIGN" start="9" size="1" description="Indicates stack alignment on exception entry" />
      <BitField name="UNALIGN_TRP" start="3" size="1" description="Enables unaligned access traps" />
    </Register>
    <Register name="SHPR2" start="0xe000ed1c" description="System Handler Priority Register 2">
      <BitField name="PRI_11(SVCall)" start="28" size="4" description="Priority of system handler 11 (SVCall)" />
    </Register>
    <Register name="SHPR3" start="0xe000ed20" description="System Handler Priority Register 3">
      <BitField name="PRI_15(SysTick)" start="28" size="4" description="Priority of system handler 15 (SysTick)" />
      <BitField name="PRI_14(PendSV)" start="20" size="4" description="Priority of system handler 14 (PendSV)" />
    </Register>
    <Register name="SHCSR" start="0xE000ED24" description="System Handler Control and State Register">
      <BitField name="SVCALLPENDED" start="15" size="1" description="SVCall Pending Bit" />
    </Register>
    <Register name="DFSR" start="0xE000ED30" description="Debug Fault Status Register">
      <BitField name="EXTERNAL" start="4" size="1" description="" />
      <BitField name="VCATCH" start="3" size="1" description="" />
      <BitField name="DWTTRAP" start="2" size="1" description="" />
      <BitField name="BKPT" start="1" size="1" description="" />
      <BitField name="HALTED" start="0" size="1" description="" />
    </Register>
  </RegisterGroup>
  <RegisterGroup name="MPU" start="0xe000ed90" description="Memory Protection Unit">
    <Register name="MPU_TYPE" start="0xe000ed90" access="ReadOnly" description="MPU Type Register">
      <BitField name="IREGION" start="16" size="8" description="Number of supported MPU instruction regions" />
      <BitField name="DREGION" start="8" size="8" description="Number of supported MPU data regions" />
      <BitField name="SEPARATE" start="0" size="1" description="Support for unified or separate instruction and date memory maps" />
    </Register>
    <Register name="MPU_CTRL" start="0xe000ed94" description="MPU Control Register">
      <BitField name="PRIVDEFENA" start="2" size="1" description="Enables privileged software access to the default memory map" />
      <BitField name="HFNMIENA" start="1" size="1" description="Enable the operation of MPU during hard fault, NMI, and FAULTMASK handlers" />
      <BitField name="ENABLE" start="0" size="1" description="Enable MPU" />
    </Register>
    <Register name="MPU_RNR" start="0xe000ed98" description="MPU Region Number Register">
      <BitField name="REGION" start="0" size="8" description="Indicates the MPU region referenced by the MPU_RBAR and MPU_RASR registers" />
    </Register>
    <Register name="MPU_RBAR" start="0xe000ed9c" description="MPU Region Base Address Register">
      <BitField name="ADDR" start="5" size="27" description="Region base address field" />
      <BitField name="VALID" start="4" size="1" description="MPU Region Number valid bit" />
      <BitField name="REGION" start="0" size="4" description="MPU region field" />
    </Register>
    <Register name="MPU_RASR" start="0xe000eda0" description="MPU Region Attribute and Size Register">
      <BitField name="XN" start="28" size="1" description="Instruction access disable bit" />
      <BitField name="AP" start="24" size="3" description="Access permission field" />
      <BitField name="TEX" start="19" size="3" description="Memory access attribute" />
      <BitField name="S" start="18" size="1" description="Shareable bit" />
      <BitField name="C" start="17" size="1" description="Memory access attribute" />
      <BitField name="B" start="16" size="1" description="Memory access attribute" />
      <BitField name="SRD" start="8" size="8" description="Subregion disable bits" />
      <BitField name="SIZE" start="1" size="5" description="MPU protection region size" />
      <BitField name="ENABLE" start="0" size="1" description="Region enable bit" />
    </Register>
  </RegisterGroup>
</Processor>
